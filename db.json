{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/0.jpg","path":"images/0.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"4de270bc164fc0abd99d292c0688a52e2dad1b79","modified":1495332437354},{"_id":"source/CNAME","hash":"fa788d86fdb329b0cdb398c7db34a031709e3d64","modified":1495332437354},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1467781966000},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1467781966000},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1467781966000},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1467781966000},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1467781966000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1467781966000},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1467781966000},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1467781966000},{"_id":"themes/next/_config.yml","hash":"a0003bdf8530207c80fac8530aef516f2385814a","modified":1506257750008},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1467781966000},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1467781966000},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1467781966000},{"_id":"source/about/index.md","hash":"f615b7d88d87515780d3f0c82f759e40fa137330","modified":1505835595760},{"_id":"source/_posts/About $.when.md","hash":"8fcf114d94c4c63f88098509a7cc11f3bf24bdf3","modified":1495334919675},{"_id":"source/_posts/About Canvas.md","hash":"b02a89e8294c1b02fd96a2c2fdc7a325cd3946b2","modified":1495335118294},{"_id":"source/_posts/About Deferred.md","hash":"eabd66a1de9ff10b2f75ef0af6defb8b001a9b22","modified":1495334858716},{"_id":"source/_posts/About Messi.md","hash":"77752e9e5eb152532538ba026c50b1b324e309e0","modified":1495335201397},{"_id":"source/_posts/About Meta.md","hash":"8694cb0f5e6e4f201072487fce689bbf08357a92","modified":1495334949005},{"_id":"source/_posts/About Mongodb.md","hash":"4f33bd6192055844192c444e3079bd1b517823f1","modified":1495335052903},{"_id":"source/_posts/About RegExp.md","hash":"b6f978906495e19445da35b83728ffe73e24fc44","modified":1495334935149},{"_id":"source/_posts/About WebSocket.md","hash":"622ffc8cdc3c9e86b133d2464cada1f9411a1409","modified":1495334969765},{"_id":"source/_posts/About angulr_ng-if、ng-show.md","hash":"ba3166499a6cd466e01e871f7e2e429b85751f8f","modified":1495334827707},{"_id":"source/_posts/About clipboard.md","hash":"ff2055466dc403a18d0a3594893f41b8f5b1854c","modified":1505642704663},{"_id":"source/_posts/About fs.md","hash":"4a1e6e3d431e5c447e02e26dd1f4e46a0909dcab","modified":1495334795181},{"_id":"source/_posts/About git ssh.md","hash":"99ed30f8e58247bde375dca2aeb1ff59e77934d7","modified":1495335120999},{"_id":"source/_posts/About gulp.md","hash":"679e5aaf217cb907017e04f3230c1f062c103139","modified":1495335076030},{"_id":"source/_posts/About input.md","hash":"25a2246ef67522f14da6a1d16c729e9fb0e61dcb","modified":1505314644215},{"_id":"source/_posts/About mode&flage of fs.md","hash":"38fca15a89ef8bf918c11b303d47a169b471ee42","modified":1495335219917},{"_id":"source/_posts/About sql.md","hash":"d51574acced86649d3c90fb55c9d549c5331506a","modified":1495334807965},{"_id":"source/_posts/canvas_xiangshu.md","hash":"e75b7b540e8d6a32c0aa0eb0b7c6a992ba73299d","modified":1495334899877},{"_id":"source/_posts/About ip.md","hash":"e028daed8ae00416068c78852ade14320962a15b","modified":1496241776113},{"_id":"source/categories/index.md","hash":"17e8f7a4ad97f68db910ed014466b495064e3f16","modified":1495332437357},{"_id":"source/tags/index.md","hash":"87835f56612c05830766b6d27e943ddc5a89bb15","modified":1495332437358},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1468043174000},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1467781966000},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1467781966000},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1467781966000},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1467781966000},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1467781966000},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1467781966000},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1467781966000},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1467781966000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1467781966000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1467781966000},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1467781966000},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1467781966000},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1467781966000},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1467781966000},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1467781966000},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1467781966000},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1467781966000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"65de6b40d2e994a11f61ad79c9b25799e05607bc","modified":1504709429997},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1467781966000},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1467781966000},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1467781966000},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1467781966000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467781966000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1467781966000},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1467781966000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1467781966000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1467781966000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1467781966000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1467781966000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1467781966000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1467781966000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1467781966000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1467781966000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5d84f3938e99f1908a6a1d44dd530740625f0188","modified":1467781966000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"99133b54a2aa66fdae4becdf6909de43c602e12e","modified":1467809534000},{"_id":"themes/next/layout/_partials/head.swig","hash":"881abebed3a7fa71827365b0ba0e84ec525eeb7f","modified":1467781966000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1467781966000},{"_id":"themes/next/layout/_partials/header.swig","hash":"46f8bbe51c0334c64c3a237bc0fe8ef73c6e58e1","modified":1468042608000},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1468042998000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1467781966000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1467781966000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1467781966000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1467781966000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1467781966000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1467781966000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1467781966000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1467781966000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1467781966000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1467781966000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1467781966000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1467781966000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1467781966000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1467781966000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1467781966000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1467781966000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1467781966000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467781966000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467781966000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467781966000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467781966000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467781966000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467781966000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467781966000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1467781966000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1467781966000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1467781966000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1467781966000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1467781966000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1467781966000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1467781966000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1467781966000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1467781966000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1467781966000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1467781966000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1467781966000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1467781966000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1467781966000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1467781966000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1467781966000},{"_id":"themes/next/source/images/favicon.ico","hash":"4516a86016aab870619166d8a396814aba4ee40c","modified":1458022006000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1467781966000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1467781966000},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1467781966000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1467781966000},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1467781966000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1467781966000},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1467781966000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1467781966000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1467781966000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1467781966000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1467781966000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1467781966000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1467781966000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1467781966000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1467781966000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1467781966000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1467781966000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1467781966000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1467781966000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1467781966000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1467781966000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1467781966000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1467781966000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1467781966000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1467781966000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1467781966000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1467781966000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1467781966000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1467781966000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1467781966000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1467781966000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1467781966000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1467781966000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1467781966000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1467781966000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1467781966000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"3931f9c3bac3970a3f54c9d0072ae4c950aa176c","modified":1467781966000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1467781966000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1467781966000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1467781966000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1467781966000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1467781966000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"0a2f48971d86ea72e1a8fd1d8bbf2b7d423666b2","modified":1467781966000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1467781966000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1467781966000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1467781966000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1467781966000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1467781966000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1467781966000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1467781966000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1467781966000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1467781966000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1467781966000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1467781966000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1467781966000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1467781966000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1467781966000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1467781966000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1467781966000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1467781966000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1467781966000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1467781966000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1467781966000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1467781966000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1467781966000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1467781966000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1467781966000},{"_id":"themes/next/source/images/0.jpg","hash":"f4b6a1580d6a148f833e2084e40c301328108420","modified":1458292512000},{"_id":"public/404.html","hash":"d17cb9aec7438b96325966d5ffa6f37771e46131","modified":1506259743217},{"_id":"public/about/index.html","hash":"c2dcfc59872b965855f4670c21eeba490e176314","modified":1506259743217},{"_id":"public/categories/index.html","hash":"bc7c53dd480c4508024d338f3d73a9f8ef8566f9","modified":1506259743218},{"_id":"public/tags/index.html","hash":"fff23ddaf1b105e67805ea66ce964597bfcff61a","modified":1506259743218},{"_id":"public/2017/05/13/About clipboard/index.html","hash":"9d0a235c76bffa1d0544edf63793107dc5221c1e","modified":1506259743218},{"_id":"public/2017/04/17/About ip/index.html","hash":"c5c9aac80b8bbd3546884a9e9cb49c498d2ab680","modified":1506259743218},{"_id":"public/2017/04/10/About mode&flage of fs/index.html","hash":"0020350bcb474dd391cc8ed6c0a35e6853a52f15","modified":1506259743218},{"_id":"public/2017/03/06/About angulr_ng-if、ng-show/index.html","hash":"a7c10707f248b11eedcad9c77f48d5bcca0d897f","modified":1506259743218},{"_id":"public/2016/11/01/canvas_xiangshu/index.html","hash":"fb33c9e212ec9fd7190b3bab7f82a0a6b3074d02","modified":1506259743218},{"_id":"public/2016/11/01/About Deferred/index.html","hash":"d842b10a6d4e6096cf3d19afa8edd7758c693c73","modified":1506259743218},{"_id":"public/2016/09/25/About WebSocket/index.html","hash":"38bddf668b7749012eacf5e1340c32235f35d159","modified":1506259743218},{"_id":"public/2016/08/11/About git ssh/index.html","hash":"6529544ce263632f501001ff023290181578f533","modified":1506259743218},{"_id":"public/2016/07/12/About Messi/index.html","hash":"5d6585e41a327c2765e18f5c9c5f5d5279166d15","modified":1506259743218},{"_id":"public/archives/page/2/index.html","hash":"adde4aeb304b16617913e20e143049b17fdd15ce","modified":1506259743219},{"_id":"public/archives/2016/page/2/index.html","hash":"94839d2ece52ec9248ce248beddca95f05c164c5","modified":1506259743219},{"_id":"public/archives/2016/07/index.html","hash":"1749b417ca3a0e112bed937fe26d6f584156d10d","modified":1506259743219},{"_id":"public/archives/2016/08/index.html","hash":"5ce309e7acbe18497b18f303dec9970b0b5b7c6f","modified":1506259743219},{"_id":"public/archives/2016/09/index.html","hash":"8b2fc35a4533a17fb9b9e67d6159c28a77ada4ab","modified":1506259743219},{"_id":"public/archives/2016/10/index.html","hash":"7888bd3f9653770f00f31eb544ad43f89e21a1df","modified":1506259743219},{"_id":"public/archives/2016/11/index.html","hash":"716d580001d0def7d74354bd06bf0d9185a60661","modified":1506259743219},{"_id":"public/archives/2017/index.html","hash":"49595b51c80edee0276757b00f1495a1b9c32ec5","modified":1506259743219},{"_id":"public/archives/2017/03/index.html","hash":"c05ff7ffcf5a1da0afc39123d4d6fd0c7389b9d6","modified":1506259743219},{"_id":"public/archives/2017/04/index.html","hash":"76063ce9d20f0deee457fc06b39794eead721cd8","modified":1506259743219},{"_id":"public/archives/2017/05/index.html","hash":"156e15081b43653bc5e61164c741a989e6cfe262","modified":1506259743219},{"_id":"public/categories/甫夸之谈———JS/index.html","hash":"242109629a0c3d9f2da478f66608953ddc13bbdf","modified":1506259743219},{"_id":"public/categories/甫夸之谈———canvas/index.html","hash":"ad3307d2ca0a39f13d98cbfa6c62acf20004f46f","modified":1506259743219},{"_id":"public/categories/Red-Blue/index.html","hash":"d48904fe338db0bde00e49d4555edfab46fb7437","modified":1506259743219},{"_id":"public/categories/甫夸之谈———移动端/index.html","hash":"6fe7dbb934135ff557909592f564b8367cc32a3f","modified":1506259743219},{"_id":"public/categories/甫夸之谈———mongoDB/index.html","hash":"943869110ac038f2ae4c37a8640e52fef7ddbaad","modified":1506259743219},{"_id":"public/categories/甫夸之谈———正则/index.html","hash":"c6716619f1b7b5cc8890f8438c9ecb54ac67e9e0","modified":1506259743219},{"_id":"public/categories/甫夸之谈———websocket/index.html","hash":"0bed013aafab9f3a82cd3587ffc63e47d13830e5","modified":1506259743221},{"_id":"public/categories/甫夸之谈———Angular/index.html","hash":"4e114a6ebab0e2769da3faa5597673e8fc0f4731","modified":1506259743221},{"_id":"public/categories/甫夸之谈———node/index.html","hash":"344a3c59298110ff67226b44b30a561f670dfa19","modified":1506259743221},{"_id":"public/categories/甫夸之谈————Git/index.html","hash":"44bcc3af0f2a72e7cba6132908370f83d16b230f","modified":1506259743221},{"_id":"public/categories/甫夸之谈———gulp/index.html","hash":"e376eee29c7f3703a74ab87e468e277dd55b4480","modified":1506259743221},{"_id":"public/categories/甫夸之谈———input/index.html","hash":"90176b00c10646fb18373f81151a4ac687ba4a56","modified":1506259743221},{"_id":"public/categories/甫夸之谈———sql/index.html","hash":"46583d39c968c74c6d59e70d0e983fed3e82c03d","modified":1506259743221},{"_id":"public/categories/甫夸之谈———php/index.html","hash":"1c65b516549a12c5c733d935db244b718c36c65a","modified":1506259743221},{"_id":"public/tags/div-style-transform-rotate-10deg-scale-3-color-pink-when-div/index.html","hash":"45aa9e05106b83439e6143b7e5807b04b9182daf","modified":1506259743221},{"_id":"public/tags/Canvas/index.html","hash":"77265a17609ed874495dec4e40b35e7416a17deb","modified":1506259743221},{"_id":"public/tags/Deferred/index.html","hash":"84401fb852e2e6f6f7535d9b8aae6c4dbf949d32","modified":1506259743221},{"_id":"public/tags/Messi/index.html","hash":"f8b5dac8e9fceb12d3a94199abe7f72ce5d6ea6a","modified":1506259743221},{"_id":"public/tags/b-style-color-red-meta-b/index.html","hash":"c2f6538ec8d563e8768c7ac9978b485cce3db34e","modified":1506259743221},{"_id":"public/tags/mongodb/index.html","hash":"39d9211e8e95a765f92dd76d47e3fe521b4d4284","modified":1506259743222},{"_id":"public/tags/b-style-font-size-40px-RegExp-b/index.html","hash":"f7bee5248720c3cd3e3c22eeacd6dcd3108635cf","modified":1506259743222},{"_id":"public/tags/h1-Websocket-h1/index.html","hash":"6947f6001c75518797f73b71306dee87f361d9ad","modified":1506259743222},{"_id":"public/tags/ng-if、ng-show/index.html","hash":"5c8c05a81635544e3ac4430c1dba5a90643e4271","modified":1506259743222},{"_id":"public/tags/clipboard/index.html","hash":"7e3ee579f59545d8b113ddd08db30f6b3d353359","modified":1506259743222},{"_id":"public/tags/span-style-color-orange-fs-span/index.html","hash":"6669ec6866b18ad508ae40058dad52a1d9f0364b","modified":1506259743222},{"_id":"public/tags/Git/index.html","hash":"7b4842b5e0d4494b9c62e333d0a76e178945a1a6","modified":1506259743222},{"_id":"public/tags/h1-gulp-h1/index.html","hash":"252a06525f218868d9a73ea4381138a00e0ba038","modified":1506259743222},{"_id":"public/tags/html/index.html","hash":"b13e01bf01d1bbc841a018da5d1a949537cd1dbd","modified":1506259743222},{"_id":"public/tags/sql/index.html","hash":"6c53d942f81246bea3b6c8c33d93731378d80d8e","modified":1506259743222},{"_id":"public/tags/span-style-color-cyan-font-size-20px-php-span/index.html","hash":"8c1d93edf71a8cb1ec0d2ef567b030f518c6ae45","modified":1506259743222},{"_id":"public/2017/04/29/About input/index.html","hash":"4cc815418f9321559a20844d7f6a4c0a145fa59f","modified":1506259743222},{"_id":"public/2017/04/09/About fs/index.html","hash":"4ee35025995080675b9bdfa1cd3201aa42f491f2","modified":1506259743222},{"_id":"public/2017/04/02/About sql/index.html","hash":"33fd6027a706d47be77973d0fa3879e1ee577b05","modified":1506259743222},{"_id":"public/2016/10/11/About $.when/index.html","hash":"31b7dca3670e77a9e1e05712ba72f9f5d5f504d4","modified":1506259743222},{"_id":"public/2016/09/27/About RegExp/index.html","hash":"8bb1c783f5582aabcf45e472af98bdbbbd24bffa","modified":1506259743222},{"_id":"public/2016/09/26/About Meta/index.html","hash":"df9ad66c8574ea3f531dee154f4f8a85f51c5c43","modified":1506259743222},{"_id":"public/2016/09/02/About Mongodb/index.html","hash":"38fa5fd43246cc5d28a3f7d2c1737fb56ee5ebf3","modified":1506259743222},{"_id":"public/2016/08/22/About gulp/index.html","hash":"1edb378f4591de4936739e1aec52956ab7ee288b","modified":1506259743222},{"_id":"public/2016/08/09/About Canvas/index.html","hash":"bcb717312ade31713acdd674522e5e9088ed7732","modified":1506259743222},{"_id":"public/archives/index.html","hash":"6ecb59ba0cb357119ef489025dee93414001e317","modified":1506259743223},{"_id":"public/archives/2016/index.html","hash":"2946484c3f07553ad084e233ed8ad492c09e30a3","modified":1506259743223},{"_id":"public/index.html","hash":"e191dfc9d6e5c8b67e21e9764c92406944302fd9","modified":1506259743223},{"_id":"public/page/2/index.html","hash":"a47f700bf099e1eb1d2954ff58a2e1458a33ef14","modified":1506259743223},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1506259743249},{"_id":"public/CNAME","hash":"fa788d86fdb329b0cdb398c7db34a031709e3d64","modified":1506259743249},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1506259743249},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1506259743249},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1506259743249},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1506259743249},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1506259743249},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1506259743249},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1506259743250},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506259743250},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506259743250},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1506259743250},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1506259743250},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1506259743250},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1506259743250},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1506259743250},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1506259743250},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1506259743250},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1506259743250},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1506259743250},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1506259743250},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1506259743250},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1506259743250},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1506259743250},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1506259743250},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1506259744304},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1506259744314},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1506259744316},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1506259744335},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1506259744335},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1506259744335},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1506259744335},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1506259744336},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1506259744336},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1506259744336},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1506259744336},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1506259744336},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1506259744336},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1506259744336},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1506259744336},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1506259744336},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1506259744336},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1506259744336},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1506259744336},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1506259744336},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1506259744336},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1506259744336},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1506259744336},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1506259744336},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1506259744336},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1506259744336},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1506259744336},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1506259744337},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1506259744337},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1506259744337},{"_id":"public/css/main.css","hash":"ef98bb4f3b83f3765461ef3f3a5918e948175a38","modified":1506259744337},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1506259744337},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1506259744337},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1506259744337},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1506259744337},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1506259744337},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1506259744337},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1506259744338},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1506259744338},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1506259744338},{"_id":"public/images/favicon.ico","hash":"4516a86016aab870619166d8a396814aba4ee40c","modified":1506259744365},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1506259744366},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1506259744381},{"_id":"public/images/0.jpg","hash":"f4b6a1580d6a148f833e2084e40c301328108420","modified":1506259744403}],"Category":[{"name":"甫夸之谈———JS","_id":"cj7ys5p4t0006a8vuekk4rkby"},{"name":"甫夸之谈———canvas","_id":"cj7ys5p55000ba8vu7ky0ttv3"},{"name":"Red&Blue","_id":"cj7ys5p5n000ma8vugqds15pl"},{"name":"甫夸之谈———移动端","_id":"cj7ys5p5v000sa8vuqe5b1t00"},{"name":"甫夸之谈———mongoDB","_id":"cj7ys5p64000za8vuqu5x3l9o"},{"name":"甫夸之谈———正则","_id":"cj7ys5p6e0016a8vumpvaxgxu"},{"name":"甫夸之谈———websocket","_id":"cj7ys5p6n001ca8vud4vhjfko"},{"name":"甫夸之谈———Angular","_id":"cj7ys5p6p001ha8vuhfj8nlcb"},{"name":"甫夸之谈———node","_id":"cj7ys5p6s001ma8vusxyyh0bt"},{"name":"甫夸之谈————Git","_id":"cj7ys5p6u001qa8vuc9v8syp4"},{"name":"甫夸之谈———gulp","_id":"cj7ys5p6w001ua8vutqbxo3l1"},{"name":"甫夸之谈———input","_id":"cj7ys5p6y001ya8vur9mdiar4"},{"name":"甫夸之谈———sql","_id":"cj7ys5p710026a8vuuyc6ij59"},{"name":"甫夸之谈———php","_id":"cj7ys5p72002aa8vuj09exfh7"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>","date":"2017-05-21T02:07:17.354Z","updated":"2017-05-21T02:07:17.354Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj7ys5p2n0000a8vuy9sit7e3","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your site url \" homepagename=\"回到我的主页\">\n</script>\n\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>"},{"title":"about","date":"2016-07-07T15:11:10.000Z","type":"about","_content":"\n> 杂技综合\n\n　　<b style=\"font-size: 20px;\" title=\"图片与base64码转换\">[pic_to_base64](http://www.fukua777.cn/pic_to_base64/)</b>\n　　<b style=\"font-size: 20px; display: inline-block; margin-top: 20px;\" title=\"拖拽图片\">[drag and drop](http://www.fukua777.cn/drag-and-drop/)</b>\n　　<b style=\"font-size: 20px; display: inline-block; margin-top: 20px;\" title=\"文本编辑\">[web editor](http://www.fukua777.cn/web-editor/)</b>","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-07-07 23:11:10\ntype: \"about\"\n---\n\n> 杂技综合\n\n　　<b style=\"font-size: 20px;\" title=\"图片与base64码转换\">[pic_to_base64](http://www.fukua777.cn/pic_to_base64/)</b>\n　　<b style=\"font-size: 20px; display: inline-block; margin-top: 20px;\" title=\"拖拽图片\">[drag and drop](http://www.fukua777.cn/drag-and-drop/)</b>\n　　<b style=\"font-size: 20px; display: inline-block; margin-top: 20px;\" title=\"文本编辑\">[web editor](http://www.fukua777.cn/web-editor/)</b>","updated":"2017-09-19T15:39:55.760Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj7ys5p4g0002a8vu1v3edlcv","content":"<blockquote>\n<p>杂技综合</p>\n</blockquote>\n<p>　　<b style=\"font-size: 20px;\" title=\"图片与base64码转换\"><a href=\"http://www.fukua777.cn/pic_to_base64/\" target=\"_blank\" rel=\"external\">pic_to_base64</a></b><br>　　<b style=\"font-size: 20px; display: inline-block; margin-top: 20px;\" title=\"拖拽图片\"><a href=\"http://www.fukua777.cn/drag-and-drop/\" target=\"_blank\" rel=\"external\">drag and drop</a></b><br>　　<b style=\"font-size: 20px; display: inline-block; margin-top: 20px;\" title=\"文本编辑\"><a href=\"http://www.fukua777.cn/web-editor/\" target=\"_blank\" rel=\"external\">web editor</a></b></p>\n","excerpt":"","more":"<blockquote>\n<p>杂技综合</p>\n</blockquote>\n<p>　　<b style=\"font-size: 20px;\" title=\"图片与base64码转换\"><a href=\"http://www.fukua777.cn/pic_to_base64/\">pic_to_base64</a></b><br>　　<b style=\"font-size: 20px; display: inline-block; margin-top: 20px;\" title=\"拖拽图片\"><a href=\"http://www.fukua777.cn/drag-and-drop/\">drag and drop</a></b><br>　　<b style=\"font-size: 20px; display: inline-block; margin-top: 20px;\" title=\"文本编辑\"><a href=\"http://www.fukua777.cn/web-editor/\">web editor</a></b></p>\n"},{"title":"categories","date":"2016-07-07T15:11:10.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-07-07 23:11:10\ntype: \"categories\"\n---\n","updated":"2017-05-21T02:07:17.357Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj7ys5p4m0004a8vu8ej4hvol","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-07-06T13:11:23.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-07-06 21:11:23\ntype: \"tags\"\n---\n","updated":"2017-05-21T02:07:17.358Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj7ys5pe4002ia8vurm9azm1l","content":"","excerpt":"","more":""}],"Post":[{"title":"About　$.when()","date":"2016-10-10T16:00:00.000Z","_content":"\n>关于deferred对象\n\n　　简单来说，deferred对象就是jQuery的回调函数解决方案。本意是”延迟“，即程序延迟到某个点再向下执行。\n\n>主要\n\n+\t类比于传统ajax操作，运用deferred对象后的链式写法使得代码的可读性更强。\n\n\n\t$.ajax(\n\t\turl: \"fukua.html\",\n\t\tsuccess: function(){\n\t\t\talert(\"messi is best!\");\n\t\t},\n\t\terror: function(){\n\t\t\talert(\"messi is no better than!\");\n\t\t}\n\t)\n+\t如上，$.ajax()接受一个对象参数，成功、失败分别对应success、error方法。若用deferred延迟对象则可用done、fail方法解决。\n\n\n\t$.ajax(\"fukua.html\")\n\t.done(function(){alert(\"messi is best!\");})\n\t.fail(function(){alert(\"messi is no better than!\");})\n\n<!--- more --->\t\n+\tdeferred对象的优点更在于她可以给多个事件绑定多个回调函数。\n\n\n\t$.ajax(\"fukua.html\")\n\t.done(function(){alert(\"messi is best!\");})\n\t.fail(function(){alert(\"messi is no better than!\");})\n\t.done(function(){alert(\"messi is very good!\");})\n\t\n+\t如上，要为多个事件绑定回调需要用到$.when()。\n\n\n\t$.when($.ajax(\"fukua.html\"),$.ajax(\"messi.html\"))\n\t.done(function(){alert(\"messi is best!\");})\n\t.fail(function(){alert(\"messi is no better than!\");})\t\n\t\n*****\n\n+\tdeferred对象的最大优点在于，她把整个一套回调函数接口从ajax操作扩展到了所有操作，即不仅是ajax还是本地操作，不管异步还是同步，都可以使用deferred对象的方法。\n\n\n\t$.when(anyFunc())\n\t.done(function(){alert(\"messi is best!\");})\n\t.fail(function(){alert(\"messi is no better than!\");})\t\n\n+\t如上，当参数是普通函数时done()方法会立即执行，原因在于$.when()的参数只能是deferred对象。\n\n\n\tvar testParam = $.Deferred();\t//新建一个deferred对象\n\tvar anyFunc = function(testParam){\n\t\tvar testFunc = function(){\n\t\t\talert(\"It is OK!\");\n\t\t\ttestParam.resolve();\t//改变deferred对象的执行状态\n\t\t}\t\n\t\treturn testParam;\t\n\t}\t\n\t//现在anyFunc返回的是deferred对象了，即可运用链式操作\n\t$.when(anyFunc(testParam))\n\t.done(function(){alert(\"messi is best!\");})\n\t.fail(function(){alert(\"messi is no better than!\");})\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/About $.when.md","raw":"---\ntitle: About　$.when()\ncategories: 甫夸之谈———JS\ndate: 2016-10-11\ntags: \"<div style='transform: rotate(10deg) scale(3); color: pink;'>$.when()</div>\"\n---\n\n>关于deferred对象\n\n　　简单来说，deferred对象就是jQuery的回调函数解决方案。本意是”延迟“，即程序延迟到某个点再向下执行。\n\n>主要\n\n+\t类比于传统ajax操作，运用deferred对象后的链式写法使得代码的可读性更强。\n\n\n\t$.ajax(\n\t\turl: \"fukua.html\",\n\t\tsuccess: function(){\n\t\t\talert(\"messi is best!\");\n\t\t},\n\t\terror: function(){\n\t\t\talert(\"messi is no better than!\");\n\t\t}\n\t)\n+\t如上，$.ajax()接受一个对象参数，成功、失败分别对应success、error方法。若用deferred延迟对象则可用done、fail方法解决。\n\n\n\t$.ajax(\"fukua.html\")\n\t.done(function(){alert(\"messi is best!\");})\n\t.fail(function(){alert(\"messi is no better than!\");})\n\n<!--- more --->\t\n+\tdeferred对象的优点更在于她可以给多个事件绑定多个回调函数。\n\n\n\t$.ajax(\"fukua.html\")\n\t.done(function(){alert(\"messi is best!\");})\n\t.fail(function(){alert(\"messi is no better than!\");})\n\t.done(function(){alert(\"messi is very good!\");})\n\t\n+\t如上，要为多个事件绑定回调需要用到$.when()。\n\n\n\t$.when($.ajax(\"fukua.html\"),$.ajax(\"messi.html\"))\n\t.done(function(){alert(\"messi is best!\");})\n\t.fail(function(){alert(\"messi is no better than!\");})\t\n\t\n*****\n\n+\tdeferred对象的最大优点在于，她把整个一套回调函数接口从ajax操作扩展到了所有操作，即不仅是ajax还是本地操作，不管异步还是同步，都可以使用deferred对象的方法。\n\n\n\t$.when(anyFunc())\n\t.done(function(){alert(\"messi is best!\");})\n\t.fail(function(){alert(\"messi is no better than!\");})\t\n\n+\t如上，当参数是普通函数时done()方法会立即执行，原因在于$.when()的参数只能是deferred对象。\n\n\n\tvar testParam = $.Deferred();\t//新建一个deferred对象\n\tvar anyFunc = function(testParam){\n\t\tvar testFunc = function(){\n\t\t\talert(\"It is OK!\");\n\t\t\ttestParam.resolve();\t//改变deferred对象的执行状态\n\t\t}\t\n\t\treturn testParam;\t\n\t}\t\n\t//现在anyFunc返回的是deferred对象了，即可运用链式操作\n\t$.when(anyFunc(testParam))\n\t.done(function(){alert(\"messi is best!\");})\n\t.fail(function(){alert(\"messi is no better than!\");})\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"About $.when","published":1,"updated":"2017-05-21T02:48:39.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p4b0001a8vu7zal6m2o","content":"<blockquote>\n<p>关于deferred对象</p>\n</blockquote>\n<p>　　简单来说，deferred对象就是jQuery的回调函数解决方案。本意是”延迟“，即程序延迟到某个点再向下执行。</p>\n<blockquote>\n<p>主要</p>\n</blockquote>\n<ul>\n<li>类比于传统ajax操作，运用deferred对象后的链式写法使得代码的可读性更强。</li>\n</ul>\n<pre><code>$.ajax(\n    url: &quot;fukua.html&quot;,\n    success: function(){\n        alert(&quot;messi is best!&quot;);\n    },\n    error: function(){\n        alert(&quot;messi is no better than!&quot;);\n    }\n)\n</code></pre><ul>\n<li>如上，$.ajax()接受一个对象参数，成功、失败分别对应success、error方法。若用deferred延迟对象则可用done、fail方法解决。</li>\n</ul>\n<pre><code>$.ajax(&quot;fukua.html&quot;)\n.done(function(){alert(&quot;messi is best!&quot;);})\n.fail(function(){alert(&quot;messi is no better than!&quot;);})\n</code></pre><a id=\"more\"></a>    \n<ul>\n<li>deferred对象的优点更在于她可以给多个事件绑定多个回调函数。</li>\n</ul>\n<pre><code>$.ajax(&quot;fukua.html&quot;)\n.done(function(){alert(&quot;messi is best!&quot;);})\n.fail(function(){alert(&quot;messi is no better than!&quot;);})\n.done(function(){alert(&quot;messi is very good!&quot;);})\n</code></pre><ul>\n<li>如上，要为多个事件绑定回调需要用到$.when()。</li>\n</ul>\n<pre><code>$.when($.ajax(&quot;fukua.html&quot;),$.ajax(&quot;messi.html&quot;))\n.done(function(){alert(&quot;messi is best!&quot;);})\n.fail(function(){alert(&quot;messi is no better than!&quot;);})    \n</code></pre><hr>\n<ul>\n<li>deferred对象的最大优点在于，她把整个一套回调函数接口从ajax操作扩展到了所有操作，即不仅是ajax还是本地操作，不管异步还是同步，都可以使用deferred对象的方法。</li>\n</ul>\n<pre><code>$.when(anyFunc())\n.done(function(){alert(&quot;messi is best!&quot;);})\n.fail(function(){alert(&quot;messi is no better than!&quot;);})    \n</code></pre><ul>\n<li>如上，当参数是普通函数时done()方法会立即执行，原因在于$.when()的参数只能是deferred对象。</li>\n</ul>\n<pre><code>var testParam = $.Deferred();    //新建一个deferred对象\nvar anyFunc = function(testParam){\n    var testFunc = function(){\n        alert(&quot;It is OK!&quot;);\n        testParam.resolve();    //改变deferred对象的执行状态\n    }    \n    return testParam;    \n}    \n//现在anyFunc返回的是deferred对象了，即可运用链式操作\n$.when(anyFunc(testParam))\n.done(function(){alert(&quot;messi is best!&quot;);})\n.fail(function(){alert(&quot;messi is no better than!&quot;);})\n</code></pre>","excerpt":"<blockquote>\n<p>关于deferred对象</p>\n</blockquote>\n<p>　　简单来说，deferred对象就是jQuery的回调函数解决方案。本意是”延迟“，即程序延迟到某个点再向下执行。</p>\n<blockquote>\n<p>主要</p>\n</blockquote>\n<ul>\n<li>类比于传统ajax操作，运用deferred对象后的链式写法使得代码的可读性更强。</li>\n</ul>\n<pre><code>$.ajax(\n    url: &quot;fukua.html&quot;,\n    success: function(){\n        alert(&quot;messi is best!&quot;);\n    },\n    error: function(){\n        alert(&quot;messi is no better than!&quot;);\n    }\n)\n</code></pre><ul>\n<li>如上，$.ajax()接受一个对象参数，成功、失败分别对应success、error方法。若用deferred延迟对象则可用done、fail方法解决。</li>\n</ul>\n<pre><code>$.ajax(&quot;fukua.html&quot;)\n.done(function(){alert(&quot;messi is best!&quot;);})\n.fail(function(){alert(&quot;messi is no better than!&quot;);})\n</code></pre>","more":"<ul>\n<li>deferred对象的优点更在于她可以给多个事件绑定多个回调函数。</li>\n</ul>\n<pre><code>$.ajax(&quot;fukua.html&quot;)\n.done(function(){alert(&quot;messi is best!&quot;);})\n.fail(function(){alert(&quot;messi is no better than!&quot;);})\n.done(function(){alert(&quot;messi is very good!&quot;);})\n</code></pre><ul>\n<li>如上，要为多个事件绑定回调需要用到$.when()。</li>\n</ul>\n<pre><code>$.when($.ajax(&quot;fukua.html&quot;),$.ajax(&quot;messi.html&quot;))\n.done(function(){alert(&quot;messi is best!&quot;);})\n.fail(function(){alert(&quot;messi is no better than!&quot;);})    \n</code></pre><hr>\n<ul>\n<li>deferred对象的最大优点在于，她把整个一套回调函数接口从ajax操作扩展到了所有操作，即不仅是ajax还是本地操作，不管异步还是同步，都可以使用deferred对象的方法。</li>\n</ul>\n<pre><code>$.when(anyFunc())\n.done(function(){alert(&quot;messi is best!&quot;);})\n.fail(function(){alert(&quot;messi is no better than!&quot;);})    \n</code></pre><ul>\n<li>如上，当参数是普通函数时done()方法会立即执行，原因在于$.when()的参数只能是deferred对象。</li>\n</ul>\n<pre><code>var testParam = $.Deferred();    //新建一个deferred对象\nvar anyFunc = function(testParam){\n    var testFunc = function(){\n        alert(&quot;It is OK!&quot;);\n        testParam.resolve();    //改变deferred对象的执行状态\n    }    \n    return testParam;    \n}    \n//现在anyFunc返回的是deferred对象了，即可运用链式操作\n$.when(anyFunc(testParam))\n.done(function(){alert(&quot;messi is best!&quot;);})\n.fail(function(){alert(&quot;messi is no better than!&quot;);})\n</code></pre>"},{"title":"About　Canvas","date":"2016-08-08T16:00:00.000Z","_content":"\n>关于canvas\n\n　canvas是H5出现的新标签，自带某些属性、方法、事件，也可以通过运用js来进行绘图。\n\n>基础\n\n+   运用canvas绘图的主要流程\n\t1. 在js文件中找到canvas标签\n\t2. 用一个变量获取context对象，这个对象封装了很多绘图功能（因为某些原因目前不提供3d服务。。。）\n\t3. 运用属性和方法进行实际绘图\n\n\n\tvar canvas = document.getElementById('canvas');\n\tvar context = canvas.getContext('2d');\n\n<!---more--->\t\n\n+\t基本知识\n\t1. canvas有两种方法\n\t\t1. context.fill()  \t\t填充\n\t\t2. context.stroke()  \t绘制边框\n\t2. 绘制图形的样式可以通过两种方式来进行设置\n\t\t1. context.fillStyle  \t填充的样式\n\t\t2. context.strokeStyle  边框的样式\n\t3. canvas中坐标原点为浏览器坐上角，x、y坐标分别随着向右、向下而增大，颜色样式可以使用'#xxx'、'red'、'rgb()'、'rgba()'，默认颜色均为黑色。\n\n\n>主要\n\t\n+\t绘制线条\n\t* moveTo(x,y) 定义线条的开始坐标\n\t* lineTo(x,y) 定义线条的结束坐标\n\n\n\tcontext.moveTo(0,0);\n\tcontext.lineTo(200,100);\n\tcontext.stroke();\n*****\n+\t绘制矩形\n\t* rect(x,y,width,height) 定义矩形的x、y坐标和宽度、高度\n\t* 如果同时绘制多个图形，要在绘制之前调用beginPath()方法\n\n\n\tcontext.rect(20,20,150,100);\n\tcontext.stroke();\n*****\n+\t绘制圆形\n\t* arc(x,y,r,start,stop,flage) 定义圆形的原点坐标x、y，半径r，起始角度start，终点角度stop，flage值true、false分别表示角度顺时针旋转和逆时针旋转，默认值为false\n\n\n\tcontext.beginPath();\n\tcontext.arc(100,75,50,0,2*Math.PI);\n\tcontext.stroke();\n*****\n+\t有关文本\n\t* font 定义字体\n\t* fillText(text,x,y) 绘制实心文本\n\t* strokeText(text,x,y) 绘制空心文本\n\n\n\tcontext.font=\"30px Arial\";\n\tcontext.strokeText(\"Hello World\",10,50);\n*****\n+\t有关渐变\n\t* 线条渐变\n\t\t1. context.createLinearGradient(x0,y0,x1,y1) 渐变开始的坐标x0、y0；渐变结束的坐标x1、y1\n\t\t2. addColorStop(0,'color')、addColorStop(1,'color') 渐变起点、终点的颜色\n\t* 径向渐变\n\t\t1. context.createRadialGradient(x0,y0,r0,x1,y1,r1); 渐变开始圆的坐标x0、y0，半径r0；渐变结束圆的坐标x1、y1，半径r1\n\t\t2. addColorStop(0,'color')、addColorStop(1,'color') 渐变起点、终点的颜色\n\n\n\tvar change=context.createLinearGradient(0,0,200,0);\n\tchange.addColorStop(0,\"red\");\n\tchange.addColorStop(1,\"white\");\n\n\tvar change=context.createRadialGradient(75,50,5,90,60,100);\n\tchange.addColorStop(0,\"red\");\n\tchange.addColorStop(1,\"white\");\n*****\t\n+\t有关图像\n\t* 将图像放置到画布上 drawImage()\n\t\t* 必选属性img、x、y————img规定用的图像，图像放置位置的坐标x、y\n\t\t* 可选属性sx/sy————开始剪切的坐标x、y\n\t\t* 可选属性swidth/wheight————被剪切图像的宽度、高度\n\t\t* 可选属性width/height————要使用的图像的宽度、高度\n\t\t* 属性位置默认方式按上述顺序排列\n\n\t\n\tcontext.drawImage(img,90,130,50,60,10,10,50,60);\n\t\n\n\n\n\n\t","source":"_posts/About Canvas.md","raw":"---\ntitle: About　Canvas\ncategories: 甫夸之谈———canvas\ndate: 2016-08-09\ntags: Canvas\n---\n\n>关于canvas\n\n　canvas是H5出现的新标签，自带某些属性、方法、事件，也可以通过运用js来进行绘图。\n\n>基础\n\n+   运用canvas绘图的主要流程\n\t1. 在js文件中找到canvas标签\n\t2. 用一个变量获取context对象，这个对象封装了很多绘图功能（因为某些原因目前不提供3d服务。。。）\n\t3. 运用属性和方法进行实际绘图\n\n\n\tvar canvas = document.getElementById('canvas');\n\tvar context = canvas.getContext('2d');\n\n<!---more--->\t\n\n+\t基本知识\n\t1. canvas有两种方法\n\t\t1. context.fill()  \t\t填充\n\t\t2. context.stroke()  \t绘制边框\n\t2. 绘制图形的样式可以通过两种方式来进行设置\n\t\t1. context.fillStyle  \t填充的样式\n\t\t2. context.strokeStyle  边框的样式\n\t3. canvas中坐标原点为浏览器坐上角，x、y坐标分别随着向右、向下而增大，颜色样式可以使用'#xxx'、'red'、'rgb()'、'rgba()'，默认颜色均为黑色。\n\n\n>主要\n\t\n+\t绘制线条\n\t* moveTo(x,y) 定义线条的开始坐标\n\t* lineTo(x,y) 定义线条的结束坐标\n\n\n\tcontext.moveTo(0,0);\n\tcontext.lineTo(200,100);\n\tcontext.stroke();\n*****\n+\t绘制矩形\n\t* rect(x,y,width,height) 定义矩形的x、y坐标和宽度、高度\n\t* 如果同时绘制多个图形，要在绘制之前调用beginPath()方法\n\n\n\tcontext.rect(20,20,150,100);\n\tcontext.stroke();\n*****\n+\t绘制圆形\n\t* arc(x,y,r,start,stop,flage) 定义圆形的原点坐标x、y，半径r，起始角度start，终点角度stop，flage值true、false分别表示角度顺时针旋转和逆时针旋转，默认值为false\n\n\n\tcontext.beginPath();\n\tcontext.arc(100,75,50,0,2*Math.PI);\n\tcontext.stroke();\n*****\n+\t有关文本\n\t* font 定义字体\n\t* fillText(text,x,y) 绘制实心文本\n\t* strokeText(text,x,y) 绘制空心文本\n\n\n\tcontext.font=\"30px Arial\";\n\tcontext.strokeText(\"Hello World\",10,50);\n*****\n+\t有关渐变\n\t* 线条渐变\n\t\t1. context.createLinearGradient(x0,y0,x1,y1) 渐变开始的坐标x0、y0；渐变结束的坐标x1、y1\n\t\t2. addColorStop(0,'color')、addColorStop(1,'color') 渐变起点、终点的颜色\n\t* 径向渐变\n\t\t1. context.createRadialGradient(x0,y0,r0,x1,y1,r1); 渐变开始圆的坐标x0、y0，半径r0；渐变结束圆的坐标x1、y1，半径r1\n\t\t2. addColorStop(0,'color')、addColorStop(1,'color') 渐变起点、终点的颜色\n\n\n\tvar change=context.createLinearGradient(0,0,200,0);\n\tchange.addColorStop(0,\"red\");\n\tchange.addColorStop(1,\"white\");\n\n\tvar change=context.createRadialGradient(75,50,5,90,60,100);\n\tchange.addColorStop(0,\"red\");\n\tchange.addColorStop(1,\"white\");\n*****\t\n+\t有关图像\n\t* 将图像放置到画布上 drawImage()\n\t\t* 必选属性img、x、y————img规定用的图像，图像放置位置的坐标x、y\n\t\t* 可选属性sx/sy————开始剪切的坐标x、y\n\t\t* 可选属性swidth/wheight————被剪切图像的宽度、高度\n\t\t* 可选属性width/height————要使用的图像的宽度、高度\n\t\t* 属性位置默认方式按上述顺序排列\n\n\t\n\tcontext.drawImage(img,90,130,50,60,10,10,50,60);\n\t\n\n\n\n\n\t","slug":"About Canvas","published":1,"updated":"2017-05-21T02:51:58.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p4k0003a8vuki4hh2ao","content":"<blockquote>\n<p>关于canvas</p>\n</blockquote>\n<p>　canvas是H5出现的新标签，自带某些属性、方法、事件，也可以通过运用js来进行绘图。</p>\n<blockquote>\n<p>基础</p>\n</blockquote>\n<ul>\n<li>运用canvas绘图的主要流程<ol>\n<li>在js文件中找到canvas标签</li>\n<li>用一个变量获取context对象，这个对象封装了很多绘图功能（因为某些原因目前不提供3d服务。。。）</li>\n<li>运用属性和方法进行实际绘图</li>\n</ol>\n</li>\n</ul>\n<pre><code>var canvas = document.getElementById(&apos;canvas&apos;);\nvar context = canvas.getContext(&apos;2d&apos;);\n</code></pre><a id=\"more\"></a>    \n<ul>\n<li>基本知识<ol>\n<li>canvas有两种方法<ol>\n<li>context.fill()          填充</li>\n<li>context.stroke()      绘制边框</li>\n</ol>\n</li>\n<li>绘制图形的样式可以通过两种方式来进行设置<ol>\n<li>context.fillStyle      填充的样式</li>\n<li>context.strokeStyle  边框的样式</li>\n</ol>\n</li>\n<li>canvas中坐标原点为浏览器坐上角，x、y坐标分别随着向右、向下而增大，颜色样式可以使用’#xxx’、’red’、’rgb()’、’rgba()’，默认颜色均为黑色。</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>主要</p>\n</blockquote>\n<ul>\n<li>绘制线条<ul>\n<li>moveTo(x,y) 定义线条的开始坐标</li>\n<li>lineTo(x,y) 定义线条的结束坐标</li>\n</ul>\n</li>\n</ul>\n<pre><code>context.moveTo(0,0);\ncontext.lineTo(200,100);\ncontext.stroke();\n</code></pre><hr>\n<ul>\n<li>绘制矩形<ul>\n<li>rect(x,y,width,height) 定义矩形的x、y坐标和宽度、高度</li>\n<li>如果同时绘制多个图形，要在绘制之前调用beginPath()方法</li>\n</ul>\n</li>\n</ul>\n<pre><code>context.rect(20,20,150,100);\ncontext.stroke();\n</code></pre><hr>\n<ul>\n<li>绘制圆形<ul>\n<li>arc(x,y,r,start,stop,flage) 定义圆形的原点坐标x、y，半径r，起始角度start，终点角度stop，flage值true、false分别表示角度顺时针旋转和逆时针旋转，默认值为false</li>\n</ul>\n</li>\n</ul>\n<pre><code>context.beginPath();\ncontext.arc(100,75,50,0,2*Math.PI);\ncontext.stroke();\n</code></pre><hr>\n<ul>\n<li>有关文本<ul>\n<li>font 定义字体</li>\n<li>fillText(text,x,y) 绘制实心文本</li>\n<li>strokeText(text,x,y) 绘制空心文本</li>\n</ul>\n</li>\n</ul>\n<pre><code>context.font=&quot;30px Arial&quot;;\ncontext.strokeText(&quot;Hello World&quot;,10,50);\n</code></pre><hr>\n<ul>\n<li>有关渐变<ul>\n<li>线条渐变<ol>\n<li>context.createLinearGradient(x0,y0,x1,y1) 渐变开始的坐标x0、y0；渐变结束的坐标x1、y1</li>\n<li>addColorStop(0,’color’)、addColorStop(1,’color’) 渐变起点、终点的颜色</li>\n</ol>\n</li>\n<li>径向渐变<ol>\n<li>context.createRadialGradient(x0,y0,r0,x1,y1,r1); 渐变开始圆的坐标x0、y0，半径r0；渐变结束圆的坐标x1、y1，半径r1</li>\n<li>addColorStop(0,’color’)、addColorStop(1,’color’) 渐变起点、终点的颜色</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>var change=context.createLinearGradient(0,0,200,0);\nchange.addColorStop(0,&quot;red&quot;);\nchange.addColorStop(1,&quot;white&quot;);\n\nvar change=context.createRadialGradient(75,50,5,90,60,100);\nchange.addColorStop(0,&quot;red&quot;);\nchange.addColorStop(1,&quot;white&quot;);\n</code></pre><hr>\n<ul>\n<li>有关图像<ul>\n<li>将图像放置到画布上 drawImage()<ul>\n<li>必选属性img、x、y————img规定用的图像，图像放置位置的坐标x、y</li>\n<li>可选属性sx/sy————开始剪切的坐标x、y</li>\n<li>可选属性swidth/wheight————被剪切图像的宽度、高度</li>\n<li>可选属性width/height————要使用的图像的宽度、高度</li>\n<li>属性位置默认方式按上述顺序排列</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>context.drawImage(img,90,130,50,60,10,10,50,60);\n</code></pre>","excerpt":"<blockquote>\n<p>关于canvas</p>\n</blockquote>\n<p>　canvas是H5出现的新标签，自带某些属性、方法、事件，也可以通过运用js来进行绘图。</p>\n<blockquote>\n<p>基础</p>\n</blockquote>\n<ul>\n<li>运用canvas绘图的主要流程<ol>\n<li>在js文件中找到canvas标签</li>\n<li>用一个变量获取context对象，这个对象封装了很多绘图功能（因为某些原因目前不提供3d服务。。。）</li>\n<li>运用属性和方法进行实际绘图</li>\n</ol>\n</li>\n</ul>\n<pre><code>var canvas = document.getElementById(&apos;canvas&apos;);\nvar context = canvas.getContext(&apos;2d&apos;);\n</code></pre>","more":"<ul>\n<li>基本知识<ol>\n<li>canvas有两种方法<ol>\n<li>context.fill()          填充</li>\n<li>context.stroke()      绘制边框</li>\n</ol>\n</li>\n<li>绘制图形的样式可以通过两种方式来进行设置<ol>\n<li>context.fillStyle      填充的样式</li>\n<li>context.strokeStyle  边框的样式</li>\n</ol>\n</li>\n<li>canvas中坐标原点为浏览器坐上角，x、y坐标分别随着向右、向下而增大，颜色样式可以使用’#xxx’、’red’、’rgb()’、’rgba()’，默认颜色均为黑色。</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>主要</p>\n</blockquote>\n<ul>\n<li>绘制线条<ul>\n<li>moveTo(x,y) 定义线条的开始坐标</li>\n<li>lineTo(x,y) 定义线条的结束坐标</li>\n</ul>\n</li>\n</ul>\n<pre><code>context.moveTo(0,0);\ncontext.lineTo(200,100);\ncontext.stroke();\n</code></pre><hr>\n<ul>\n<li>绘制矩形<ul>\n<li>rect(x,y,width,height) 定义矩形的x、y坐标和宽度、高度</li>\n<li>如果同时绘制多个图形，要在绘制之前调用beginPath()方法</li>\n</ul>\n</li>\n</ul>\n<pre><code>context.rect(20,20,150,100);\ncontext.stroke();\n</code></pre><hr>\n<ul>\n<li>绘制圆形<ul>\n<li>arc(x,y,r,start,stop,flage) 定义圆形的原点坐标x、y，半径r，起始角度start，终点角度stop，flage值true、false分别表示角度顺时针旋转和逆时针旋转，默认值为false</li>\n</ul>\n</li>\n</ul>\n<pre><code>context.beginPath();\ncontext.arc(100,75,50,0,2*Math.PI);\ncontext.stroke();\n</code></pre><hr>\n<ul>\n<li>有关文本<ul>\n<li>font 定义字体</li>\n<li>fillText(text,x,y) 绘制实心文本</li>\n<li>strokeText(text,x,y) 绘制空心文本</li>\n</ul>\n</li>\n</ul>\n<pre><code>context.font=&quot;30px Arial&quot;;\ncontext.strokeText(&quot;Hello World&quot;,10,50);\n</code></pre><hr>\n<ul>\n<li>有关渐变<ul>\n<li>线条渐变<ol>\n<li>context.createLinearGradient(x0,y0,x1,y1) 渐变开始的坐标x0、y0；渐变结束的坐标x1、y1</li>\n<li>addColorStop(0,’color’)、addColorStop(1,’color’) 渐变起点、终点的颜色</li>\n</ol>\n</li>\n<li>径向渐变<ol>\n<li>context.createRadialGradient(x0,y0,r0,x1,y1,r1); 渐变开始圆的坐标x0、y0，半径r0；渐变结束圆的坐标x1、y1，半径r1</li>\n<li>addColorStop(0,’color’)、addColorStop(1,’color’) 渐变起点、终点的颜色</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>var change=context.createLinearGradient(0,0,200,0);\nchange.addColorStop(0,&quot;red&quot;);\nchange.addColorStop(1,&quot;white&quot;);\n\nvar change=context.createRadialGradient(75,50,5,90,60,100);\nchange.addColorStop(0,&quot;red&quot;);\nchange.addColorStop(1,&quot;white&quot;);\n</code></pre><hr>\n<ul>\n<li>有关图像<ul>\n<li>将图像放置到画布上 drawImage()<ul>\n<li>必选属性img、x、y————img规定用的图像，图像放置位置的坐标x、y</li>\n<li>可选属性sx/sy————开始剪切的坐标x、y</li>\n<li>可选属性swidth/wheight————被剪切图像的宽度、高度</li>\n<li>可选属性width/height————要使用的图像的宽度、高度</li>\n<li>属性位置默认方式按上述顺序排列</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>context.drawImage(img,90,130,50,60,10,10,50,60);\n</code></pre>"},{"title":"About　$.Deferred()","date":"2016-10-31T16:00:00.000Z","_content":"\n>关于deferred对象\n\n　　deferred对象有三种执行状态---未完成，已完成和已失败。如果执行状态是“已完成”，deferred对象会立刻调用done()方法指定的回调函数；如果执行状态是“已失败”，调用fail方法指定的回调函数；如果执行状态是“未完成”，则继续等待，或者调用progress()方法指定的回调函数。\n　　对于ajax操作，deferred对象会根据返回结果自动改变执行状态，但在普通方法中必须手动指定。在前面关于$.when()的文章中，deferred对象.resolve()即将该对象的执行状态从“未完成”改为“已完成”，从而触发done()方法。类似，还有deferred.reject()方法，作用是将deferred对象的执行状态从“未完成”改为“已失败”，从而触发fail()方法。\n\n>关于deferred.promise方法\n\n　　在前面$.when()文章中对普通方法运用deferred对象的例子中，由于deferred对象是全局对象，所以在执行的方法外部也能改变执行状态。为了避免这种情况的发生，产生了deferred.promise()方法。它的作用是在原来deferred对象上返回另一个deferred对象，后者只开放与改变执行状态无关的方法，即done()和fail()，屏蔽了改变执行状态的方法，即resolve()和reject()。\n","source":"_posts/About Deferred.md","raw":"---\ntitle: About　$.Deferred()\ncategories: 甫夸之谈———JS\ndate: 2016-11-01\ntags: \"$.Deferred()\"\n---\n\n>关于deferred对象\n\n　　deferred对象有三种执行状态---未完成，已完成和已失败。如果执行状态是“已完成”，deferred对象会立刻调用done()方法指定的回调函数；如果执行状态是“已失败”，调用fail方法指定的回调函数；如果执行状态是“未完成”，则继续等待，或者调用progress()方法指定的回调函数。\n　　对于ajax操作，deferred对象会根据返回结果自动改变执行状态，但在普通方法中必须手动指定。在前面关于$.when()的文章中，deferred对象.resolve()即将该对象的执行状态从“未完成”改为“已完成”，从而触发done()方法。类似，还有deferred.reject()方法，作用是将deferred对象的执行状态从“未完成”改为“已失败”，从而触发fail()方法。\n\n>关于deferred.promise方法\n\n　　在前面$.when()文章中对普通方法运用deferred对象的例子中，由于deferred对象是全局对象，所以在执行的方法外部也能改变执行状态。为了避免这种情况的发生，产生了deferred.promise()方法。它的作用是在原来deferred对象上返回另一个deferred对象，后者只开放与改变执行状态无关的方法，即done()和fail()，屏蔽了改变执行状态的方法，即resolve()和reject()。\n","slug":"About Deferred","published":1,"updated":"2017-05-21T02:47:38.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p4v0007a8vues6r33vr","content":"<blockquote>\n<p>关于deferred对象</p>\n</blockquote>\n<p>　　deferred对象有三种执行状态—未完成，已完成和已失败。如果执行状态是“已完成”，deferred对象会立刻调用done()方法指定的回调函数；如果执行状态是“已失败”，调用fail方法指定的回调函数；如果执行状态是“未完成”，则继续等待，或者调用progress()方法指定的回调函数。<br>　　对于ajax操作，deferred对象会根据返回结果自动改变执行状态，但在普通方法中必须手动指定。在前面关于$.when()的文章中，deferred对象.resolve()即将该对象的执行状态从“未完成”改为“已完成”，从而触发done()方法。类似，还有deferred.reject()方法，作用是将deferred对象的执行状态从“未完成”改为“已失败”，从而触发fail()方法。</p>\n<blockquote>\n<p>关于deferred.promise方法</p>\n</blockquote>\n<p>　　在前面$.when()文章中对普通方法运用deferred对象的例子中，由于deferred对象是全局对象，所以在执行的方法外部也能改变执行状态。为了避免这种情况的发生，产生了deferred.promise()方法。它的作用是在原来deferred对象上返回另一个deferred对象，后者只开放与改变执行状态无关的方法，即done()和fail()，屏蔽了改变执行状态的方法，即resolve()和reject()。</p>\n","excerpt":"","more":"<blockquote>\n<p>关于deferred对象</p>\n</blockquote>\n<p>　　deferred对象有三种执行状态—未完成，已完成和已失败。如果执行状态是“已完成”，deferred对象会立刻调用done()方法指定的回调函数；如果执行状态是“已失败”，调用fail方法指定的回调函数；如果执行状态是“未完成”，则继续等待，或者调用progress()方法指定的回调函数。<br>　　对于ajax操作，deferred对象会根据返回结果自动改变执行状态，但在普通方法中必须手动指定。在前面关于$.when()的文章中，deferred对象.resolve()即将该对象的执行状态从“未完成”改为“已完成”，从而触发done()方法。类似，还有deferred.reject()方法，作用是将deferred对象的执行状态从“未完成”改为“已失败”，从而触发fail()方法。</p>\n<blockquote>\n<p>关于deferred.promise方法</p>\n</blockquote>\n<p>　　在前面$.when()文章中对普通方法运用deferred对象的例子中，由于deferred对象是全局对象，所以在执行的方法外部也能改变执行状态。为了避免这种情况的发生，产生了deferred.promise()方法。它的作用是在原来deferred对象上返回另一个deferred对象，后者只开放与改变执行状态无关的方法，即done()和fail()，屏蔽了改变执行状态的方法，即resolve()和reject()。</p>\n"},{"title":"About　Messi","date":"2016-07-11T16:00:00.000Z","_content":">几经查阅、修改，有关博客方面终于敲定，暂时就长这样。由衷感谢[hexo](hexo.io)博客平台、[Next](http://theme-next.iissnan.com/)主题等营养品，使得我这个小白完美入坑。\n\n\n>第一篇博文，着实想提一下梅西，一个纯粹的足球运动员。对于足球，我初中、高中都有在踢，上了大学除了体育课上有接触，剩下的就是坐在电脑前面观战了。关于梅西，网上自有繁多的介绍与评论，这里不再赘述，只说一下我眼中的梅西。梅西性格腼腆，但内存坚毅，懂得感恩。想说太多，无从下嘴，等有机会再详细描述。借用曾经看过的一段话。\n\n　　　莱奥，转眼之间你已经二十八岁，当你横空出世，我还只是个懵懂的小伙。岁月梭梭无情过，如今再看，你已是两岁小孩的父亲。既然有缘见证了你一路走来的传奇脚步，就让我，让喜欢足球的人们继续陪伴你走下去。\n\t　\n\n　　　赢的了这么多，我知道你还憧憬着什么。有缘相见。\n\n>前几天出了梅西退出国家队，今天又出了被判21个月，无妨。","source":"_posts/About Messi.md","raw":"---\ntitle: About　Messi\ncategories: Red&Blue\ndate: 2016-07-12\ntags: \n   - Messi\n---\n>几经查阅、修改，有关博客方面终于敲定，暂时就长这样。由衷感谢[hexo](hexo.io)博客平台、[Next](http://theme-next.iissnan.com/)主题等营养品，使得我这个小白完美入坑。\n\n\n>第一篇博文，着实想提一下梅西，一个纯粹的足球运动员。对于足球，我初中、高中都有在踢，上了大学除了体育课上有接触，剩下的就是坐在电脑前面观战了。关于梅西，网上自有繁多的介绍与评论，这里不再赘述，只说一下我眼中的梅西。梅西性格腼腆，但内存坚毅，懂得感恩。想说太多，无从下嘴，等有机会再详细描述。借用曾经看过的一段话。\n\n　　　莱奥，转眼之间你已经二十八岁，当你横空出世，我还只是个懵懂的小伙。岁月梭梭无情过，如今再看，你已是两岁小孩的父亲。既然有缘见证了你一路走来的传奇脚步，就让我，让喜欢足球的人们继续陪伴你走下去。\n\t　\n\n　　　赢的了这么多，我知道你还憧憬着什么。有缘相见。\n\n>前几天出了梅西退出国家队，今天又出了被判21个月，无妨。","slug":"About Messi","published":1,"updated":"2017-05-21T02:53:21.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p4x0008a8vu9rddi024","content":"<blockquote>\n<p>几经查阅、修改，有关博客方面终于敲定，暂时就长这样。由衷感谢<a href=\"hexo.io\">hexo</a>博客平台、<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">Next</a>主题等营养品，使得我这个小白完美入坑。</p>\n<p>第一篇博文，着实想提一下梅西，一个纯粹的足球运动员。对于足球，我初中、高中都有在踢，上了大学除了体育课上有接触，剩下的就是坐在电脑前面观战了。关于梅西，网上自有繁多的介绍与评论，这里不再赘述，只说一下我眼中的梅西。梅西性格腼腆，但内存坚毅，懂得感恩。想说太多，无从下嘴，等有机会再详细描述。借用曾经看过的一段话。</p>\n</blockquote>\n<p>　　　莱奥，转眼之间你已经二十八岁，当你横空出世，我还只是个懵懂的小伙。岁月梭梭无情过，如今再看，你已是两岁小孩的父亲。既然有缘见证了你一路走来的传奇脚步，就让我，让喜欢足球的人们继续陪伴你走下去。\n    　</p>\n<p>　　　赢的了这么多，我知道你还憧憬着什么。有缘相见。</p>\n<blockquote>\n<p>前几天出了梅西退出国家队，今天又出了被判21个月，无妨。</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>几经查阅、修改，有关博客方面终于敲定，暂时就长这样。由衷感谢<a href=\"hexo.io\">hexo</a>博客平台、<a href=\"http://theme-next.iissnan.com/\">Next</a>主题等营养品，使得我这个小白完美入坑。</p>\n<p>第一篇博文，着实想提一下梅西，一个纯粹的足球运动员。对于足球，我初中、高中都有在踢，上了大学除了体育课上有接触，剩下的就是坐在电脑前面观战了。关于梅西，网上自有繁多的介绍与评论，这里不再赘述，只说一下我眼中的梅西。梅西性格腼腆，但内存坚毅，懂得感恩。想说太多，无从下嘴，等有机会再详细描述。借用曾经看过的一段话。</p>\n</blockquote>\n<p>　　　莱奥，转眼之间你已经二十八岁，当你横空出世，我还只是个懵懂的小伙。岁月梭梭无情过，如今再看，你已是两岁小孩的父亲。既然有缘见证了你一路走来的传奇脚步，就让我，让喜欢足球的人们继续陪伴你走下去。\n    　</p>\n<p>　　　赢的了这么多，我知道你还憧憬着什么。有缘相见。</p>\n<blockquote>\n<p>前几天出了梅西退出国家队，今天又出了被判21个月，无妨。</p>\n</blockquote>\n"},{"title":"About　Meta","date":"2016-09-25T16:00:00.000Z","_content":"\n>关于meta标签\n\n  　　meta标签是HTML语言head区的一个辅助标签，它位于HTML文档头部的标记和标题之间，提供用户不可见的信息。Meta标签通常用来为搜索引擎定义页面主题，或者是定义用户浏览器上的cookie；也可以用于鉴别作者，设定页面格式，标注内容提要和关键字；还可以设置页面使其可以根据你定义的时间间隔刷新自己，以及设置RASC内容等级等等。\n>简要\n\n  　　meta标签分为两大部分：HTTP标题信息（HTTP-EQUIV）和页面描述信息（NAME）。 http-equiv类似于HTTP的头部协议，回应给浏览器一些有用的信息，更精确的显示网页内容。name的content指定实际内容，如：如果指定level为value，则Content可能是beginner、intermediate、advanced。\n   \n<!---more---> \n\n>主要\n\n+\tContent-Type和Content-Language 对字符集进行设定\n\t\n\t\n\t<meta http-equiv=\"Content-Type\" Content=\"text/html;Charset=utf-8\">\n\t<meta http-equiv=\"Content-Language\" Content=\"zh-CN\">\t\n*****\n+\tRefresh 一定时间后刷新自己或者自动链接到其它网页\n\n\n\t<meta http-equiv=\"Refresh\" Content=\"30\">\n\t<meta http-equiv=\"Refresh\" Content=\"5;Url=http://www.fukuamess.cn\">\t\n*****\n+\tExpires 指定网页在缓存中的过期时间，一旦网页过期，必须到服务器上重新调阅，时间必须为GMT格式\n\n\n\t<meta http-equiv=\"Expires\" Content=\"0\">\n\t<meta http-equiv=\"Expires\"\tContent=\"fri,20,May 1314 00:00:01 GMT\">\n*****\n+ Pragma即cache模式，禁止浏览器从本地机的缓存中调阅页面，这样设定，访问者将无法脱机浏览\n\n\n\t<meta http-equiv=\"pragma\" content=\"no-cache\">\n*****\n+\tSet-Cookie浏览器访问某个页面时会将它存在缓存中，下次访问时可以从缓存中读取，以提高速度。\n\n\n\t<meta http-equiv=\"Set-Cookie\" Content=\"cookievalue=fukua;expires=fri,20,May 1314 00:00:01 GMT\">\t\n*****\n+\tWindow-target强制页面在当前窗口以独立页面显示，用来防止别人在框架里调用你的页面，Content值可以是：_blank、_top、_self、_parent\n\n\n\t<meta http-equiv=\"Window-target\" Content=\"_top\">\n*****\n+\tPage-Entet、Page-Exit页面被载入和调出时的一些特效\n\n\n\t<meta http-equiv=\"Page-Enter\" Content=\"blendTrans(Duration=0.5)\">\n\t<meta http-equiv=\"Page-Exit\" Content=\"blendTrans(Duration=0.5)\">\n*****\n+\tX-UA-Compatible以IE的哪个版本去渲染页面，IE=Edge：以所在系统最新版本IE渲染\n\n\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">\t\n<hr style=\"border:none;border-top:solid 2px red;\">\t\n+\tKeywords为搜索引擎提供关键字列表，各关键词以英文逗号隔开。当有多个meta元素提供文档语言从属信息时，搜索引擎会使用lang特性来过滤并通过用户的语言优先参照来显示搜索结果\n\n\n\t<meta name=\"Keywords\" Lang=\"EN\" Content=\"甫夸,messi\">\n\t<meta name=\"Keywords\" Lang=\"FR\" Content=\"甫夸,messi\">\t\n*****\n+\tDescription简介网站的主要内容\n\n\n\t<meta name=\"Description\" Content=\"messi超帅\">\n*****\n+\tRobots告诉搜索机器人哪些页面需要索引，哪些不需要。Content值可选：all文件被检索，页面上的链接可以被查询、none文件不被检索，页面上的链接不能被查询、index页面被检索、noindex页面不被检索，但页面上的链接可被查询、follow页面上的链接可被查询、nofollow文件不被检索，但页面上的链接可以被查询，默认是all\n\t\n\t\n\t\n\t<meta name=\"Robots\" Content=\"All\">\n*****\n+\tAuthor标注网页的作者或制作组，可以是名字或Email\n\n\n\t<meta name=\"Author\" Content=\"fukua\">\t\n*****\n+\tCopyright版权\n\n\n\t<meta name=\"Copyright\" Content=\"版权所有，翻版可不究\">\n*****\n+\tGenerator编辑器说明\n\n\n\t<meta name=\"Generator\" Content=\"VSCode\">\n<hr style=\"border:none;border-top:solid 2px red;\">\t\n+\tfull-screen全屏显示网页，偏向于移动端适用\n\n\n\t<meta name=\"full-screen\" content=\"yes\">\n*****\n+\tbrowsermode浏览器模式，可以强制竖屏显示\n\n\n\t<meta name=\"browsermode\" content=\"application\">\n*****\n+\tformat-detection对于telephone，iphone会自动给文字添加链接样式，点击还可以自动拨号，默认开启；对于email，浏览器会识别邮箱并添加样式，点击可以调用系统默认邮件应用给该地址发邮件，默认开启；对于address，开启点击地址直接跳转至地图，默认开启\n\n\n\n\t<meta name=\"format-detection\" content=\"telephone=no\">\n\t<meta name=\"format-detection\" content=\"telephone=no,email=no,address=no\">\n*****\n+\tx5-orientation对于QQ浏览器可强制竖屏，类比可知x5-fullscreen为QQ浏览器强制全屏，x5-page-mode为QQ浏览器应用模式\n\n\n\t<meta name=\"x5-orientation\" content=\"portrait\">\n\t<meta name=\"x5-page-mode\" content=\"app\">\n*****\n+\trenderer貌似360专用\n\n\n\t<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n\t<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n\t<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n<hr style=\"border:none;border-top:solid 2px red\">\n+\tviewport即可视区域，对桌面浏览器而言，就是除去所有工具栏、状态栏、滚动条等等之后用于看网页的区域。可设置的选项有：width宽度；height高度；intial-scale初始缩放比例；minimum-scale允许用户缩放到的最小比例；maximum-scale允许用户缩放到的最大比例；user-scalable用户是否可以手动缩放。对于这些属性，我们可以设置其中的一个或者多个，并不需要同时设置，iphone会根据设置的属性自动推算其它属性值，而非直接采用默认值\n\n\n\t<meta name=\"viewport\" content=\"width=device-width;initial-scale=1.0;maximum-scale=1.0;user-scalable=0\">\n*****\n+\tapple-touch-fullscreen添加到主屏幕后，全屏显示；apple-mobile-web-app-capable删除默认的苹果工具栏和菜单栏，默认显示；app-mobile-web-app-status-bar-style苹果手机状态栏\n\n\n\t<meta name=\"apple-touch-fullscreen\" content=\"yes\">\n\t<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n\t<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\t\n\t\n\n\t\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t","source":"_posts/About Meta.md","raw":"---\ntitle: About　Meta\ncategories: 甫夸之谈———移动端\ndate: 2016-09-26\ntags: \"<b style='color:red;'>meta</b>\"\n---\n\n>关于meta标签\n\n  　　meta标签是HTML语言head区的一个辅助标签，它位于HTML文档头部的标记和标题之间，提供用户不可见的信息。Meta标签通常用来为搜索引擎定义页面主题，或者是定义用户浏览器上的cookie；也可以用于鉴别作者，设定页面格式，标注内容提要和关键字；还可以设置页面使其可以根据你定义的时间间隔刷新自己，以及设置RASC内容等级等等。\n>简要\n\n  　　meta标签分为两大部分：HTTP标题信息（HTTP-EQUIV）和页面描述信息（NAME）。 http-equiv类似于HTTP的头部协议，回应给浏览器一些有用的信息，更精确的显示网页内容。name的content指定实际内容，如：如果指定level为value，则Content可能是beginner、intermediate、advanced。\n   \n<!---more---> \n\n>主要\n\n+\tContent-Type和Content-Language 对字符集进行设定\n\t\n\t\n\t<meta http-equiv=\"Content-Type\" Content=\"text/html;Charset=utf-8\">\n\t<meta http-equiv=\"Content-Language\" Content=\"zh-CN\">\t\n*****\n+\tRefresh 一定时间后刷新自己或者自动链接到其它网页\n\n\n\t<meta http-equiv=\"Refresh\" Content=\"30\">\n\t<meta http-equiv=\"Refresh\" Content=\"5;Url=http://www.fukuamess.cn\">\t\n*****\n+\tExpires 指定网页在缓存中的过期时间，一旦网页过期，必须到服务器上重新调阅，时间必须为GMT格式\n\n\n\t<meta http-equiv=\"Expires\" Content=\"0\">\n\t<meta http-equiv=\"Expires\"\tContent=\"fri,20,May 1314 00:00:01 GMT\">\n*****\n+ Pragma即cache模式，禁止浏览器从本地机的缓存中调阅页面，这样设定，访问者将无法脱机浏览\n\n\n\t<meta http-equiv=\"pragma\" content=\"no-cache\">\n*****\n+\tSet-Cookie浏览器访问某个页面时会将它存在缓存中，下次访问时可以从缓存中读取，以提高速度。\n\n\n\t<meta http-equiv=\"Set-Cookie\" Content=\"cookievalue=fukua;expires=fri,20,May 1314 00:00:01 GMT\">\t\n*****\n+\tWindow-target强制页面在当前窗口以独立页面显示，用来防止别人在框架里调用你的页面，Content值可以是：_blank、_top、_self、_parent\n\n\n\t<meta http-equiv=\"Window-target\" Content=\"_top\">\n*****\n+\tPage-Entet、Page-Exit页面被载入和调出时的一些特效\n\n\n\t<meta http-equiv=\"Page-Enter\" Content=\"blendTrans(Duration=0.5)\">\n\t<meta http-equiv=\"Page-Exit\" Content=\"blendTrans(Duration=0.5)\">\n*****\n+\tX-UA-Compatible以IE的哪个版本去渲染页面，IE=Edge：以所在系统最新版本IE渲染\n\n\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">\t\n<hr style=\"border:none;border-top:solid 2px red;\">\t\n+\tKeywords为搜索引擎提供关键字列表，各关键词以英文逗号隔开。当有多个meta元素提供文档语言从属信息时，搜索引擎会使用lang特性来过滤并通过用户的语言优先参照来显示搜索结果\n\n\n\t<meta name=\"Keywords\" Lang=\"EN\" Content=\"甫夸,messi\">\n\t<meta name=\"Keywords\" Lang=\"FR\" Content=\"甫夸,messi\">\t\n*****\n+\tDescription简介网站的主要内容\n\n\n\t<meta name=\"Description\" Content=\"messi超帅\">\n*****\n+\tRobots告诉搜索机器人哪些页面需要索引，哪些不需要。Content值可选：all文件被检索，页面上的链接可以被查询、none文件不被检索，页面上的链接不能被查询、index页面被检索、noindex页面不被检索，但页面上的链接可被查询、follow页面上的链接可被查询、nofollow文件不被检索，但页面上的链接可以被查询，默认是all\n\t\n\t\n\t\n\t<meta name=\"Robots\" Content=\"All\">\n*****\n+\tAuthor标注网页的作者或制作组，可以是名字或Email\n\n\n\t<meta name=\"Author\" Content=\"fukua\">\t\n*****\n+\tCopyright版权\n\n\n\t<meta name=\"Copyright\" Content=\"版权所有，翻版可不究\">\n*****\n+\tGenerator编辑器说明\n\n\n\t<meta name=\"Generator\" Content=\"VSCode\">\n<hr style=\"border:none;border-top:solid 2px red;\">\t\n+\tfull-screen全屏显示网页，偏向于移动端适用\n\n\n\t<meta name=\"full-screen\" content=\"yes\">\n*****\n+\tbrowsermode浏览器模式，可以强制竖屏显示\n\n\n\t<meta name=\"browsermode\" content=\"application\">\n*****\n+\tformat-detection对于telephone，iphone会自动给文字添加链接样式，点击还可以自动拨号，默认开启；对于email，浏览器会识别邮箱并添加样式，点击可以调用系统默认邮件应用给该地址发邮件，默认开启；对于address，开启点击地址直接跳转至地图，默认开启\n\n\n\n\t<meta name=\"format-detection\" content=\"telephone=no\">\n\t<meta name=\"format-detection\" content=\"telephone=no,email=no,address=no\">\n*****\n+\tx5-orientation对于QQ浏览器可强制竖屏，类比可知x5-fullscreen为QQ浏览器强制全屏，x5-page-mode为QQ浏览器应用模式\n\n\n\t<meta name=\"x5-orientation\" content=\"portrait\">\n\t<meta name=\"x5-page-mode\" content=\"app\">\n*****\n+\trenderer貌似360专用\n\n\n\t<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n\t<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n\t<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n<hr style=\"border:none;border-top:solid 2px red\">\n+\tviewport即可视区域，对桌面浏览器而言，就是除去所有工具栏、状态栏、滚动条等等之后用于看网页的区域。可设置的选项有：width宽度；height高度；intial-scale初始缩放比例；minimum-scale允许用户缩放到的最小比例；maximum-scale允许用户缩放到的最大比例；user-scalable用户是否可以手动缩放。对于这些属性，我们可以设置其中的一个或者多个，并不需要同时设置，iphone会根据设置的属性自动推算其它属性值，而非直接采用默认值\n\n\n\t<meta name=\"viewport\" content=\"width=device-width;initial-scale=1.0;maximum-scale=1.0;user-scalable=0\">\n*****\n+\tapple-touch-fullscreen添加到主屏幕后，全屏显示；apple-mobile-web-app-capable删除默认的苹果工具栏和菜单栏，默认显示；app-mobile-web-app-status-bar-style苹果手机状态栏\n\n\n\t<meta name=\"apple-touch-fullscreen\" content=\"yes\">\n\t<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n\t<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\t\n\t\n\n\t\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t","slug":"About Meta","published":1,"updated":"2017-05-21T02:49:09.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p54000aa8vu6e2vhn3w","content":"<blockquote>\n<p>关于meta标签</p>\n</blockquote>\n<p>  　　meta标签是HTML语言head区的一个辅助标签，它位于HTML文档头部的标记和标题之间，提供用户不可见的信息。Meta标签通常用来为搜索引擎定义页面主题，或者是定义用户浏览器上的cookie；也可以用于鉴别作者，设定页面格式，标注内容提要和关键字；还可以设置页面使其可以根据你定义的时间间隔刷新自己，以及设置RASC内容等级等等。</p>\n<blockquote>\n<p>简要</p>\n</blockquote>\n<p>  　　meta标签分为两大部分：HTTP标题信息（HTTP-EQUIV）和页面描述信息（NAME）。 http-equiv类似于HTTP的头部协议，回应给浏览器一些有用的信息，更精确的显示网页内容。name的content指定实际内容，如：如果指定level为value，则Content可能是beginner、intermediate、advanced。</p>\n<a id=\"more\"></a> \n<blockquote>\n<p>主要</p>\n</blockquote>\n<ul>\n<li>Content-Type和Content-Language 对字符集进行设定</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;Content-Type&quot; Content=&quot;text/html;Charset=utf-8&quot;&gt;\n&lt;meta http-equiv=&quot;Content-Language&quot; Content=&quot;zh-CN&quot;&gt;    \n</code></pre><hr>\n<ul>\n<li>Refresh 一定时间后刷新自己或者自动链接到其它网页</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;Refresh&quot; Content=&quot;30&quot;&gt;\n&lt;meta http-equiv=&quot;Refresh&quot; Content=&quot;5;Url=http://www.fukuamess.cn&quot;&gt;    \n</code></pre><hr>\n<ul>\n<li>Expires 指定网页在缓存中的过期时间，一旦网页过期，必须到服务器上重新调阅，时间必须为GMT格式</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;Expires&quot; Content=&quot;0&quot;&gt;\n&lt;meta http-equiv=&quot;Expires&quot;    Content=&quot;fri,20,May 1314 00:00:01 GMT&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>Pragma即cache模式，禁止浏览器从本地机的缓存中调阅页面，这样设定，访问者将无法脱机浏览</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>Set-Cookie浏览器访问某个页面时会将它存在缓存中，下次访问时可以从缓存中读取，以提高速度。</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;Set-Cookie&quot; Content=&quot;cookievalue=fukua;expires=fri,20,May 1314 00:00:01 GMT&quot;&gt;    \n</code></pre><hr>\n<ul>\n<li>Window-target强制页面在当前窗口以独立页面显示，用来防止别人在框架里调用你的页面，Content值可以是：_blank、_top、_self、_parent</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;Window-target&quot; Content=&quot;_top&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>Page-Entet、Page-Exit页面被载入和调出时的一些特效</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;Page-Enter&quot; Content=&quot;blendTrans(Duration=0.5)&quot;&gt;\n&lt;meta http-equiv=&quot;Page-Exit&quot; Content=&quot;blendTrans(Duration=0.5)&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>X-UA-Compatible以IE的哪个版本去渲染页面，IE=Edge：以所在系统最新版本IE渲染</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;    \n</code></pre><p><hr style=\"border:none;border-top:solid 2px red;\">    </p>\n<ul>\n<li>Keywords为搜索引擎提供关键字列表，各关键词以英文逗号隔开。当有多个meta元素提供文档语言从属信息时，搜索引擎会使用lang特性来过滤并通过用户的语言优先参照来显示搜索结果</li>\n</ul>\n<pre><code>&lt;meta name=&quot;Keywords&quot; Lang=&quot;EN&quot; Content=&quot;甫夸,messi&quot;&gt;\n&lt;meta name=&quot;Keywords&quot; Lang=&quot;FR&quot; Content=&quot;甫夸,messi&quot;&gt;    \n</code></pre><hr>\n<ul>\n<li>Description简介网站的主要内容</li>\n</ul>\n<pre><code>&lt;meta name=&quot;Description&quot; Content=&quot;messi超帅&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>Robots告诉搜索机器人哪些页面需要索引，哪些不需要。Content值可选：all文件被检索，页面上的链接可以被查询、none文件不被检索，页面上的链接不能被查询、index页面被检索、noindex页面不被检索，但页面上的链接可被查询、follow页面上的链接可被查询、nofollow文件不被检索，但页面上的链接可以被查询，默认是all</li>\n</ul>\n<pre><code>&lt;meta name=&quot;Robots&quot; Content=&quot;All&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>Author标注网页的作者或制作组，可以是名字或Email</li>\n</ul>\n<pre><code>&lt;meta name=&quot;Author&quot; Content=&quot;fukua&quot;&gt;    \n</code></pre><hr>\n<ul>\n<li>Copyright版权</li>\n</ul>\n<pre><code>&lt;meta name=&quot;Copyright&quot; Content=&quot;版权所有，翻版可不究&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>Generator编辑器说明</li>\n</ul>\n<pre><code>&lt;meta name=&quot;Generator&quot; Content=&quot;VSCode&quot;&gt;\n</code></pre><p><hr style=\"border:none;border-top:solid 2px red;\">    </p>\n<ul>\n<li>full-screen全屏显示网页，偏向于移动端适用</li>\n</ul>\n<pre><code>&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>browsermode浏览器模式，可以强制竖屏显示</li>\n</ul>\n<pre><code>&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>format-detection对于telephone，iphone会自动给文字添加链接样式，点击还可以自动拨号，默认开启；对于email，浏览器会识别邮箱并添加样式，点击可以调用系统默认邮件应用给该地址发邮件，默认开启；对于address，开启点击地址直接跳转至地图，默认开启</li>\n</ul>\n<pre><code>&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;\n&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no,email=no,address=no&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>x5-orientation对于QQ浏览器可强制竖屏，类比可知x5-fullscreen为QQ浏览器强制全屏，x5-page-mode为QQ浏览器应用模式</li>\n</ul>\n<pre><code>&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;\n&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>renderer貌似360专用</li>\n</ul>\n<pre><code>&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt; //默认webkit内核\n&lt;meta name=&quot;renderer&quot; content=&quot;ie-comp&quot;&gt; //默认IE兼容模式\n&lt;meta name=&quot;renderer&quot; content=&quot;ie-stand&quot;&gt; //默认IE标准模式\n</code></pre><p><hr style=\"border:none;border-top:solid 2px red\"></p>\n<ul>\n<li>viewport即可视区域，对桌面浏览器而言，就是除去所有工具栏、状态栏、滚动条等等之后用于看网页的区域。可设置的选项有：width宽度；height高度；intial-scale初始缩放比例；minimum-scale允许用户缩放到的最小比例；maximum-scale允许用户缩放到的最大比例；user-scalable用户是否可以手动缩放。对于这些属性，我们可以设置其中的一个或者多个，并不需要同时设置，iphone会根据设置的属性自动推算其它属性值，而非直接采用默认值</li>\n</ul>\n<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width;initial-scale=1.0;maximum-scale=1.0;user-scalable=0&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>apple-touch-fullscreen添加到主屏幕后，全屏显示；apple-mobile-web-app-capable删除默认的苹果工具栏和菜单栏，默认显示；app-mobile-web-app-status-bar-style苹果手机状态栏</li>\n</ul>\n<pre><code>&lt;meta name=&quot;apple-touch-fullscreen&quot; content=&quot;yes&quot;&gt;\n&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;\n&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;    \n</code></pre>","excerpt":"<blockquote>\n<p>关于meta标签</p>\n</blockquote>\n<p>  　　meta标签是HTML语言head区的一个辅助标签，它位于HTML文档头部的标记和标题之间，提供用户不可见的信息。Meta标签通常用来为搜索引擎定义页面主题，或者是定义用户浏览器上的cookie；也可以用于鉴别作者，设定页面格式，标注内容提要和关键字；还可以设置页面使其可以根据你定义的时间间隔刷新自己，以及设置RASC内容等级等等。</p>\n<blockquote>\n<p>简要</p>\n</blockquote>\n<p>  　　meta标签分为两大部分：HTTP标题信息（HTTP-EQUIV）和页面描述信息（NAME）。 http-equiv类似于HTTP的头部协议，回应给浏览器一些有用的信息，更精确的显示网页内容。name的content指定实际内容，如：如果指定level为value，则Content可能是beginner、intermediate、advanced。</p>","more":"<blockquote>\n<p>主要</p>\n</blockquote>\n<ul>\n<li>Content-Type和Content-Language 对字符集进行设定</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;Content-Type&quot; Content=&quot;text/html;Charset=utf-8&quot;&gt;\n&lt;meta http-equiv=&quot;Content-Language&quot; Content=&quot;zh-CN&quot;&gt;    \n</code></pre><hr>\n<ul>\n<li>Refresh 一定时间后刷新自己或者自动链接到其它网页</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;Refresh&quot; Content=&quot;30&quot;&gt;\n&lt;meta http-equiv=&quot;Refresh&quot; Content=&quot;5;Url=http://www.fukuamess.cn&quot;&gt;    \n</code></pre><hr>\n<ul>\n<li>Expires 指定网页在缓存中的过期时间，一旦网页过期，必须到服务器上重新调阅，时间必须为GMT格式</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;Expires&quot; Content=&quot;0&quot;&gt;\n&lt;meta http-equiv=&quot;Expires&quot;    Content=&quot;fri,20,May 1314 00:00:01 GMT&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>Pragma即cache模式，禁止浏览器从本地机的缓存中调阅页面，这样设定，访问者将无法脱机浏览</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>Set-Cookie浏览器访问某个页面时会将它存在缓存中，下次访问时可以从缓存中读取，以提高速度。</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;Set-Cookie&quot; Content=&quot;cookievalue=fukua;expires=fri,20,May 1314 00:00:01 GMT&quot;&gt;    \n</code></pre><hr>\n<ul>\n<li>Window-target强制页面在当前窗口以独立页面显示，用来防止别人在框架里调用你的页面，Content值可以是：_blank、_top、_self、_parent</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;Window-target&quot; Content=&quot;_top&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>Page-Entet、Page-Exit页面被载入和调出时的一些特效</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;Page-Enter&quot; Content=&quot;blendTrans(Duration=0.5)&quot;&gt;\n&lt;meta http-equiv=&quot;Page-Exit&quot; Content=&quot;blendTrans(Duration=0.5)&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>X-UA-Compatible以IE的哪个版本去渲染页面，IE=Edge：以所在系统最新版本IE渲染</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;    \n</code></pre><p><hr style=\"border:none;border-top:solid 2px red;\">    </p>\n<ul>\n<li>Keywords为搜索引擎提供关键字列表，各关键词以英文逗号隔开。当有多个meta元素提供文档语言从属信息时，搜索引擎会使用lang特性来过滤并通过用户的语言优先参照来显示搜索结果</li>\n</ul>\n<pre><code>&lt;meta name=&quot;Keywords&quot; Lang=&quot;EN&quot; Content=&quot;甫夸,messi&quot;&gt;\n&lt;meta name=&quot;Keywords&quot; Lang=&quot;FR&quot; Content=&quot;甫夸,messi&quot;&gt;    \n</code></pre><hr>\n<ul>\n<li>Description简介网站的主要内容</li>\n</ul>\n<pre><code>&lt;meta name=&quot;Description&quot; Content=&quot;messi超帅&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>Robots告诉搜索机器人哪些页面需要索引，哪些不需要。Content值可选：all文件被检索，页面上的链接可以被查询、none文件不被检索，页面上的链接不能被查询、index页面被检索、noindex页面不被检索，但页面上的链接可被查询、follow页面上的链接可被查询、nofollow文件不被检索，但页面上的链接可以被查询，默认是all</li>\n</ul>\n<pre><code>&lt;meta name=&quot;Robots&quot; Content=&quot;All&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>Author标注网页的作者或制作组，可以是名字或Email</li>\n</ul>\n<pre><code>&lt;meta name=&quot;Author&quot; Content=&quot;fukua&quot;&gt;    \n</code></pre><hr>\n<ul>\n<li>Copyright版权</li>\n</ul>\n<pre><code>&lt;meta name=&quot;Copyright&quot; Content=&quot;版权所有，翻版可不究&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>Generator编辑器说明</li>\n</ul>\n<pre><code>&lt;meta name=&quot;Generator&quot; Content=&quot;VSCode&quot;&gt;\n</code></pre><p><hr style=\"border:none;border-top:solid 2px red;\">    </p>\n<ul>\n<li>full-screen全屏显示网页，偏向于移动端适用</li>\n</ul>\n<pre><code>&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>browsermode浏览器模式，可以强制竖屏显示</li>\n</ul>\n<pre><code>&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>format-detection对于telephone，iphone会自动给文字添加链接样式，点击还可以自动拨号，默认开启；对于email，浏览器会识别邮箱并添加样式，点击可以调用系统默认邮件应用给该地址发邮件，默认开启；对于address，开启点击地址直接跳转至地图，默认开启</li>\n</ul>\n<pre><code>&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;\n&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no,email=no,address=no&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>x5-orientation对于QQ浏览器可强制竖屏，类比可知x5-fullscreen为QQ浏览器强制全屏，x5-page-mode为QQ浏览器应用模式</li>\n</ul>\n<pre><code>&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;\n&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>renderer貌似360专用</li>\n</ul>\n<pre><code>&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt; //默认webkit内核\n&lt;meta name=&quot;renderer&quot; content=&quot;ie-comp&quot;&gt; //默认IE兼容模式\n&lt;meta name=&quot;renderer&quot; content=&quot;ie-stand&quot;&gt; //默认IE标准模式\n</code></pre><p><hr style=\"border:none;border-top:solid 2px red\"></p>\n<ul>\n<li>viewport即可视区域，对桌面浏览器而言，就是除去所有工具栏、状态栏、滚动条等等之后用于看网页的区域。可设置的选项有：width宽度；height高度；intial-scale初始缩放比例；minimum-scale允许用户缩放到的最小比例；maximum-scale允许用户缩放到的最大比例；user-scalable用户是否可以手动缩放。对于这些属性，我们可以设置其中的一个或者多个，并不需要同时设置，iphone会根据设置的属性自动推算其它属性值，而非直接采用默认值</li>\n</ul>\n<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width;initial-scale=1.0;maximum-scale=1.0;user-scalable=0&quot;&gt;\n</code></pre><hr>\n<ul>\n<li>apple-touch-fullscreen添加到主屏幕后，全屏显示；apple-mobile-web-app-capable删除默认的苹果工具栏和菜单栏，默认显示；app-mobile-web-app-status-bar-style苹果手机状态栏</li>\n</ul>\n<pre><code>&lt;meta name=&quot;apple-touch-fullscreen&quot; content=&quot;yes&quot;&gt;\n&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;\n&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;    \n</code></pre>"},{"title":"About　MongoDB","date":"2016-09-01T16:00:00.000Z","_content":"> 关于mongoDB\n\n　MongoDB是一种基于分布式文件存储的数据库，高性能、易部署、易使用。\n\n> 配置mongoDB数据库的步骤\n\n+  安装mongoDB\n+  启动数据库\n\t　1.创建一个文件夹，作为数据库存放目录\n\t　2.打开cmd，cd到mongoDB/bin中\n\t　3.执行mongod.exe --path \"数据库目录\"\n+ 连接数据库\n\t使用mongo.exe可以自动连接mongo数据库\n\t\n<!---more--->\n>mongo.exe命令大全\n\n+ use dbname\n\t切换到某个数据库，如果不存在，则会创建并切换\n---\n+ show dbs\n\t查询所有的数据库\n---\n+ 数据集合.insert() 或 数据集合.save()\n\t数据集合类似于关系型数据库中的表。向数据库的某个数据集合中插入一条数据，如果集合不存在，则会自动创建并执行操作\n---\n+ 数据集合.find()\n\t查询某个数据集合中的所有数据\n+ 数据集合.find({查询条件})，按照某个条件查询\n\t+ 等于 　　　{key:value}\n\t+ 小于 　　　{key:{$lt:value}}\n\t+ 小于等于 　{key:{$lte:value}}\n\t+ 不等于 　　{key:{$ne:value}}\n+ 数据集合.find({条件1，条件2，条件3...})\n\t查找所有满足（条件1，条件2，条件3）的数据\n+ 数据集合.find({$or:{条件1，条件2}})\n\t查找所有满足条件1或条件2的数据\n---\n+ db.createCollection('表名')\n\t在数据库中创建一张表（数据集合）\n---\n+ show collections\n\t查看当前数据库中的所有的表\n---\n+ .sort({排序的键：1或-1})\n\t把查询结果按照某个字段进行排序。1为升序，-1为降序\n---\n+ .limit(n)\n\t从查询结果中取前n条数据\n+ .skip(n)\n\t跳过（删除）查询结果中前n条数据\n+ .skip+.limit \n\t实现从第几条开始，往后查多少条\n---\n+ .remove({查询条件})\n\t删除表中满足条件的数据\n\n> 把mongoDB安装为windows服务\n\n\t1.创建日志存放路径log文件夹和数据库存放路径db文件夹\n\t2.cd到mongoDB安装目录下，然后cd到bin中\n\t3.执行　mongod.exe --dbpath \"数据库存放路径\" --logpath \"日志存放路径\" --install\n\t4.从windows的任务管理器中打开或关闭mongoDB服务","source":"_posts/About Mongodb.md","raw":"---\ntitle: About　MongoDB\ntags: mongodb\ndate: 2016-09-02\ncategory: 甫夸之谈———mongoDB\n---\n> 关于mongoDB\n\n　MongoDB是一种基于分布式文件存储的数据库，高性能、易部署、易使用。\n\n> 配置mongoDB数据库的步骤\n\n+  安装mongoDB\n+  启动数据库\n\t　1.创建一个文件夹，作为数据库存放目录\n\t　2.打开cmd，cd到mongoDB/bin中\n\t　3.执行mongod.exe --path \"数据库目录\"\n+ 连接数据库\n\t使用mongo.exe可以自动连接mongo数据库\n\t\n<!---more--->\n>mongo.exe命令大全\n\n+ use dbname\n\t切换到某个数据库，如果不存在，则会创建并切换\n---\n+ show dbs\n\t查询所有的数据库\n---\n+ 数据集合.insert() 或 数据集合.save()\n\t数据集合类似于关系型数据库中的表。向数据库的某个数据集合中插入一条数据，如果集合不存在，则会自动创建并执行操作\n---\n+ 数据集合.find()\n\t查询某个数据集合中的所有数据\n+ 数据集合.find({查询条件})，按照某个条件查询\n\t+ 等于 　　　{key:value}\n\t+ 小于 　　　{key:{$lt:value}}\n\t+ 小于等于 　{key:{$lte:value}}\n\t+ 不等于 　　{key:{$ne:value}}\n+ 数据集合.find({条件1，条件2，条件3...})\n\t查找所有满足（条件1，条件2，条件3）的数据\n+ 数据集合.find({$or:{条件1，条件2}})\n\t查找所有满足条件1或条件2的数据\n---\n+ db.createCollection('表名')\n\t在数据库中创建一张表（数据集合）\n---\n+ show collections\n\t查看当前数据库中的所有的表\n---\n+ .sort({排序的键：1或-1})\n\t把查询结果按照某个字段进行排序。1为升序，-1为降序\n---\n+ .limit(n)\n\t从查询结果中取前n条数据\n+ .skip(n)\n\t跳过（删除）查询结果中前n条数据\n+ .skip+.limit \n\t实现从第几条开始，往后查多少条\n---\n+ .remove({查询条件})\n\t删除表中满足条件的数据\n\n> 把mongoDB安装为windows服务\n\n\t1.创建日志存放路径log文件夹和数据库存放路径db文件夹\n\t2.cd到mongoDB安装目录下，然后cd到bin中\n\t3.执行　mongod.exe --dbpath \"数据库存放路径\" --logpath \"日志存放路径\" --install\n\t4.从windows的任务管理器中打开或关闭mongoDB服务","slug":"About Mongodb","published":1,"updated":"2017-05-21T02:50:52.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p56000da8vum6fyrvmm","content":"<blockquote>\n<p>关于mongoDB</p>\n</blockquote>\n<p>　MongoDB是一种基于分布式文件存储的数据库，高性能、易部署、易使用。</p>\n<blockquote>\n<p>配置mongoDB数据库的步骤</p>\n</blockquote>\n<ul>\n<li>安装mongoDB</li>\n<li>启动数据库<br> 　1.创建一个文件夹，作为数据库存放目录<br> 　2.打开cmd，cd到mongoDB/bin中<br> 　3.执行mongod.exe –path “数据库目录”</li>\n<li>连接数据库<br>  使用mongo.exe可以自动连接mongo数据库</li>\n</ul>\n<a id=\"more\"></a>\n<blockquote>\n<p>mongo.exe命令大全</p>\n</blockquote>\n<ul>\n<li>use dbname<br>  切换到某个数据库，如果不存在，则会创建并切换</li>\n</ul>\n<hr>\n<ul>\n<li>show dbs<br>  查询所有的数据库</li>\n</ul>\n<hr>\n<ul>\n<li>数据集合.insert() 或 数据集合.save()<br>  数据集合类似于关系型数据库中的表。向数据库的某个数据集合中插入一条数据，如果集合不存在，则会自动创建并执行操作</li>\n</ul>\n<hr>\n<ul>\n<li>数据集合.find()<br>  查询某个数据集合中的所有数据</li>\n<li>数据集合.find({查询条件})，按照某个条件查询<ul>\n<li>等于 　　　{key:value}</li>\n<li>小于 　　　{key:{$lt:value}}</li>\n<li>小于等于 　{key:{$lte:value}}</li>\n<li>不等于 　　{key:{$ne:value}}</li>\n</ul>\n</li>\n<li>数据集合.find({条件1，条件2，条件3…})<br>  查找所有满足（条件1，条件2，条件3）的数据</li>\n<li>数据集合.find({$or:{条件1，条件2}})<br>  查找所有满足条件1或条件2的数据</li>\n</ul>\n<hr>\n<ul>\n<li>db.createCollection(‘表名’)<br>  在数据库中创建一张表（数据集合）</li>\n</ul>\n<hr>\n<ul>\n<li>show collections<br>  查看当前数据库中的所有的表</li>\n</ul>\n<hr>\n<ul>\n<li>.sort({排序的键：1或-1})<br>  把查询结果按照某个字段进行排序。1为升序，-1为降序</li>\n</ul>\n<hr>\n<ul>\n<li>.limit(n)<br>  从查询结果中取前n条数据</li>\n<li>.skip(n)<br>  跳过（删除）查询结果中前n条数据</li>\n<li>.skip+.limit<br>  实现从第几条开始，往后查多少条</li>\n</ul>\n<hr>\n<ul>\n<li>.remove({查询条件})<br>  删除表中满足条件的数据</li>\n</ul>\n<blockquote>\n<p>把mongoDB安装为windows服务</p>\n</blockquote>\n<pre><code>1.创建日志存放路径log文件夹和数据库存放路径db文件夹\n2.cd到mongoDB安装目录下，然后cd到bin中\n3.执行　mongod.exe --dbpath &quot;数据库存放路径&quot; --logpath &quot;日志存放路径&quot; --install\n4.从windows的任务管理器中打开或关闭mongoDB服务\n</code></pre>","excerpt":"<blockquote>\n<p>关于mongoDB</p>\n</blockquote>\n<p>　MongoDB是一种基于分布式文件存储的数据库，高性能、易部署、易使用。</p>\n<blockquote>\n<p>配置mongoDB数据库的步骤</p>\n</blockquote>\n<ul>\n<li>安装mongoDB</li>\n<li>启动数据库<br> 　1.创建一个文件夹，作为数据库存放目录<br> 　2.打开cmd，cd到mongoDB/bin中<br> 　3.执行mongod.exe –path “数据库目录”</li>\n<li>连接数据库<br>  使用mongo.exe可以自动连接mongo数据库</li>\n</ul>","more":"<blockquote>\n<p>mongo.exe命令大全</p>\n</blockquote>\n<ul>\n<li>use dbname<br>  切换到某个数据库，如果不存在，则会创建并切换</li>\n</ul>\n<hr>\n<ul>\n<li>show dbs<br>  查询所有的数据库</li>\n</ul>\n<hr>\n<ul>\n<li>数据集合.insert() 或 数据集合.save()<br>  数据集合类似于关系型数据库中的表。向数据库的某个数据集合中插入一条数据，如果集合不存在，则会自动创建并执行操作</li>\n</ul>\n<hr>\n<ul>\n<li>数据集合.find()<br>  查询某个数据集合中的所有数据</li>\n<li>数据集合.find({查询条件})，按照某个条件查询<ul>\n<li>等于 　　　{key:value}</li>\n<li>小于 　　　{key:{$lt:value}}</li>\n<li>小于等于 　{key:{$lte:value}}</li>\n<li>不等于 　　{key:{$ne:value}}</li>\n</ul>\n</li>\n<li>数据集合.find({条件1，条件2，条件3…})<br>  查找所有满足（条件1，条件2，条件3）的数据</li>\n<li>数据集合.find({$or:{条件1，条件2}})<br>  查找所有满足条件1或条件2的数据</li>\n</ul>\n<hr>\n<ul>\n<li>db.createCollection(‘表名’)<br>  在数据库中创建一张表（数据集合）</li>\n</ul>\n<hr>\n<ul>\n<li>show collections<br>  查看当前数据库中的所有的表</li>\n</ul>\n<hr>\n<ul>\n<li>.sort({排序的键：1或-1})<br>  把查询结果按照某个字段进行排序。1为升序，-1为降序</li>\n</ul>\n<hr>\n<ul>\n<li>.limit(n)<br>  从查询结果中取前n条数据</li>\n<li>.skip(n)<br>  跳过（删除）查询结果中前n条数据</li>\n<li>.skip+.limit<br>  实现从第几条开始，往后查多少条</li>\n</ul>\n<hr>\n<ul>\n<li>.remove({查询条件})<br>  删除表中满足条件的数据</li>\n</ul>\n<blockquote>\n<p>把mongoDB安装为windows服务</p>\n</blockquote>\n<pre><code>1.创建日志存放路径log文件夹和数据库存放路径db文件夹\n2.cd到mongoDB安装目录下，然后cd到bin中\n3.执行　mongod.exe --dbpath &quot;数据库存放路径&quot; --logpath &quot;日志存放路径&quot; --install\n4.从windows的任务管理器中打开或关闭mongoDB服务\n</code></pre>"},{"title":"About　RegExp","date":"2016-09-26T16:00:00.000Z","_content":"\n>关于RegExp\n\n　　RegExp正则表达式以简要的格式对字符进行筛选。\n\n>主要\n\n　　<b style=\"color:red;font-size:25px;\">\\</b>　　将下一个字符标记为特殊字符，进行转义。如；\"\\n\"匹配换行符，\"\\ \\\"匹配\"\\\"\n　　<b style=\"color:red;font-size:25px;\">^</b>　　匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性（多行），也匹配\"\\n\"或\"\\r\"之后的位置\n　　<b style=\"color:red;font-size:25px;\">$</b>　　匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，也匹配\"\\n\"或\"\\r\"之前的位置\n\n<!---more---> \n\n　　<b style=\"color:red;font-size:25px;\">*</b>　　匹配前面的子表达式零次或多次\n　　<b style=\"color:red;font-size:25px;\">+</b>　　匹配前面的子表达式一次或多次\n　　<b style=\"color:red;font-size:25px;\">?</b>　　匹配前面的子表达式零次或一次\n　　<b style=\"color:red;font-size:25px;\">{n}</b>　　n是一个非负整数，匹配确定的n次\n　　<b style=\"color:red;font-size:25px;\">{n,}</b>　　n是非负整数，至少匹配n次\n　　<b style=\"color:red;font-size:25px;\">{n,m}</b>　　n和m均为非负整数，其中n<=m，最少匹配n次，最多匹配m次\n　　<b style=\"color:red;font-size:25px;\">x|y</b>　　匹配x或y\n　　<b style=\"color:red;font-size:25px;\">[xyz]</b>　　匹配所包含的任意一个字符\n　　<b style=\"color:red;font-size:25px;\">[^xyz]</b>　　匹配未包含的任意字符\n　　<b style=\"color:red;font-size:25px;\">[a-z]</b>　　匹配指定范围内的任意字符\n　　<b style=\"color:red;font-size:25px;\">[^a-z]</b>　　匹配任何不在指定范围的任意字符\n　　<b style=\"color:red;font-size:25px;\">\\b</b>　　匹配一个单词边界\n　　<b style=\"color:red;font-size:25px;\">\\B</b>　　匹配非单词边界\n　　<b style=\"color:red;font-size:25px;\">\\cx</b>　　匹配由x指明的控制字符。如：\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一，否则将c视为一个原义的\"c\"字符\n　　<b style=\"color:red;font-size:25px;\">\\d</b>　　匹配一个数字字符。等价于[0-9]\n　　<b style=\"color:red;font-size:25px;\">\\D</b>　　匹配一个非数字字符。等价于[^0-9]\n　　<b style=\"color:red;font-size:25px;\">\\f</b>　　匹配一个换页符。等价于\\x0c和\\cL\n　　<b style=\"color:red;font-size:25px;\">\\n</b>　　匹配一个换行符。等价于\\x0a和\\cJ\n　　<b style=\"color:red;font-size:25px;\">\\r</b>　　匹配一个回车符。等价于\\0d和\\cM\n　　<b style=\"color:red;font-size:25px;\">\\t</b>　　匹配一个制表符。等价于\\x09和\\cI\n　　<b style=\"color:red;font-size:25px;\">\\v</b>　　匹配一个垂直制表符。等价于\\x0b和\\cK\n　　<b style=\"color:red;font-size:25px;\">\\s</b>　　匹配任何非空白字符，包括空格、制表符、换页符等等。等价于[\\f\\n\\r\\t\\v]\n　　<b style=\"color:red;font-size:25px;\">\\w</b>　　匹配包括下划线的任何单词字符。等价于[a-zA-Z0-9_]\n　　<b style=\"color:red;font-size:25px;\">\\W</b>　　匹配任何非单词字符。等价于[^a-zA-Z0-9_]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/About RegExp.md","raw":"---\ntitle: About　RegExp\ncategories: 甫夸之谈———正则\ndate: 2016-09-27\ntags: \"<b style='font-size:40px;'>RegExp</b>\"\n---\n\n>关于RegExp\n\n　　RegExp正则表达式以简要的格式对字符进行筛选。\n\n>主要\n\n　　<b style=\"color:red;font-size:25px;\">\\</b>　　将下一个字符标记为特殊字符，进行转义。如；\"\\n\"匹配换行符，\"\\ \\\"匹配\"\\\"\n　　<b style=\"color:red;font-size:25px;\">^</b>　　匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性（多行），也匹配\"\\n\"或\"\\r\"之后的位置\n　　<b style=\"color:red;font-size:25px;\">$</b>　　匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，也匹配\"\\n\"或\"\\r\"之前的位置\n\n<!---more---> \n\n　　<b style=\"color:red;font-size:25px;\">*</b>　　匹配前面的子表达式零次或多次\n　　<b style=\"color:red;font-size:25px;\">+</b>　　匹配前面的子表达式一次或多次\n　　<b style=\"color:red;font-size:25px;\">?</b>　　匹配前面的子表达式零次或一次\n　　<b style=\"color:red;font-size:25px;\">{n}</b>　　n是一个非负整数，匹配确定的n次\n　　<b style=\"color:red;font-size:25px;\">{n,}</b>　　n是非负整数，至少匹配n次\n　　<b style=\"color:red;font-size:25px;\">{n,m}</b>　　n和m均为非负整数，其中n<=m，最少匹配n次，最多匹配m次\n　　<b style=\"color:red;font-size:25px;\">x|y</b>　　匹配x或y\n　　<b style=\"color:red;font-size:25px;\">[xyz]</b>　　匹配所包含的任意一个字符\n　　<b style=\"color:red;font-size:25px;\">[^xyz]</b>　　匹配未包含的任意字符\n　　<b style=\"color:red;font-size:25px;\">[a-z]</b>　　匹配指定范围内的任意字符\n　　<b style=\"color:red;font-size:25px;\">[^a-z]</b>　　匹配任何不在指定范围的任意字符\n　　<b style=\"color:red;font-size:25px;\">\\b</b>　　匹配一个单词边界\n　　<b style=\"color:red;font-size:25px;\">\\B</b>　　匹配非单词边界\n　　<b style=\"color:red;font-size:25px;\">\\cx</b>　　匹配由x指明的控制字符。如：\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一，否则将c视为一个原义的\"c\"字符\n　　<b style=\"color:red;font-size:25px;\">\\d</b>　　匹配一个数字字符。等价于[0-9]\n　　<b style=\"color:red;font-size:25px;\">\\D</b>　　匹配一个非数字字符。等价于[^0-9]\n　　<b style=\"color:red;font-size:25px;\">\\f</b>　　匹配一个换页符。等价于\\x0c和\\cL\n　　<b style=\"color:red;font-size:25px;\">\\n</b>　　匹配一个换行符。等价于\\x0a和\\cJ\n　　<b style=\"color:red;font-size:25px;\">\\r</b>　　匹配一个回车符。等价于\\0d和\\cM\n　　<b style=\"color:red;font-size:25px;\">\\t</b>　　匹配一个制表符。等价于\\x09和\\cI\n　　<b style=\"color:red;font-size:25px;\">\\v</b>　　匹配一个垂直制表符。等价于\\x0b和\\cK\n　　<b style=\"color:red;font-size:25px;\">\\s</b>　　匹配任何非空白字符，包括空格、制表符、换页符等等。等价于[\\f\\n\\r\\t\\v]\n　　<b style=\"color:red;font-size:25px;\">\\w</b>　　匹配包括下划线的任何单词字符。等价于[a-zA-Z0-9_]\n　　<b style=\"color:red;font-size:25px;\">\\W</b>　　匹配任何非单词字符。等价于[^a-zA-Z0-9_]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"About RegExp","published":1,"updated":"2017-05-21T02:48:55.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p5a000fa8vuki55u5md","content":"<blockquote>\n<p>关于RegExp</p>\n</blockquote>\n<p>　　RegExp正则表达式以简要的格式对字符进行筛选。</p>\n<blockquote>\n<p>主要</p>\n</blockquote>\n<p>　　<b style=\"color:red;font-size:25px;\">\\</b>　　将下一个字符标记为特殊字符，进行转义。如；”\\n”匹配换行符，”\\ \\”匹配”\\”<br>　　<b style=\"color:red;font-size:25px;\">^</b>　　匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性（多行），也匹配”\\n”或”\\r”之后的位置<br>　　<b style=\"color:red;font-size:25px;\">$</b>　　匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，也匹配”\\n”或”\\r”之前的位置</p>\n<a id=\"more\"></a> \n<p>　　<b style=\"color:red;font-size:25px;\">*</b>　　匹配前面的子表达式零次或多次<br>　　<b style=\"color:red;font-size:25px;\">+</b>　　匹配前面的子表达式一次或多次<br>　　<b style=\"color:red;font-size:25px;\">?</b>　　匹配前面的子表达式零次或一次<br>　　<b style=\"color:red;font-size:25px;\">{n}</b>　　n是一个非负整数，匹配确定的n次<br>　　<b style=\"color:red;font-size:25px;\">{n,}</b>　　n是非负整数，至少匹配n次<br>　　<b style=\"color:red;font-size:25px;\">{n,m}</b>　　n和m均为非负整数，其中n&lt;=m，最少匹配n次，最多匹配m次<br>　　<b style=\"color:red;font-size:25px;\">x|y</b>　　匹配x或y<br>　　<b style=\"color:red;font-size:25px;\">[xyz]</b>　　匹配所包含的任意一个字符<br>　　<b style=\"color:red;font-size:25px;\">[^xyz]</b>　　匹配未包含的任意字符<br>　　<b style=\"color:red;font-size:25px;\">[a-z]</b>　　匹配指定范围内的任意字符<br>　　<b style=\"color:red;font-size:25px;\">[^a-z]</b>　　匹配任何不在指定范围的任意字符<br>　　<b style=\"color:red;font-size:25px;\">\\b</b>　　匹配一个单词边界<br>　　<b style=\"color:red;font-size:25px;\">\\B</b>　　匹配非单词边界<br>　　<b style=\"color:red;font-size:25px;\">\\cx</b>　　匹配由x指明的控制字符。如：\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一，否则将c视为一个原义的”c”字符<br>　　<b style=\"color:red;font-size:25px;\">\\d</b>　　匹配一个数字字符。等价于[0-9]<br>　　<b style=\"color:red;font-size:25px;\">\\D</b>　　匹配一个非数字字符。等价于[^0-9]<br>　　<b style=\"color:red;font-size:25px;\">\\f</b>　　匹配一个换页符。等价于\\x0c和\\cL<br>　　<b style=\"color:red;font-size:25px;\">\\n</b>　　匹配一个换行符。等价于\\x0a和\\cJ<br>　　<b style=\"color:red;font-size:25px;\">\\r</b>　　匹配一个回车符。等价于\\0d和\\cM<br>　　<b style=\"color:red;font-size:25px;\">\\t</b>　　匹配一个制表符。等价于\\x09和\\cI<br>　　<b style=\"color:red;font-size:25px;\">\\v</b>　　匹配一个垂直制表符。等价于\\x0b和\\cK<br>　　<b style=\"color:red;font-size:25px;\">\\s</b>　　匹配任何非空白字符，包括空格、制表符、换页符等等。等价于[\\f\\n\\r\\t\\v]<br>　　<b style=\"color:red;font-size:25px;\">\\w</b>　　匹配包括下划线的任何单词字符。等价于[a-zA-Z0-9<em>]<br>　　<b style=\"color:red;font-size:25px;\">\\W</b>　　匹配任何非单词字符。等价于[^a-zA-Z0-9</em>]</p>\n","excerpt":"<blockquote>\n<p>关于RegExp</p>\n</blockquote>\n<p>　　RegExp正则表达式以简要的格式对字符进行筛选。</p>\n<blockquote>\n<p>主要</p>\n</blockquote>\n<p>　　<b style=\"color:red;font-size:25px;\">\\</b>　　将下一个字符标记为特殊字符，进行转义。如；”\\n”匹配换行符，”\\ \\”匹配”\\”<br>　　<b style=\"color:red;font-size:25px;\">^</b>　　匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性（多行），也匹配”\\n”或”\\r”之后的位置<br>　　<b style=\"color:red;font-size:25px;\">$</b>　　匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，也匹配”\\n”或”\\r”之前的位置</p>","more":"<p>　　<b style=\"color:red;font-size:25px;\">*</b>　　匹配前面的子表达式零次或多次<br>　　<b style=\"color:red;font-size:25px;\">+</b>　　匹配前面的子表达式一次或多次<br>　　<b style=\"color:red;font-size:25px;\">?</b>　　匹配前面的子表达式零次或一次<br>　　<b style=\"color:red;font-size:25px;\">{n}</b>　　n是一个非负整数，匹配确定的n次<br>　　<b style=\"color:red;font-size:25px;\">{n,}</b>　　n是非负整数，至少匹配n次<br>　　<b style=\"color:red;font-size:25px;\">{n,m}</b>　　n和m均为非负整数，其中n&lt;=m，最少匹配n次，最多匹配m次<br>　　<b style=\"color:red;font-size:25px;\">x|y</b>　　匹配x或y<br>　　<b style=\"color:red;font-size:25px;\">[xyz]</b>　　匹配所包含的任意一个字符<br>　　<b style=\"color:red;font-size:25px;\">[^xyz]</b>　　匹配未包含的任意字符<br>　　<b style=\"color:red;font-size:25px;\">[a-z]</b>　　匹配指定范围内的任意字符<br>　　<b style=\"color:red;font-size:25px;\">[^a-z]</b>　　匹配任何不在指定范围的任意字符<br>　　<b style=\"color:red;font-size:25px;\">\\b</b>　　匹配一个单词边界<br>　　<b style=\"color:red;font-size:25px;\">\\B</b>　　匹配非单词边界<br>　　<b style=\"color:red;font-size:25px;\">\\cx</b>　　匹配由x指明的控制字符。如：\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一，否则将c视为一个原义的”c”字符<br>　　<b style=\"color:red;font-size:25px;\">\\d</b>　　匹配一个数字字符。等价于[0-9]<br>　　<b style=\"color:red;font-size:25px;\">\\D</b>　　匹配一个非数字字符。等价于[^0-9]<br>　　<b style=\"color:red;font-size:25px;\">\\f</b>　　匹配一个换页符。等价于\\x0c和\\cL<br>　　<b style=\"color:red;font-size:25px;\">\\n</b>　　匹配一个换行符。等价于\\x0a和\\cJ<br>　　<b style=\"color:red;font-size:25px;\">\\r</b>　　匹配一个回车符。等价于\\0d和\\cM<br>　　<b style=\"color:red;font-size:25px;\">\\t</b>　　匹配一个制表符。等价于\\x09和\\cI<br>　　<b style=\"color:red;font-size:25px;\">\\v</b>　　匹配一个垂直制表符。等价于\\x0b和\\cK<br>　　<b style=\"color:red;font-size:25px;\">\\s</b>　　匹配任何非空白字符，包括空格、制表符、换页符等等。等价于[\\f\\n\\r\\t\\v]<br>　　<b style=\"color:red;font-size:25px;\">\\w</b>　　匹配包括下划线的任何单词字符。等价于[a-zA-Z0-9<em>]<br>　　<b style=\"color:red;font-size:25px;\">\\W</b>　　匹配任何非单词字符。等价于[^a-zA-Z0-9</em>]</p>"},{"title":"About　Socket.io","date":"2016-09-24T16:00:00.000Z","_content":"\n> 关于\n\n\n　Socket.io是WebSocket的一个库，包括了客户端的js和服务端的nodejs,它的目标是构建可以在不同浏览器和移动设备上使用的实时应用。Socket.io支持跨平台，在不同的平台下，使用方法大同小异。下面主要阐释在node.js中的简单使用。\n> 服务端\n\n* 安装nodejs之后，npm安装socket.io模块\n\t`npm install socket.io`\n* 搭建socket服务器。为了便捷，在这里使用了nodejs中常用的express框架来实现web服务。同时使用了connection事件来测试。\n<!---more--->\n\n\n\tvar express = require('express');\n\tvar app = express();\n\tapp.get('/',function(req,res){\n\t\tres.status(200).send('前后端连接成功');\n\t\tres.sendFile('index.html',{root.__dirname});\n\t});\n\tvar server = require('http').createServer(app);\n\tvar io = require('socket.io')(server);\n\tio.on('connection',function(socket){\n\t\tsocket.send('后端发到前端的消息');\n\t\tsocket.on('message',function(data){\n\t\t\tconsole.log(data);\n\t\t});\n\t});\n\tserver.listen(3000,function(){\n\t\tconsole.log('服务器启动成功');\n\t});\n> 前端\n\n* 在index文件中引入客户端js文件\n\t`<script src='https://cdn.socket.io/socket.io-1.2.1.js'></script>`\n* 在index文件中添加与后端交互的信息\n\n\n\tvar socket = io.connect('/');\n\tsocket.on('connect',function(){\n\t\tsocket.send('前端发到后端的消息');\n\t});\n\tsocket.on('message',function(data){\n\t\talert(data);\n\t});\n\n\n\n\n\n\n\t\n\t\n\n    ","source":"_posts/About WebSocket.md","raw":"---\ntitle: About　Socket.io\ntags: \"<h1>Websocket</h1>\"\ndate: 2016-09-25\ncategories: 甫夸之谈———websocket\n---\n\n> 关于\n\n\n　Socket.io是WebSocket的一个库，包括了客户端的js和服务端的nodejs,它的目标是构建可以在不同浏览器和移动设备上使用的实时应用。Socket.io支持跨平台，在不同的平台下，使用方法大同小异。下面主要阐释在node.js中的简单使用。\n> 服务端\n\n* 安装nodejs之后，npm安装socket.io模块\n\t`npm install socket.io`\n* 搭建socket服务器。为了便捷，在这里使用了nodejs中常用的express框架来实现web服务。同时使用了connection事件来测试。\n<!---more--->\n\n\n\tvar express = require('express');\n\tvar app = express();\n\tapp.get('/',function(req,res){\n\t\tres.status(200).send('前后端连接成功');\n\t\tres.sendFile('index.html',{root.__dirname});\n\t});\n\tvar server = require('http').createServer(app);\n\tvar io = require('socket.io')(server);\n\tio.on('connection',function(socket){\n\t\tsocket.send('后端发到前端的消息');\n\t\tsocket.on('message',function(data){\n\t\t\tconsole.log(data);\n\t\t});\n\t});\n\tserver.listen(3000,function(){\n\t\tconsole.log('服务器启动成功');\n\t});\n> 前端\n\n* 在index文件中引入客户端js文件\n\t`<script src='https://cdn.socket.io/socket.io-1.2.1.js'></script>`\n* 在index文件中添加与后端交互的信息\n\n\n\tvar socket = io.connect('/');\n\tsocket.on('connect',function(){\n\t\tsocket.send('前端发到后端的消息');\n\t});\n\tsocket.on('message',function(data){\n\t\talert(data);\n\t});\n\n\n\n\n\n\n\t\n\t\n\n    ","slug":"About WebSocket","published":1,"updated":"2017-05-21T02:49:29.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p5g000ja8vulzfk6ims","content":"<blockquote>\n<p>关于</p>\n</blockquote>\n<p>　Socket.io是WebSocket的一个库，包括了客户端的js和服务端的nodejs,它的目标是构建可以在不同浏览器和移动设备上使用的实时应用。Socket.io支持跨平台，在不同的平台下，使用方法大同小异。下面主要阐释在node.js中的简单使用。</p>\n<blockquote>\n<p>服务端</p>\n</blockquote>\n<ul>\n<li>安装nodejs之后，npm安装socket.io模块<br>  <code>npm install socket.io</code></li>\n<li>搭建socket服务器。为了便捷，在这里使用了nodejs中常用的express框架来实现web服务。同时使用了connection事件来测试。<a id=\"more\"></a>\n</li>\n</ul>\n<pre><code>var express = require(&apos;express&apos;);\nvar app = express();\napp.get(&apos;/&apos;,function(req,res){\n    res.status(200).send(&apos;前后端连接成功&apos;);\n    res.sendFile(&apos;index.html&apos;,{root.__dirname});\n});\nvar server = require(&apos;http&apos;).createServer(app);\nvar io = require(&apos;socket.io&apos;)(server);\nio.on(&apos;connection&apos;,function(socket){\n    socket.send(&apos;后端发到前端的消息&apos;);\n    socket.on(&apos;message&apos;,function(data){\n        console.log(data);\n    });\n});\nserver.listen(3000,function(){\n    console.log(&apos;服务器启动成功&apos;);\n});\n</code></pre><blockquote>\n<p>前端</p>\n</blockquote>\n<ul>\n<li>在index文件中引入客户端js文件<br>  <code>&lt;script src=&#39;https://cdn.socket.io/socket.io-1.2.1.js&#39;&gt;&lt;/script&gt;</code></li>\n<li>在index文件中添加与后端交互的信息</li>\n</ul>\n<pre><code>var socket = io.connect(&apos;/&apos;);\nsocket.on(&apos;connect&apos;,function(){\n    socket.send(&apos;前端发到后端的消息&apos;);\n});\nsocket.on(&apos;message&apos;,function(data){\n    alert(data);\n});\n</code></pre>","excerpt":"<blockquote>\n<p>关于</p>\n</blockquote>\n<p>　Socket.io是WebSocket的一个库，包括了客户端的js和服务端的nodejs,它的目标是构建可以在不同浏览器和移动设备上使用的实时应用。Socket.io支持跨平台，在不同的平台下，使用方法大同小异。下面主要阐释在node.js中的简单使用。</p>\n<blockquote>\n<p>服务端</p>\n</blockquote>\n<ul>\n<li>安装nodejs之后，npm安装socket.io模块<br>  <code>npm install socket.io</code></li>\n<li>搭建socket服务器。为了便捷，在这里使用了nodejs中常用的express框架来实现web服务。同时使用了connection事件来测试。","more":"</li>\n</ul>\n<pre><code>var express = require(&apos;express&apos;);\nvar app = express();\napp.get(&apos;/&apos;,function(req,res){\n    res.status(200).send(&apos;前后端连接成功&apos;);\n    res.sendFile(&apos;index.html&apos;,{root.__dirname});\n});\nvar server = require(&apos;http&apos;).createServer(app);\nvar io = require(&apos;socket.io&apos;)(server);\nio.on(&apos;connection&apos;,function(socket){\n    socket.send(&apos;后端发到前端的消息&apos;);\n    socket.on(&apos;message&apos;,function(data){\n        console.log(data);\n    });\n});\nserver.listen(3000,function(){\n    console.log(&apos;服务器启动成功&apos;);\n});\n</code></pre><blockquote>\n<p>前端</p>\n</blockquote>\n<ul>\n<li>在index文件中引入客户端js文件<br>  <code>&lt;script src=&#39;https://cdn.socket.io/socket.io-1.2.1.js&#39;&gt;&lt;/script&gt;</code></li>\n<li>在index文件中添加与后端交互的信息</li>\n</ul>\n<pre><code>var socket = io.connect(&apos;/&apos;);\nsocket.on(&apos;connect&apos;,function(){\n    socket.send(&apos;前端发到后端的消息&apos;);\n});\nsocket.on(&apos;message&apos;,function(data){\n    alert(data);\n});\n</code></pre>"},{"title":"About　ng-if、ng-show","date":"2017-03-05T16:00:00.000Z","_content":"\n>关于ng-if、ng-show\n\n　　Angular中ng-if、ng-show都可以用来控制dom元素进行显示和隐藏，所给表达式为真时即为显示元素，反之则隐藏。\n\t\n>主要\n\n　　Angular中ng-if的本质是添加或删除节点，而ng-show是通过css对元素进行显示或隐藏。通过用ng-if添加的节点会处于一种最原始的状态，包括相关作用域也是新的。","source":"_posts/About angulr_ng-if、ng-show.md","raw":"---\ntitle: About　ng-if、ng-show\ncategories: 甫夸之谈———Angular\ndate: 2017-03-06\ntags: \"ng-if、ng-show\"\n---\n\n>关于ng-if、ng-show\n\n　　Angular中ng-if、ng-show都可以用来控制dom元素进行显示和隐藏，所给表达式为真时即为显示元素，反之则隐藏。\n\t\n>主要\n\n　　Angular中ng-if的本质是添加或删除节点，而ng-show是通过css对元素进行显示或隐藏。通过用ng-if添加的节点会处于一种最原始的状态，包括相关作用域也是新的。","slug":"About angulr_ng-if、ng-show","published":1,"updated":"2017-05-21T02:47:07.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p5l000ka8vuwsbg57u6","content":"<blockquote>\n<p>关于ng-if、ng-show</p>\n</blockquote>\n<p>　　Angular中ng-if、ng-show都可以用来控制dom元素进行显示和隐藏，所给表达式为真时即为显示元素，反之则隐藏。</p>\n<blockquote>\n<p>主要</p>\n</blockquote>\n<p>　　Angular中ng-if的本质是添加或删除节点，而ng-show是通过css对元素进行显示或隐藏。通过用ng-if添加的节点会处于一种最原始的状态，包括相关作用域也是新的。</p>\n","excerpt":"","more":"<blockquote>\n<p>关于ng-if、ng-show</p>\n</blockquote>\n<p>　　Angular中ng-if、ng-show都可以用来控制dom元素进行显示和隐藏，所给表达式为真时即为显示元素，反之则隐藏。</p>\n<blockquote>\n<p>主要</p>\n</blockquote>\n<p>　　Angular中ng-if的本质是添加或删除节点，而ng-show是通过css对元素进行显示或隐藏。通过用ng-if添加的节点会处于一种最原始的状态，包括相关作用域也是新的。</p>\n"},{"title":"About　Clipboard","date":"2017-05-12T16:00:00.000Z","_content":"\n>\t主要\n\n　　JS中实现特定内容的复制，基本依赖于execCommand()、ClipboardEvent()两者的结合。\n\n*\texecCommand()，对选中、聚焦区域的进行操作，多用于文本编辑。通过运用`copy`命令可以实现复制到系统粘贴板，限于必须能选中、聚焦。\n\t```\n\tdocument.execCommand('Copy');\n\t```\n\n*\tClipboardEvent()，监听系统中`copy`、`cut`、`paste`等操作。\n<!-- more -->\n\t```\n\tdocument.body.addEventListener('copy',function(e){\n\t\tconsole.log(e);\n\t\te.clipboardData.setData('text/plain','自定义内容');\n\t\te.preventDefault();\t\t//没有阻止，则内容为选中内容\n\t});\n\t```\n\t```\n\te.clipboardData.getData('text/plain');\n\te.clipboardData.clearData('text/plain');\n\t```\n*\t在非IE中clipboardData存在于事件中，而IE中则直接在window中即可得到。","source":"_posts/About clipboard.md","raw":"---\ntitle: About　Clipboard\ncategories: 甫夸之谈———JS\ndate: 2017-05-13\ntags: clipboard\n---\n\n>\t主要\n\n　　JS中实现特定内容的复制，基本依赖于execCommand()、ClipboardEvent()两者的结合。\n\n*\texecCommand()，对选中、聚焦区域的进行操作，多用于文本编辑。通过运用`copy`命令可以实现复制到系统粘贴板，限于必须能选中、聚焦。\n\t```\n\tdocument.execCommand('Copy');\n\t```\n\n*\tClipboardEvent()，监听系统中`copy`、`cut`、`paste`等操作。\n<!-- more -->\n\t```\n\tdocument.body.addEventListener('copy',function(e){\n\t\tconsole.log(e);\n\t\te.clipboardData.setData('text/plain','自定义内容');\n\t\te.preventDefault();\t\t//没有阻止，则内容为选中内容\n\t});\n\t```\n\t```\n\te.clipboardData.getData('text/plain');\n\te.clipboardData.clearData('text/plain');\n\t```\n*\t在非IE中clipboardData存在于事件中，而IE中则直接在window中即可得到。","slug":"About clipboard","published":1,"updated":"2017-09-17T10:05:04.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p5p000oa8vu7n8vcvdn","content":"<blockquote>\n<p>   主要</p>\n</blockquote>\n<p>　　JS中实现特定内容的复制，基本依赖于execCommand()、ClipboardEvent()两者的结合。</p>\n<ul>\n<li><p>execCommand()，对选中、聚焦区域的进行操作，多用于文本编辑。通过运用<code>copy</code>命令可以实现复制到系统粘贴板，限于必须能选中、聚焦。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.execCommand(&apos;Copy&apos;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>ClipboardEvent()，监听系统中<code>copy</code>、<code>cut</code>、<code>paste</code>等操作。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.body.addEventListener(&apos;copy&apos;,function(e)&#123;</div><div class=\"line\">\tconsole.log(e);</div><div class=\"line\">\te.clipboardData.setData(&apos;text/plain&apos;,&apos;自定义内容&apos;);</div><div class=\"line\">\te.preventDefault();\t\t//没有阻止，则内容为选中内容</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">e.clipboardData.getData(&apos;text/plain&apos;);</div><div class=\"line\">e.clipboardData.clearData(&apos;text/plain&apos;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>在非IE中clipboardData存在于事件中，而IE中则直接在window中即可得到。</p>\n</li>\n</ul>\n","excerpt":"<blockquote>\n<p>   主要</p>\n</blockquote>\n<p>　　JS中实现特定内容的复制，基本依赖于execCommand()、ClipboardEvent()两者的结合。</p>\n<ul>\n<li><p>execCommand()，对选中、聚焦区域的进行操作，多用于文本编辑。通过运用<code>copy</code>命令可以实现复制到系统粘贴板，限于必须能选中、聚焦。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.execCommand(&apos;Copy&apos;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>ClipboardEvent()，监听系统中<code>copy</code>、<code>cut</code>、<code>paste</code>等操作。</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.body.addEventListener(&apos;copy&apos;,function(e)&#123;</div><div class=\"line\">\tconsole.log(e);</div><div class=\"line\">\te.clipboardData.setData(&apos;text/plain&apos;,&apos;自定义内容&apos;);</div><div class=\"line\">\te.preventDefault();\t\t//没有阻止，则内容为选中内容</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">e.clipboardData.getData(&apos;text/plain&apos;);</div><div class=\"line\">e.clipboardData.clearData(&apos;text/plain&apos;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>在非IE中clipboardData存在于事件中，而IE中则直接在window中即可得到。</p>\n</li>\n</ul>"},{"title":"About　fs","date":"2017-04-08T16:00:00.000Z","_content":"\n>fs　　文件系统\n\n　　文件 I/O 是由简单封装的标准 POSIX 函数提供的。通过 require('fs') 使用该模块。所有的方法都有异步和同步的形式。异步形式始终以完成回调作为它最后一个参数。 传给完成回调的参数取决于具体方法，但第一个参数总是留给异常。 如果操作成功完成，则第一个参数会是 null 或 undefined。当使用同步形式时，任何异常都会被立即抛出。 可以使用 try/catch 来处理异常，或让它们往上冒泡。（以下fs均以已经引进fs模块为前提）\n>常用函数\n\n+\t<b style=\"color:black;font-size:18px;\">fs.readFile(filename,[options],callback);　　读取文件</b>\n\tfilename,　必选参数，文件名 \n\t[options]　可选参数，可指定flag（文件操作选项，如r+ 读写；w+读写，文件不存在则创建）及encoding属性\n\tcallback　读取文件后的回调函数，参数默认第一个err,第二个data数据\n<!---more--->\n+\t<b style=\"color:black;font-size:18px;\">fs.writeFile(filename,data,[options],callback);　　写文件</b>\n\tfilename,　必选参数，文件名\n\tdata, 写入的数据，可以字符或一个Buffer对象\n\t[options]　[options],flag,mode(权限),encoding\n\tcallback　读取文件后的回调函数，参数默认第一个err,第二个data数据\n+\t<b style=\"color:black;font-size:18px;\">fs.appendFile(filename,data,[options],callback);　　以追加方式写文件</b>\n\tfilename,　必选参数，文件名\n\tdata, 写入的数据，可以字符或一个Buffer对象\n\t[options]　[options],flag,mode(权限),encoding\n\tcallback　读取文件后的回调函数，参数默认第一个err,第二个data数据\n+\t<b style=\"color:black;font-size:18px;\">fs.open(filename, flags, [mode], callback);　　打开文件</b>\n\tfilename,　必选参数，文件名\n\tflags, 操作标识，如\"r\",读方式打开\n\t[mode],权限，如777，表示任何用户读写可执行\n\tcallback 打开文件后回调函数，参数默认第一个err,第二个fd为一个整数，表示打开文件返回的文件描述符，window中又称文件句柄\n+\t<b style=\"color:black;font-size:18px;\">fs.read(fd, buffer, offset, length, position, callback);　　读文件，读取打开的文件内容到缓冲区中</b>\n\tfd, 使用fs.open打开成功后返回的文件描述符\n\tbuffer, 一个Buffer对象，v8引擎分配的一段内存\n\toffset, 整数，向缓存区中写入时的初始位置，以字节为单位\n\tlength, 整数，读取文件的长度\n\tposition, 整数，读取文件初始位置；文件大小以字节为单位\n\tcallback(err, bytesRead, buffer), 读取执行完成后回调函数，bytesRead实际读取字节数，被读取的缓存区对象\n+\t<b style=\"color:black;font-size:18px;\">fs.write(fd, buffer, offset, length, position, callback);　　写文件，将缓冲区内数据写入使用fs.open打开的文件</b>\n\tfd, 使用fs.open打开成功后返回的文件描述符\n\tbuffer, 一个Buffer对象，v8引擎分配的一段内存\n\toffset, 整数，从缓存区中读取时的初始位置，以字节为单位\n\tlength, 整数，从缓存区中读取数据的字节数\n\tposition, 整数，写入文件初始位置；\n\tcallback(err, written, buffer), 写入操作执行完成后回调函数，written实际写入字节数，buffer被读取的缓存区对象\n*****\n+\t<b style=\"color:black;font-size:18px;\">fs.mkdir(path, [mode], callback);　　创建目录</b>\n\tpath, 被创建目录的完整路径及目录名；\n\t[mode], 目录权限，默认0777\n\t[callback(err)], 创建完目录回调函数,err错误对象\n+\t<b style=\"color:black;font-size:18px;\">fs.readdir(path, callback);　　读取目录</b>\n\tpath, 要读取目录的完整路径及目录名；\n\t[callback(err, files)], 读完目录回调函数；err错误对象，files数组，存放读取到的目录中的所有文件名\n+\t<b style=\"color:black;font-size:18px;\">fs.stat(path, callback);　　查看文件与目录的信息</b>\n\tpath, 要查看目录/文件的完整路径及名；\n\t[callback(err, stats)], 操作完成回调函数；err错误对象，stat fs.Stat一个对象实例，提供如:isFile, isDirectory,isBlockDevice等方法及size,ctime,mtime等属性\n+\t<b style=\"color:black;font-size:18px;\">fs.exists(path, callback);　　查看文件与目录的是否存在</b>\n\tpath, 要读取目录的完整路径及目录名；\n\t[callback(exists)], 操作完成回调函数；exists true存在，false表示不存在\n+\t<b style=\"color:black;font-size:18px;\">fs.rename(oldPath, newPath, callback);　　移动/重命名文件或目录</b>\n\toldPath, 原目录/文件的完整路径及名；\n\tnewPath, 新目录/文件的完整路径及名；如果新路径与原路径相同，而只文件名不同，则是重命名\n\t[callback(err)], 操作完成回调函数；err操作失败对象\n+\t<b style=\"color:black;font-size:18px;\">fs.rmdir(path, callback);　　删除空目录</b>\n\tpath, 目录的完整路径及目录名；\n\t[callback(err)], 操作完成回调函数；err操作失败对象\n*****\n+\t<b style=\"color:black;font-size:18px;\">fs.utimes(path, atime, mtime, callback);　　修改文件访问时间与修改时间</b>\n\tpath, 要查看目录/文件的完整路径及名；\n\tatime, 新的访问时间\n\tctime, 新的修改时间\n\t[callback(err)], 操作完成回调函数；err操作失败对象\n+\t<b style=\"color:black;font-size:18px;\">fs.utimes(path, mode, callback);　　修改文件或目录的操作权限</b>\n\tpath, 要查看目录/文件的完整路径及名；\n\tmode, 指定权限，如：0666 8进制，权限：所有用户可读、写，\n\t[callback(err)], 操作完成回调函数；err操作失败对象\n*****\n+\t<b style=\"color:black;font-size:18px;\">fs.watchFile(filename, [options], listener);　　对文件进行监视，并且在监视到文件被修改时执行处理</b>\n\tfilename, 完整路径及文件名；\n\t[options], persistent true表示持续监视，不退出程序；interval 单位毫秒，表示每隔多少毫秒监视一次文件\n\tlistener, 文件发生变化时回调，有两个参数：curr为一个fs.Stat对象，被修改后文件，prev,一个fs.Stat对象，表示修改前对象\n+\t<b style=\"color:black;font-size:18px;\">fs.watch(filename, [options], [listener]);　　对文件进行监视，并且在监视到文件被修改时执行处理</b>\n\tfilename, 完整路径及文件名或目录名；\n\t[listener(event, filename], 监听器事件，有两个参数：event 为rename表示指定的文件或目录中有重命名、删除或移动操作或change表示有修改，filename表示发生变化的文件路径\n\tfs.watch返回一个fs.FSWatcher对象，拥有一个close方法，用于停止watch操作；\n\t当fs.watch有文件变化时，会触发fs.FSWatcher对象的change(err, filename)事件，err错误对象，filename发生变化的文件名\n*****\n*****\n>文件流\n\n　　流，在应用程序中表示一组有序的、有起点有终点的字节数据的传输手段；Node.js中实现了stream.Readable/stream.Writeable接口的对象进行流数据读写；以上接口都继承自EventEmitter类，因此在读/写流不同状态时，触发不同事件；关于流读取：Node.js不断将文件一小块内容读入缓冲区，再从缓冲区中读取内容；关于流写入：Node.js不断将流数据写入内在缓冲区，待缓冲区满后再将缓冲区写入到文件中；重复上面操作直到要写入内容写写完；readFile、read、writeFile、write都是将整个文件放入内存而再操作，而则是文件一部分数据一部分数据操作；\n+\t流读取\n\t+\t读取数据对象：\n\t<b style=\"color:black;font-size:18px;\">fs.ReadStream　　读取文件</b>\n\t<b style=\"color:black;font-size:18px;\">http.IncomingMessage　　客户端请求或服务器端响应</b>\n\t<b style=\"color:black;font-size:18px;\">net.Socket　　Socket端口对象</b>\n\t<b style=\"color:black;font-size:18px;\">child.stdout　　子进程标准输出</b>\n\t<b style=\"color:black;font-size:18px;\">child.stdin　　子进程标准入</b>\n\t<b style=\"color:black;font-size:18px;\">process.stdin　　用于创建进程标准输入流</b>\n\t<b style=\"color:black;font-size:18px;\">Gzip、Deflate、DeflateRaw　　数据压缩</b>\n\t+\t触发事件：\n\t<b style=\"color:black;font-size:18px;\">fs.ReadStream　　读取文件</b>\n\t<b style=\"color:black;font-size:18px;\">data　　数据读取后</b>\n\t<b style=\"color:black;font-size:18px;\">end　　数据读取完成时</b>\n\t<b style=\"color:black;font-size:18px;\">error　　数据读取错误时</b>\n\t<b style=\"color:black;font-size:18px;\">close　　关闭流对象时</b>\n\t+\t读取数据的对象操作方法：\n\t<b style=\"color:black;font-size:18px;\">read　　读取数据方法</b>\n\t<b style=\"color:black;font-size:18px;\">setEncoding　　设置读取数据的编</b>\n\t<b style=\"color:black;font-size:18px;\">pause　　通知对象众目停止触发data事件</b>\n\t<b style=\"color:black;font-size:18px;\">resume　　通知对象恢复触发data事件</b>\n\t<b style=\"color:black;font-size:18px;\">unpipe　　取消通道</b>\n\t<b style=\"color:black;font-size:18px;\">unshift   当流数据绑定一个解析器时，此方法取消解析器</b>\n+\t流写入\n\t+\t写数据对象：\n\t<b style=\"color:black;font-size:18px;\">fs.WriteStream　　写入文件对象</b>\n\t<b style=\"color:black;font-size:18px;\">http.clientRequest　　写入HTTP客户端请求数据</b>\n\t<b style=\"color:black;font-size:18px;\">http.ServerResponse　　写入HTTP服务器端响应数据</b>\n\t<b style=\"color:black;font-size:18px;\">net.Socket　　读写TCP流或UNIX流，需要connection事件传递给用户</b>\n\t<b style=\"color:black;font-size:18px;\">child.stdout　　子进程标准输出</b>\n\t<b style=\"color:black;font-size:18px;\">child.stdin　　子进程标准入</b>\n\t<b style=\"color:black;font-size:18px;\">Gzip、Deflate、DeflateRaw　　数据压缩</b>\n\t+\t写入数据触发事件：\n\t<b style=\"color:black;font-size:18px;\">drain　　当write方法返回false时，表示缓存区中已经输出到目标对象中，可以继续写入数据到缓存区</b>\n\t<b style=\"color:black;font-size:18px;\">finish　　当end方法调用，全部数据写入完成</b>\n\t<b style=\"color:black;font-size:18px;\">pipe             当用于读取数据的对象的pipe方法被调用时</b>\n\t<b style=\"color:black;font-size:18px;\">error　　数据读取错误时</b>\n\t<b style=\"color:black;font-size:18px;\">error　　当发生错误</b>\n\t+\t写入数据方法：\n\t<b style=\"color:black;font-size:18px;\">write　　用于写入数据</b>\n\t<b style=\"color:black;font-size:18px;\">end　　结束写入，之后再写入会报错；</b>\n+\t创建读取流\n\t<b style=\"color:black;font-size:18px;\">fs.createReadStream(path, [options]);</b>\n\tpath 文件路径\n\t[options] flags:指定文件操作，默认'r',读操作；encoding,指定读取流编码；autoClose, 是否读取完成后自动关闭，默认true；start指定文件开始读取位置；end指定文件开始读结束位置\n\t```\n\tvar rs = fs.createReadStream(__dirname + '/test.txt', {start: 0, end: 2});\n\trs.on('open', function (fd) {\n\t  console.log('messi is the best one');\n\t});\n\t```\n+\t创建写入流\n\t<b style=\"color:black;font-size:18px;\">fs.createWriteStream(path, [options]);</b>\n\tpath 文件路径\n\t[options] flags:指定文件操作，默认'w',；encoding,指定读取流编码；start指定写入文件的位置\n\t```\n\tvar ws = fs.createWriteStream(__dirname + '/test.txt', {start: 0});\n\tvar buffer = new Buffer('messi is the best one');\n\tws.write(buffer, 'utf8', function (err, buffer) {\n\t\tconsole.log(arguments);\n\t});\n\t```\n+\t管道pipe实现流读写\n\t<b style=\"color:black;font-size:18px;\">rs.pipe(destination, [options]);</b>\n\tdestination 必须一个可写入流数据对象\n\t[opations] end 默认为true，表示读取完成立即关闭文件；\n\t```\n\tvar rs = fs.createReadStream(__dirname + '/test/Until You.mp3');\n\tvar ws = fs.createWriteStream(__dirname + '/test/untiyou.mp3');\n\trs.pipe(ws);\n\trs.on('data', function (data) {\n\t  console.log('success')\n\t});\n\t```\n*****\n*****\n　渺小的搬运工　<span>&hearts;</span>　<a href=\"http://www.jianshu.com/u/a7bbc65dd117\">明明三省</a>\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t","source":"_posts/About fs.md","raw":"---\ntitle: About　fs\ncategories: 甫夸之谈———node\ndate: 2017-04-09\ntags: \"<span style='color: orange;'>fs</span>\"\n---\n\n>fs　　文件系统\n\n　　文件 I/O 是由简单封装的标准 POSIX 函数提供的。通过 require('fs') 使用该模块。所有的方法都有异步和同步的形式。异步形式始终以完成回调作为它最后一个参数。 传给完成回调的参数取决于具体方法，但第一个参数总是留给异常。 如果操作成功完成，则第一个参数会是 null 或 undefined。当使用同步形式时，任何异常都会被立即抛出。 可以使用 try/catch 来处理异常，或让它们往上冒泡。（以下fs均以已经引进fs模块为前提）\n>常用函数\n\n+\t<b style=\"color:black;font-size:18px;\">fs.readFile(filename,[options],callback);　　读取文件</b>\n\tfilename,　必选参数，文件名 \n\t[options]　可选参数，可指定flag（文件操作选项，如r+ 读写；w+读写，文件不存在则创建）及encoding属性\n\tcallback　读取文件后的回调函数，参数默认第一个err,第二个data数据\n<!---more--->\n+\t<b style=\"color:black;font-size:18px;\">fs.writeFile(filename,data,[options],callback);　　写文件</b>\n\tfilename,　必选参数，文件名\n\tdata, 写入的数据，可以字符或一个Buffer对象\n\t[options]　[options],flag,mode(权限),encoding\n\tcallback　读取文件后的回调函数，参数默认第一个err,第二个data数据\n+\t<b style=\"color:black;font-size:18px;\">fs.appendFile(filename,data,[options],callback);　　以追加方式写文件</b>\n\tfilename,　必选参数，文件名\n\tdata, 写入的数据，可以字符或一个Buffer对象\n\t[options]　[options],flag,mode(权限),encoding\n\tcallback　读取文件后的回调函数，参数默认第一个err,第二个data数据\n+\t<b style=\"color:black;font-size:18px;\">fs.open(filename, flags, [mode], callback);　　打开文件</b>\n\tfilename,　必选参数，文件名\n\tflags, 操作标识，如\"r\",读方式打开\n\t[mode],权限，如777，表示任何用户读写可执行\n\tcallback 打开文件后回调函数，参数默认第一个err,第二个fd为一个整数，表示打开文件返回的文件描述符，window中又称文件句柄\n+\t<b style=\"color:black;font-size:18px;\">fs.read(fd, buffer, offset, length, position, callback);　　读文件，读取打开的文件内容到缓冲区中</b>\n\tfd, 使用fs.open打开成功后返回的文件描述符\n\tbuffer, 一个Buffer对象，v8引擎分配的一段内存\n\toffset, 整数，向缓存区中写入时的初始位置，以字节为单位\n\tlength, 整数，读取文件的长度\n\tposition, 整数，读取文件初始位置；文件大小以字节为单位\n\tcallback(err, bytesRead, buffer), 读取执行完成后回调函数，bytesRead实际读取字节数，被读取的缓存区对象\n+\t<b style=\"color:black;font-size:18px;\">fs.write(fd, buffer, offset, length, position, callback);　　写文件，将缓冲区内数据写入使用fs.open打开的文件</b>\n\tfd, 使用fs.open打开成功后返回的文件描述符\n\tbuffer, 一个Buffer对象，v8引擎分配的一段内存\n\toffset, 整数，从缓存区中读取时的初始位置，以字节为单位\n\tlength, 整数，从缓存区中读取数据的字节数\n\tposition, 整数，写入文件初始位置；\n\tcallback(err, written, buffer), 写入操作执行完成后回调函数，written实际写入字节数，buffer被读取的缓存区对象\n*****\n+\t<b style=\"color:black;font-size:18px;\">fs.mkdir(path, [mode], callback);　　创建目录</b>\n\tpath, 被创建目录的完整路径及目录名；\n\t[mode], 目录权限，默认0777\n\t[callback(err)], 创建完目录回调函数,err错误对象\n+\t<b style=\"color:black;font-size:18px;\">fs.readdir(path, callback);　　读取目录</b>\n\tpath, 要读取目录的完整路径及目录名；\n\t[callback(err, files)], 读完目录回调函数；err错误对象，files数组，存放读取到的目录中的所有文件名\n+\t<b style=\"color:black;font-size:18px;\">fs.stat(path, callback);　　查看文件与目录的信息</b>\n\tpath, 要查看目录/文件的完整路径及名；\n\t[callback(err, stats)], 操作完成回调函数；err错误对象，stat fs.Stat一个对象实例，提供如:isFile, isDirectory,isBlockDevice等方法及size,ctime,mtime等属性\n+\t<b style=\"color:black;font-size:18px;\">fs.exists(path, callback);　　查看文件与目录的是否存在</b>\n\tpath, 要读取目录的完整路径及目录名；\n\t[callback(exists)], 操作完成回调函数；exists true存在，false表示不存在\n+\t<b style=\"color:black;font-size:18px;\">fs.rename(oldPath, newPath, callback);　　移动/重命名文件或目录</b>\n\toldPath, 原目录/文件的完整路径及名；\n\tnewPath, 新目录/文件的完整路径及名；如果新路径与原路径相同，而只文件名不同，则是重命名\n\t[callback(err)], 操作完成回调函数；err操作失败对象\n+\t<b style=\"color:black;font-size:18px;\">fs.rmdir(path, callback);　　删除空目录</b>\n\tpath, 目录的完整路径及目录名；\n\t[callback(err)], 操作完成回调函数；err操作失败对象\n*****\n+\t<b style=\"color:black;font-size:18px;\">fs.utimes(path, atime, mtime, callback);　　修改文件访问时间与修改时间</b>\n\tpath, 要查看目录/文件的完整路径及名；\n\tatime, 新的访问时间\n\tctime, 新的修改时间\n\t[callback(err)], 操作完成回调函数；err操作失败对象\n+\t<b style=\"color:black;font-size:18px;\">fs.utimes(path, mode, callback);　　修改文件或目录的操作权限</b>\n\tpath, 要查看目录/文件的完整路径及名；\n\tmode, 指定权限，如：0666 8进制，权限：所有用户可读、写，\n\t[callback(err)], 操作完成回调函数；err操作失败对象\n*****\n+\t<b style=\"color:black;font-size:18px;\">fs.watchFile(filename, [options], listener);　　对文件进行监视，并且在监视到文件被修改时执行处理</b>\n\tfilename, 完整路径及文件名；\n\t[options], persistent true表示持续监视，不退出程序；interval 单位毫秒，表示每隔多少毫秒监视一次文件\n\tlistener, 文件发生变化时回调，有两个参数：curr为一个fs.Stat对象，被修改后文件，prev,一个fs.Stat对象，表示修改前对象\n+\t<b style=\"color:black;font-size:18px;\">fs.watch(filename, [options], [listener]);　　对文件进行监视，并且在监视到文件被修改时执行处理</b>\n\tfilename, 完整路径及文件名或目录名；\n\t[listener(event, filename], 监听器事件，有两个参数：event 为rename表示指定的文件或目录中有重命名、删除或移动操作或change表示有修改，filename表示发生变化的文件路径\n\tfs.watch返回一个fs.FSWatcher对象，拥有一个close方法，用于停止watch操作；\n\t当fs.watch有文件变化时，会触发fs.FSWatcher对象的change(err, filename)事件，err错误对象，filename发生变化的文件名\n*****\n*****\n>文件流\n\n　　流，在应用程序中表示一组有序的、有起点有终点的字节数据的传输手段；Node.js中实现了stream.Readable/stream.Writeable接口的对象进行流数据读写；以上接口都继承自EventEmitter类，因此在读/写流不同状态时，触发不同事件；关于流读取：Node.js不断将文件一小块内容读入缓冲区，再从缓冲区中读取内容；关于流写入：Node.js不断将流数据写入内在缓冲区，待缓冲区满后再将缓冲区写入到文件中；重复上面操作直到要写入内容写写完；readFile、read、writeFile、write都是将整个文件放入内存而再操作，而则是文件一部分数据一部分数据操作；\n+\t流读取\n\t+\t读取数据对象：\n\t<b style=\"color:black;font-size:18px;\">fs.ReadStream　　读取文件</b>\n\t<b style=\"color:black;font-size:18px;\">http.IncomingMessage　　客户端请求或服务器端响应</b>\n\t<b style=\"color:black;font-size:18px;\">net.Socket　　Socket端口对象</b>\n\t<b style=\"color:black;font-size:18px;\">child.stdout　　子进程标准输出</b>\n\t<b style=\"color:black;font-size:18px;\">child.stdin　　子进程标准入</b>\n\t<b style=\"color:black;font-size:18px;\">process.stdin　　用于创建进程标准输入流</b>\n\t<b style=\"color:black;font-size:18px;\">Gzip、Deflate、DeflateRaw　　数据压缩</b>\n\t+\t触发事件：\n\t<b style=\"color:black;font-size:18px;\">fs.ReadStream　　读取文件</b>\n\t<b style=\"color:black;font-size:18px;\">data　　数据读取后</b>\n\t<b style=\"color:black;font-size:18px;\">end　　数据读取完成时</b>\n\t<b style=\"color:black;font-size:18px;\">error　　数据读取错误时</b>\n\t<b style=\"color:black;font-size:18px;\">close　　关闭流对象时</b>\n\t+\t读取数据的对象操作方法：\n\t<b style=\"color:black;font-size:18px;\">read　　读取数据方法</b>\n\t<b style=\"color:black;font-size:18px;\">setEncoding　　设置读取数据的编</b>\n\t<b style=\"color:black;font-size:18px;\">pause　　通知对象众目停止触发data事件</b>\n\t<b style=\"color:black;font-size:18px;\">resume　　通知对象恢复触发data事件</b>\n\t<b style=\"color:black;font-size:18px;\">unpipe　　取消通道</b>\n\t<b style=\"color:black;font-size:18px;\">unshift   当流数据绑定一个解析器时，此方法取消解析器</b>\n+\t流写入\n\t+\t写数据对象：\n\t<b style=\"color:black;font-size:18px;\">fs.WriteStream　　写入文件对象</b>\n\t<b style=\"color:black;font-size:18px;\">http.clientRequest　　写入HTTP客户端请求数据</b>\n\t<b style=\"color:black;font-size:18px;\">http.ServerResponse　　写入HTTP服务器端响应数据</b>\n\t<b style=\"color:black;font-size:18px;\">net.Socket　　读写TCP流或UNIX流，需要connection事件传递给用户</b>\n\t<b style=\"color:black;font-size:18px;\">child.stdout　　子进程标准输出</b>\n\t<b style=\"color:black;font-size:18px;\">child.stdin　　子进程标准入</b>\n\t<b style=\"color:black;font-size:18px;\">Gzip、Deflate、DeflateRaw　　数据压缩</b>\n\t+\t写入数据触发事件：\n\t<b style=\"color:black;font-size:18px;\">drain　　当write方法返回false时，表示缓存区中已经输出到目标对象中，可以继续写入数据到缓存区</b>\n\t<b style=\"color:black;font-size:18px;\">finish　　当end方法调用，全部数据写入完成</b>\n\t<b style=\"color:black;font-size:18px;\">pipe             当用于读取数据的对象的pipe方法被调用时</b>\n\t<b style=\"color:black;font-size:18px;\">error　　数据读取错误时</b>\n\t<b style=\"color:black;font-size:18px;\">error　　当发生错误</b>\n\t+\t写入数据方法：\n\t<b style=\"color:black;font-size:18px;\">write　　用于写入数据</b>\n\t<b style=\"color:black;font-size:18px;\">end　　结束写入，之后再写入会报错；</b>\n+\t创建读取流\n\t<b style=\"color:black;font-size:18px;\">fs.createReadStream(path, [options]);</b>\n\tpath 文件路径\n\t[options] flags:指定文件操作，默认'r',读操作；encoding,指定读取流编码；autoClose, 是否读取完成后自动关闭，默认true；start指定文件开始读取位置；end指定文件开始读结束位置\n\t```\n\tvar rs = fs.createReadStream(__dirname + '/test.txt', {start: 0, end: 2});\n\trs.on('open', function (fd) {\n\t  console.log('messi is the best one');\n\t});\n\t```\n+\t创建写入流\n\t<b style=\"color:black;font-size:18px;\">fs.createWriteStream(path, [options]);</b>\n\tpath 文件路径\n\t[options] flags:指定文件操作，默认'w',；encoding,指定读取流编码；start指定写入文件的位置\n\t```\n\tvar ws = fs.createWriteStream(__dirname + '/test.txt', {start: 0});\n\tvar buffer = new Buffer('messi is the best one');\n\tws.write(buffer, 'utf8', function (err, buffer) {\n\t\tconsole.log(arguments);\n\t});\n\t```\n+\t管道pipe实现流读写\n\t<b style=\"color:black;font-size:18px;\">rs.pipe(destination, [options]);</b>\n\tdestination 必须一个可写入流数据对象\n\t[opations] end 默认为true，表示读取完成立即关闭文件；\n\t```\n\tvar rs = fs.createReadStream(__dirname + '/test/Until You.mp3');\n\tvar ws = fs.createWriteStream(__dirname + '/test/untiyou.mp3');\n\trs.pipe(ws);\n\trs.on('data', function (data) {\n\t  console.log('success')\n\t});\n\t```\n*****\n*****\n　渺小的搬运工　<span>&hearts;</span>　<a href=\"http://www.jianshu.com/u/a7bbc65dd117\">明明三省</a>\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t","slug":"About fs","published":1,"updated":"2017-05-21T02:46:35.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p5s000qa8vub9qmr1u6","content":"<blockquote>\n<p>fs　　文件系统</p>\n</blockquote>\n<p>　　文件 I/O 是由简单封装的标准 POSIX 函数提供的。通过 require(‘fs’) 使用该模块。所有的方法都有异步和同步的形式。异步形式始终以完成回调作为它最后一个参数。 传给完成回调的参数取决于具体方法，但第一个参数总是留给异常。 如果操作成功完成，则第一个参数会是 null 或 undefined。当使用同步形式时，任何异常都会被立即抛出。 可以使用 try/catch 来处理异常，或让它们往上冒泡。（以下fs均以已经引进fs模块为前提）</p>\n<blockquote>\n<p>常用函数</p>\n</blockquote>\n<ul>\n<li><b style=\"color:black;font-size:18px;\">fs.readFile(filename,[options],callback);　　读取文件</b><br>filename,　必选参数，文件名<br>[options]　可选参数，可指定flag（文件操作选项，如r+ 读写；w+读写，文件不存在则创建）及encoding属性<br>callback　读取文件后的回调函数，参数默认第一个err,第二个data数据<a id=\"more\"></a></li>\n<li><b style=\"color:black;font-size:18px;\">fs.writeFile(filename,data,[options],callback);　　写文件</b><br>filename,　必选参数，文件名<br>data, 写入的数据，可以字符或一个Buffer对象<br>[options]　[options],flag,mode(权限),encoding<br>callback　读取文件后的回调函数，参数默认第一个err,第二个data数据</li>\n<li><b style=\"color:black;font-size:18px;\">fs.appendFile(filename,data,[options],callback);　　以追加方式写文件</b><br>filename,　必选参数，文件名<br>data, 写入的数据，可以字符或一个Buffer对象<br>[options]　[options],flag,mode(权限),encoding<br>callback　读取文件后的回调函数，参数默认第一个err,第二个data数据</li>\n<li><b style=\"color:black;font-size:18px;\">fs.open(filename, flags, [mode], callback);　　打开文件</b><br>filename,　必选参数，文件名<br>flags, 操作标识，如”r”,读方式打开<br>[mode],权限，如777，表示任何用户读写可执行<br>callback 打开文件后回调函数，参数默认第一个err,第二个fd为一个整数，表示打开文件返回的文件描述符，window中又称文件句柄</li>\n<li><b style=\"color:black;font-size:18px;\">fs.read(fd, buffer, offset, length, position, callback);　　读文件，读取打开的文件内容到缓冲区中</b><br>fd, 使用fs.open打开成功后返回的文件描述符<br>buffer, 一个Buffer对象，v8引擎分配的一段内存<br>offset, 整数，向缓存区中写入时的初始位置，以字节为单位<br>length, 整数，读取文件的长度<br>position, 整数，读取文件初始位置；文件大小以字节为单位<br>callback(err, bytesRead, buffer), 读取执行完成后回调函数，bytesRead实际读取字节数，被读取的缓存区对象</li>\n<li><b style=\"color:black;font-size:18px;\">fs.write(fd, buffer, offset, length, position, callback);　　写文件，将缓冲区内数据写入使用fs.open打开的文件</b><br>fd, 使用fs.open打开成功后返回的文件描述符<br>buffer, 一个Buffer对象，v8引擎分配的一段内存<br>offset, 整数，从缓存区中读取时的初始位置，以字节为单位<br>length, 整数，从缓存区中读取数据的字节数<br>position, 整数，写入文件初始位置；<br>callback(err, written, buffer), 写入操作执行完成后回调函数，written实际写入字节数，buffer被读取的缓存区对象</li>\n</ul>\n<hr>\n<ul>\n<li><b style=\"color:black;font-size:18px;\">fs.mkdir(path, [mode], callback);　　创建目录</b><br>path, 被创建目录的完整路径及目录名；<br>[mode], 目录权限，默认0777<br>[callback(err)], 创建完目录回调函数,err错误对象</li>\n<li><b style=\"color:black;font-size:18px;\">fs.readdir(path, callback);　　读取目录</b><br>path, 要读取目录的完整路径及目录名；<br>[callback(err, files)], 读完目录回调函数；err错误对象，files数组，存放读取到的目录中的所有文件名</li>\n<li><b style=\"color:black;font-size:18px;\">fs.stat(path, callback);　　查看文件与目录的信息</b><br>path, 要查看目录/文件的完整路径及名；<br>[callback(err, stats)], 操作完成回调函数；err错误对象，stat fs.Stat一个对象实例，提供如:isFile, isDirectory,isBlockDevice等方法及size,ctime,mtime等属性</li>\n<li><b style=\"color:black;font-size:18px;\">fs.exists(path, callback);　　查看文件与目录的是否存在</b><br>path, 要读取目录的完整路径及目录名；<br>[callback(exists)], 操作完成回调函数；exists true存在，false表示不存在</li>\n<li><b style=\"color:black;font-size:18px;\">fs.rename(oldPath, newPath, callback);　　移动/重命名文件或目录</b><br>oldPath, 原目录/文件的完整路径及名；<br>newPath, 新目录/文件的完整路径及名；如果新路径与原路径相同，而只文件名不同，则是重命名<br>[callback(err)], 操作完成回调函数；err操作失败对象</li>\n<li><b style=\"color:black;font-size:18px;\">fs.rmdir(path, callback);　　删除空目录</b><br>path, 目录的完整路径及目录名；<br>[callback(err)], 操作完成回调函数；err操作失败对象</li>\n</ul>\n<hr>\n<ul>\n<li><b style=\"color:black;font-size:18px;\">fs.utimes(path, atime, mtime, callback);　　修改文件访问时间与修改时间</b><br>path, 要查看目录/文件的完整路径及名；<br>atime, 新的访问时间<br>ctime, 新的修改时间<br>[callback(err)], 操作完成回调函数；err操作失败对象</li>\n<li><b style=\"color:black;font-size:18px;\">fs.utimes(path, mode, callback);　　修改文件或目录的操作权限</b><br>path, 要查看目录/文件的完整路径及名；<br>mode, 指定权限，如：0666 8进制，权限：所有用户可读、写，<br>[callback(err)], 操作完成回调函数；err操作失败对象</li>\n</ul>\n<hr>\n<ul>\n<li><b style=\"color:black;font-size:18px;\">fs.watchFile(filename, [options], listener);　　对文件进行监视，并且在监视到文件被修改时执行处理</b><br>filename, 完整路径及文件名；<br>[options], persistent true表示持续监视，不退出程序；interval 单位毫秒，表示每隔多少毫秒监视一次文件<br>listener, 文件发生变化时回调，有两个参数：curr为一个fs.Stat对象，被修改后文件，prev,一个fs.Stat对象，表示修改前对象</li>\n<li><b style=\"color:black;font-size:18px;\">fs.watch(filename, [options], [listener]);　　对文件进行监视，并且在监视到文件被修改时执行处理</b><br>filename, 完整路径及文件名或目录名；<br>[listener(event, filename], 监听器事件，有两个参数：event 为rename表示指定的文件或目录中有重命名、删除或移动操作或change表示有修改，filename表示发生变化的文件路径<br>fs.watch返回一个fs.FSWatcher对象，拥有一个close方法，用于停止watch操作；<br>当fs.watch有文件变化时，会触发fs.FSWatcher对象的change(err, filename)事件，err错误对象，filename发生变化的文件名</li>\n</ul>\n<hr>\n<hr>\n<blockquote>\n<p>文件流</p>\n</blockquote>\n<p>　　流，在应用程序中表示一组有序的、有起点有终点的字节数据的传输手段；Node.js中实现了stream.Readable/stream.Writeable接口的对象进行流数据读写；以上接口都继承自EventEmitter类，因此在读/写流不同状态时，触发不同事件；关于流读取：Node.js不断将文件一小块内容读入缓冲区，再从缓冲区中读取内容；关于流写入：Node.js不断将流数据写入内在缓冲区，待缓冲区满后再将缓冲区写入到文件中；重复上面操作直到要写入内容写写完；readFile、read、writeFile、write都是将整个文件放入内存而再操作，而则是文件一部分数据一部分数据操作；</p>\n<ul>\n<li>流读取<ul>\n<li>读取数据对象：<br><b style=\"color:black;font-size:18px;\">fs.ReadStream　　读取文件</b><br><b style=\"color:black;font-size:18px;\">http.IncomingMessage　　客户端请求或服务器端响应</b><br><b style=\"color:black;font-size:18px;\">net.Socket　　Socket端口对象</b><br><b style=\"color:black;font-size:18px;\">child.stdout　　子进程标准输出</b><br><b style=\"color:black;font-size:18px;\">child.stdin　　子进程标准入</b><br><b style=\"color:black;font-size:18px;\">process.stdin　　用于创建进程标准输入流</b><br><b style=\"color:black;font-size:18px;\">Gzip、Deflate、DeflateRaw　　数据压缩</b></li>\n<li>触发事件：<br><b style=\"color:black;font-size:18px;\">fs.ReadStream　　读取文件</b><br><b style=\"color:black;font-size:18px;\">data　　数据读取后</b><br><b style=\"color:black;font-size:18px;\">end　　数据读取完成时</b><br><b style=\"color:black;font-size:18px;\">error　　数据读取错误时</b><br><b style=\"color:black;font-size:18px;\">close　　关闭流对象时</b></li>\n<li>读取数据的对象操作方法：<br><b style=\"color:black;font-size:18px;\">read　　读取数据方法</b><br><b style=\"color:black;font-size:18px;\">setEncoding　　设置读取数据的编</b><br><b style=\"color:black;font-size:18px;\">pause　　通知对象众目停止触发data事件</b><br><b style=\"color:black;font-size:18px;\">resume　　通知对象恢复触发data事件</b><br><b style=\"color:black;font-size:18px;\">unpipe　　取消通道</b><br><b style=\"color:black;font-size:18px;\">unshift   当流数据绑定一个解析器时，此方法取消解析器</b></li>\n</ul>\n</li>\n<li>流写入<ul>\n<li>写数据对象：<br><b style=\"color:black;font-size:18px;\">fs.WriteStream　　写入文件对象</b><br><b style=\"color:black;font-size:18px;\">http.clientRequest　　写入HTTP客户端请求数据</b><br><b style=\"color:black;font-size:18px;\">http.ServerResponse　　写入HTTP服务器端响应数据</b><br><b style=\"color:black;font-size:18px;\">net.Socket　　读写TCP流或UNIX流，需要connection事件传递给用户</b><br><b style=\"color:black;font-size:18px;\">child.stdout　　子进程标准输出</b><br><b style=\"color:black;font-size:18px;\">child.stdin　　子进程标准入</b><br><b style=\"color:black;font-size:18px;\">Gzip、Deflate、DeflateRaw　　数据压缩</b></li>\n<li>写入数据触发事件：<br><b style=\"color:black;font-size:18px;\">drain　　当write方法返回false时，表示缓存区中已经输出到目标对象中，可以继续写入数据到缓存区</b><br><b style=\"color:black;font-size:18px;\">finish　　当end方法调用，全部数据写入完成</b><br><b style=\"color:black;font-size:18px;\">pipe             当用于读取数据的对象的pipe方法被调用时</b><br><b style=\"color:black;font-size:18px;\">error　　数据读取错误时</b><br><b style=\"color:black;font-size:18px;\">error　　当发生错误</b></li>\n<li>写入数据方法：<br><b style=\"color:black;font-size:18px;\">write　　用于写入数据</b><br><b style=\"color:black;font-size:18px;\">end　　结束写入，之后再写入会报错；</b></li>\n</ul>\n</li>\n<li><p>创建读取流<br><b style=\"color:black;font-size:18px;\">fs.createReadStream(path, [options]);</b><br>path 文件路径<br>[options] flags:指定文件操作，默认’r’,读操作；encoding,指定读取流编码；autoClose, 是否读取完成后自动关闭，默认true；start指定文件开始读取位置；end指定文件开始读结束位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var rs = fs.createReadStream(__dirname + &apos;/test.txt&apos;, &#123;start: 0, end: 2&#125;);</div><div class=\"line\">rs.on(&apos;open&apos;, function (fd) &#123;</div><div class=\"line\">  console.log(&apos;messi is the best one&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建写入流<br><b style=\"color:black;font-size:18px;\">fs.createWriteStream(path, [options]);</b><br>path 文件路径<br>[options] flags:指定文件操作，默认’w’,；encoding,指定读取流编码；start指定写入文件的位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ws = fs.createWriteStream(__dirname + &apos;/test.txt&apos;, &#123;start: 0&#125;);</div><div class=\"line\">var buffer = new Buffer(&apos;messi is the best one&apos;);</div><div class=\"line\">ws.write(buffer, &apos;utf8&apos;, function (err, buffer) &#123;</div><div class=\"line\">\tconsole.log(arguments);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>管道pipe实现流读写<br><b style=\"color:black;font-size:18px;\">rs.pipe(destination, [options]);</b><br>destination 必须一个可写入流数据对象<br>[opations] end 默认为true，表示读取完成立即关闭文件；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var rs = fs.createReadStream(__dirname + &apos;/test/Until You.mp3&apos;);</div><div class=\"line\">var ws = fs.createWriteStream(__dirname + &apos;/test/untiyou.mp3&apos;);</div><div class=\"line\">rs.pipe(ws);</div><div class=\"line\">rs.on(&apos;data&apos;, function (data) &#123;</div><div class=\"line\">  console.log(&apos;success&apos;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<hr>\n<p>　渺小的搬运工　<span>&hearts;</span>　<a href=\"http://www.jianshu.com/u/a7bbc65dd117\" target=\"_blank\" rel=\"external\">明明三省</a></p>\n","excerpt":"<blockquote>\n<p>fs　　文件系统</p>\n</blockquote>\n<p>　　文件 I/O 是由简单封装的标准 POSIX 函数提供的。通过 require(‘fs’) 使用该模块。所有的方法都有异步和同步的形式。异步形式始终以完成回调作为它最后一个参数。 传给完成回调的参数取决于具体方法，但第一个参数总是留给异常。 如果操作成功完成，则第一个参数会是 null 或 undefined。当使用同步形式时，任何异常都会被立即抛出。 可以使用 try/catch 来处理异常，或让它们往上冒泡。（以下fs均以已经引进fs模块为前提）</p>\n<blockquote>\n<p>常用函数</p>\n</blockquote>\n<ul>\n<li><b style=\"color:black;font-size:18px;\">fs.readFile(filename,[options],callback);　　读取文件</b><br>filename,　必选参数，文件名<br>[options]　可选参数，可指定flag（文件操作选项，如r+ 读写；w+读写，文件不存在则创建）及encoding属性<br>callback　读取文件后的回调函数，参数默认第一个err,第二个data数据","more":"</li>\n<li><b style=\"color:black;font-size:18px;\">fs.writeFile(filename,data,[options],callback);　　写文件</b><br>filename,　必选参数，文件名<br>data, 写入的数据，可以字符或一个Buffer对象<br>[options]　[options],flag,mode(权限),encoding<br>callback　读取文件后的回调函数，参数默认第一个err,第二个data数据</li>\n<li><b style=\"color:black;font-size:18px;\">fs.appendFile(filename,data,[options],callback);　　以追加方式写文件</b><br>filename,　必选参数，文件名<br>data, 写入的数据，可以字符或一个Buffer对象<br>[options]　[options],flag,mode(权限),encoding<br>callback　读取文件后的回调函数，参数默认第一个err,第二个data数据</li>\n<li><b style=\"color:black;font-size:18px;\">fs.open(filename, flags, [mode], callback);　　打开文件</b><br>filename,　必选参数，文件名<br>flags, 操作标识，如”r”,读方式打开<br>[mode],权限，如777，表示任何用户读写可执行<br>callback 打开文件后回调函数，参数默认第一个err,第二个fd为一个整数，表示打开文件返回的文件描述符，window中又称文件句柄</li>\n<li><b style=\"color:black;font-size:18px;\">fs.read(fd, buffer, offset, length, position, callback);　　读文件，读取打开的文件内容到缓冲区中</b><br>fd, 使用fs.open打开成功后返回的文件描述符<br>buffer, 一个Buffer对象，v8引擎分配的一段内存<br>offset, 整数，向缓存区中写入时的初始位置，以字节为单位<br>length, 整数，读取文件的长度<br>position, 整数，读取文件初始位置；文件大小以字节为单位<br>callback(err, bytesRead, buffer), 读取执行完成后回调函数，bytesRead实际读取字节数，被读取的缓存区对象</li>\n<li><b style=\"color:black;font-size:18px;\">fs.write(fd, buffer, offset, length, position, callback);　　写文件，将缓冲区内数据写入使用fs.open打开的文件</b><br>fd, 使用fs.open打开成功后返回的文件描述符<br>buffer, 一个Buffer对象，v8引擎分配的一段内存<br>offset, 整数，从缓存区中读取时的初始位置，以字节为单位<br>length, 整数，从缓存区中读取数据的字节数<br>position, 整数，写入文件初始位置；<br>callback(err, written, buffer), 写入操作执行完成后回调函数，written实际写入字节数，buffer被读取的缓存区对象</li>\n</ul>\n<hr>\n<ul>\n<li><b style=\"color:black;font-size:18px;\">fs.mkdir(path, [mode], callback);　　创建目录</b><br>path, 被创建目录的完整路径及目录名；<br>[mode], 目录权限，默认0777<br>[callback(err)], 创建完目录回调函数,err错误对象</li>\n<li><b style=\"color:black;font-size:18px;\">fs.readdir(path, callback);　　读取目录</b><br>path, 要读取目录的完整路径及目录名；<br>[callback(err, files)], 读完目录回调函数；err错误对象，files数组，存放读取到的目录中的所有文件名</li>\n<li><b style=\"color:black;font-size:18px;\">fs.stat(path, callback);　　查看文件与目录的信息</b><br>path, 要查看目录/文件的完整路径及名；<br>[callback(err, stats)], 操作完成回调函数；err错误对象，stat fs.Stat一个对象实例，提供如:isFile, isDirectory,isBlockDevice等方法及size,ctime,mtime等属性</li>\n<li><b style=\"color:black;font-size:18px;\">fs.exists(path, callback);　　查看文件与目录的是否存在</b><br>path, 要读取目录的完整路径及目录名；<br>[callback(exists)], 操作完成回调函数；exists true存在，false表示不存在</li>\n<li><b style=\"color:black;font-size:18px;\">fs.rename(oldPath, newPath, callback);　　移动/重命名文件或目录</b><br>oldPath, 原目录/文件的完整路径及名；<br>newPath, 新目录/文件的完整路径及名；如果新路径与原路径相同，而只文件名不同，则是重命名<br>[callback(err)], 操作完成回调函数；err操作失败对象</li>\n<li><b style=\"color:black;font-size:18px;\">fs.rmdir(path, callback);　　删除空目录</b><br>path, 目录的完整路径及目录名；<br>[callback(err)], 操作完成回调函数；err操作失败对象</li>\n</ul>\n<hr>\n<ul>\n<li><b style=\"color:black;font-size:18px;\">fs.utimes(path, atime, mtime, callback);　　修改文件访问时间与修改时间</b><br>path, 要查看目录/文件的完整路径及名；<br>atime, 新的访问时间<br>ctime, 新的修改时间<br>[callback(err)], 操作完成回调函数；err操作失败对象</li>\n<li><b style=\"color:black;font-size:18px;\">fs.utimes(path, mode, callback);　　修改文件或目录的操作权限</b><br>path, 要查看目录/文件的完整路径及名；<br>mode, 指定权限，如：0666 8进制，权限：所有用户可读、写，<br>[callback(err)], 操作完成回调函数；err操作失败对象</li>\n</ul>\n<hr>\n<ul>\n<li><b style=\"color:black;font-size:18px;\">fs.watchFile(filename, [options], listener);　　对文件进行监视，并且在监视到文件被修改时执行处理</b><br>filename, 完整路径及文件名；<br>[options], persistent true表示持续监视，不退出程序；interval 单位毫秒，表示每隔多少毫秒监视一次文件<br>listener, 文件发生变化时回调，有两个参数：curr为一个fs.Stat对象，被修改后文件，prev,一个fs.Stat对象，表示修改前对象</li>\n<li><b style=\"color:black;font-size:18px;\">fs.watch(filename, [options], [listener]);　　对文件进行监视，并且在监视到文件被修改时执行处理</b><br>filename, 完整路径及文件名或目录名；<br>[listener(event, filename], 监听器事件，有两个参数：event 为rename表示指定的文件或目录中有重命名、删除或移动操作或change表示有修改，filename表示发生变化的文件路径<br>fs.watch返回一个fs.FSWatcher对象，拥有一个close方法，用于停止watch操作；<br>当fs.watch有文件变化时，会触发fs.FSWatcher对象的change(err, filename)事件，err错误对象，filename发生变化的文件名</li>\n</ul>\n<hr>\n<hr>\n<blockquote>\n<p>文件流</p>\n</blockquote>\n<p>　　流，在应用程序中表示一组有序的、有起点有终点的字节数据的传输手段；Node.js中实现了stream.Readable/stream.Writeable接口的对象进行流数据读写；以上接口都继承自EventEmitter类，因此在读/写流不同状态时，触发不同事件；关于流读取：Node.js不断将文件一小块内容读入缓冲区，再从缓冲区中读取内容；关于流写入：Node.js不断将流数据写入内在缓冲区，待缓冲区满后再将缓冲区写入到文件中；重复上面操作直到要写入内容写写完；readFile、read、writeFile、write都是将整个文件放入内存而再操作，而则是文件一部分数据一部分数据操作；</p>\n<ul>\n<li>流读取<ul>\n<li>读取数据对象：<br><b style=\"color:black;font-size:18px;\">fs.ReadStream　　读取文件</b><br><b style=\"color:black;font-size:18px;\">http.IncomingMessage　　客户端请求或服务器端响应</b><br><b style=\"color:black;font-size:18px;\">net.Socket　　Socket端口对象</b><br><b style=\"color:black;font-size:18px;\">child.stdout　　子进程标准输出</b><br><b style=\"color:black;font-size:18px;\">child.stdin　　子进程标准入</b><br><b style=\"color:black;font-size:18px;\">process.stdin　　用于创建进程标准输入流</b><br><b style=\"color:black;font-size:18px;\">Gzip、Deflate、DeflateRaw　　数据压缩</b></li>\n<li>触发事件：<br><b style=\"color:black;font-size:18px;\">fs.ReadStream　　读取文件</b><br><b style=\"color:black;font-size:18px;\">data　　数据读取后</b><br><b style=\"color:black;font-size:18px;\">end　　数据读取完成时</b><br><b style=\"color:black;font-size:18px;\">error　　数据读取错误时</b><br><b style=\"color:black;font-size:18px;\">close　　关闭流对象时</b></li>\n<li>读取数据的对象操作方法：<br><b style=\"color:black;font-size:18px;\">read　　读取数据方法</b><br><b style=\"color:black;font-size:18px;\">setEncoding　　设置读取数据的编</b><br><b style=\"color:black;font-size:18px;\">pause　　通知对象众目停止触发data事件</b><br><b style=\"color:black;font-size:18px;\">resume　　通知对象恢复触发data事件</b><br><b style=\"color:black;font-size:18px;\">unpipe　　取消通道</b><br><b style=\"color:black;font-size:18px;\">unshift   当流数据绑定一个解析器时，此方法取消解析器</b></li>\n</ul>\n</li>\n<li>流写入<ul>\n<li>写数据对象：<br><b style=\"color:black;font-size:18px;\">fs.WriteStream　　写入文件对象</b><br><b style=\"color:black;font-size:18px;\">http.clientRequest　　写入HTTP客户端请求数据</b><br><b style=\"color:black;font-size:18px;\">http.ServerResponse　　写入HTTP服务器端响应数据</b><br><b style=\"color:black;font-size:18px;\">net.Socket　　读写TCP流或UNIX流，需要connection事件传递给用户</b><br><b style=\"color:black;font-size:18px;\">child.stdout　　子进程标准输出</b><br><b style=\"color:black;font-size:18px;\">child.stdin　　子进程标准入</b><br><b style=\"color:black;font-size:18px;\">Gzip、Deflate、DeflateRaw　　数据压缩</b></li>\n<li>写入数据触发事件：<br><b style=\"color:black;font-size:18px;\">drain　　当write方法返回false时，表示缓存区中已经输出到目标对象中，可以继续写入数据到缓存区</b><br><b style=\"color:black;font-size:18px;\">finish　　当end方法调用，全部数据写入完成</b><br><b style=\"color:black;font-size:18px;\">pipe             当用于读取数据的对象的pipe方法被调用时</b><br><b style=\"color:black;font-size:18px;\">error　　数据读取错误时</b><br><b style=\"color:black;font-size:18px;\">error　　当发生错误</b></li>\n<li>写入数据方法：<br><b style=\"color:black;font-size:18px;\">write　　用于写入数据</b><br><b style=\"color:black;font-size:18px;\">end　　结束写入，之后再写入会报错；</b></li>\n</ul>\n</li>\n<li><p>创建读取流<br><b style=\"color:black;font-size:18px;\">fs.createReadStream(path, [options]);</b><br>path 文件路径<br>[options] flags:指定文件操作，默认’r’,读操作；encoding,指定读取流编码；autoClose, 是否读取完成后自动关闭，默认true；start指定文件开始读取位置；end指定文件开始读结束位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var rs = fs.createReadStream(__dirname + &apos;/test.txt&apos;, &#123;start: 0, end: 2&#125;);</div><div class=\"line\">rs.on(&apos;open&apos;, function (fd) &#123;</div><div class=\"line\">  console.log(&apos;messi is the best one&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建写入流<br><b style=\"color:black;font-size:18px;\">fs.createWriteStream(path, [options]);</b><br>path 文件路径<br>[options] flags:指定文件操作，默认’w’,；encoding,指定读取流编码；start指定写入文件的位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ws = fs.createWriteStream(__dirname + &apos;/test.txt&apos;, &#123;start: 0&#125;);</div><div class=\"line\">var buffer = new Buffer(&apos;messi is the best one&apos;);</div><div class=\"line\">ws.write(buffer, &apos;utf8&apos;, function (err, buffer) &#123;</div><div class=\"line\">\tconsole.log(arguments);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>管道pipe实现流读写<br><b style=\"color:black;font-size:18px;\">rs.pipe(destination, [options]);</b><br>destination 必须一个可写入流数据对象<br>[opations] end 默认为true，表示读取完成立即关闭文件；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var rs = fs.createReadStream(__dirname + &apos;/test/Until You.mp3&apos;);</div><div class=\"line\">var ws = fs.createWriteStream(__dirname + &apos;/test/untiyou.mp3&apos;);</div><div class=\"line\">rs.pipe(ws);</div><div class=\"line\">rs.on(&apos;data&apos;, function (data) &#123;</div><div class=\"line\">  console.log(&apos;success&apos;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<hr>\n<p>　渺小的搬运工　<span>&hearts;</span>　<a href=\"http://www.jianshu.com/u/a7bbc65dd117\">明明三省</a></p>"},{"title":"About　Git SSH","date":"2016-08-10T16:00:00.000Z","_content":">设置SSH公钥的方法\n\n* git Bash\n* ssh-keygen -t rsa -C \"邮箱\"\n* 一路Enter，直到生成一个图形，此时电脑里会生成一个文件夹\n* C盘-->用户-->Administrator-->.ssh-->复制id_rsa.pub里面的内容（这个是公钥可以告诉任何人，id_rsa是私钥，千万不要泄露）,粘贴到添加公钥的地方，标题会自动生成\n* 在git中运行ssh -T git@github.com，后面yes，如果提示welcome和用户名，就表示成功了\n\n>用VSCode对项目进行提交和推送\n\n* 项目列表中切换到SSH，复制路径，在git Bash中进行克隆\n* 在克隆的项目文件中进行改动后，提交，然后在VSCode中Git有上角点出复选项，选择【推送】，则可以与远程代码库进行同步","source":"_posts/About git ssh.md","raw":"---\ntitle: About　Git SSH\ntags: Git\ndate: 2016-08-11\ncategories: 甫夸之谈————Git \n---\n>设置SSH公钥的方法\n\n* git Bash\n* ssh-keygen -t rsa -C \"邮箱\"\n* 一路Enter，直到生成一个图形，此时电脑里会生成一个文件夹\n* C盘-->用户-->Administrator-->.ssh-->复制id_rsa.pub里面的内容（这个是公钥可以告诉任何人，id_rsa是私钥，千万不要泄露）,粘贴到添加公钥的地方，标题会自动生成\n* 在git中运行ssh -T git@github.com，后面yes，如果提示welcome和用户名，就表示成功了\n\n>用VSCode对项目进行提交和推送\n\n* 项目列表中切换到SSH，复制路径，在git Bash中进行克隆\n* 在克隆的项目文件中进行改动后，提交，然后在VSCode中Git有上角点出复选项，选择【推送】，则可以与远程代码库进行同步","slug":"About git ssh","published":1,"updated":"2017-05-21T02:52:00.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p5v000ua8vufo778plr","content":"<blockquote>\n<p>设置SSH公钥的方法</p>\n</blockquote>\n<ul>\n<li>git Bash</li>\n<li>ssh-keygen -t rsa -C “邮箱”</li>\n<li>一路Enter，直到生成一个图形，此时电脑里会生成一个文件夹</li>\n<li>C盘–&gt;用户–&gt;Administrator–&gt;.ssh–&gt;复制id_rsa.pub里面的内容（这个是公钥可以告诉任何人，id_rsa是私钥，千万不要泄露）,粘贴到添加公钥的地方，标题会自动生成</li>\n<li>在git中运行ssh -T git@github.com，后面yes，如果提示welcome和用户名，就表示成功了</li>\n</ul>\n<blockquote>\n<p>用VSCode对项目进行提交和推送</p>\n</blockquote>\n<ul>\n<li>项目列表中切换到SSH，复制路径，在git Bash中进行克隆</li>\n<li>在克隆的项目文件中进行改动后，提交，然后在VSCode中Git有上角点出复选项，选择【推送】，则可以与远程代码库进行同步</li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>设置SSH公钥的方法</p>\n</blockquote>\n<ul>\n<li>git Bash</li>\n<li>ssh-keygen -t rsa -C “邮箱”</li>\n<li>一路Enter，直到生成一个图形，此时电脑里会生成一个文件夹</li>\n<li>C盘–&gt;用户–&gt;Administrator–&gt;.ssh–&gt;复制id_rsa.pub里面的内容（这个是公钥可以告诉任何人，id_rsa是私钥，千万不要泄露）,粘贴到添加公钥的地方，标题会自动生成</li>\n<li>在git中运行ssh -T git@github.com，后面yes，如果提示welcome和用户名，就表示成功了</li>\n</ul>\n<blockquote>\n<p>用VSCode对项目进行提交和推送</p>\n</blockquote>\n<ul>\n<li>项目列表中切换到SSH，复制路径，在git Bash中进行克隆</li>\n<li>在克隆的项目文件中进行改动后，提交，然后在VSCode中Git有上角点出复选项，选择【推送】，则可以与远程代码库进行同步</li>\n</ul>\n"},{"title":"About　Gulp","date":"2016-08-21T16:00:00.000Z","_content":"\n> <h1>关于</h1>\n\n　gulp是前端开发过程中一种基于流的代码构建工具，是自动化项目的构建利器。它是基于nodejs的自动任务运行器，能够自动化地完成js、css、html/image、less等文件的测试、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并可以监听文件在改动后重复指定的这些步骤。事实上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。\n\n> <h1>安装</h1>\n\n* 在安装nodejs环境后，以全局方式安装gulp\n    `npm install -g gulp`\n* 在全局安装gulp之后，还需要再每个要使用gulp的项目中单独安装一次。在项目文件夹中执行以下命令\n    `npm install gulp --save`\n<!---more--->\n\n> <h1>使用</h1>\n\n* 建立gulpfiles文件\n\tgulp需要一个叫做gulpfiles.js的文件作为主文件\n* 运行gulp任务\n\tgulp中的功能的实现方式是通过运行相关任务的形式。在主文件中执行以下命令可以进行简单测试。如果没有指定任务名称，默认执行default任务。\n\n\n\tvar gulp  = require('gulp');\n\tgulp.task('default',function(){\n\t\tconsole.log('hello world');\n\t});\n\n> <h1>工作方式</h1>\n\n\n　在gulp中，工作方式使用的是nodejs中的stream（流），然后通过stream的pipe()方法把流导入到想要的地方，比如gulp的插件中，经过插件处理后又可以继续导入到其他插件中，也可以把流写入到文件中。\n　gulp的使用流程一般是，首先通过gulp.src()方法获得想要处理的文件流，然后把文件流通过pipe()方法导入到gulp的插件中，最后把经过处理的流再通过pipe()导入到gulp.dest()中，gulp.dest()方法则把流中的内容写入到文件中\t\n\n---\n\n<H2>gulp.src(globs[, options])</H2>\n\n　输出（Emits）符合所提供的匹配模式（glob）或者匹配模式的数组（array of globs）的文件。 将返回一个 Vinyl files 的 stream 它可以被 piped 到别的插件中。　\n　<b>[glob](https://github.com/isaacs/node-glob) </b>请参考 node-glob 语法 或者，你也可以直接写文件的路径。\n\n\n<b>globs</b>\n　类型： String 或 Array.所要读取的 glob 或者包含 globs 的数组。\n<b>options</b>\n　类型： Object.通过 glob-stream 所传递给 node-glob 的参数。除了 node-glob 和 glob-stream 所支持的参数外，gulp 增加了一些额外的选项参数：\n<b>options.buffer</b>\n　类型： Boolean 默认值： true.如果该项被设置为 false，那么将会以 stream 方式返回 file.contents 而不是文件 buffer 的形式。这在处理一些大文件的时候将会很有用。**注意：**插件可能并不会实现对 stream 的支持。\n<b>options.read</b>\n　类型： Boolean 默认值： true.如果该项被设置为 false， 那么 file.contents 会返回空值（null），也就是并不会去读取文件。\n<b>options.base</b>\n　类型： String 默认值： 将会加在 glob 之前.\n\n---\n\n<h2>gulp.dest(path[, options])</h2>\n\n　能被 pipe 进来，并且将会写文件。并且重新输出（emits）所有数据，因此你可以将它 pipe 到多个文件夹。如果某文件夹不存在，将会自动创建它。\n<b>path</b>\n　类型： String or Function.文件将被写入的路径（输　出目录）。也可以传入一个函数，在函数中返回相应路径，这个函数也可以由 vinyl 文件实例 来提供。\n<b>options</b>\n　类型： Object\n<b>options.cwd</b>\n　类型： String 默认值： process.cwd().输出目录的 cwd 参数，只在所给的输出目录是相对路径时候有效。\n<b>options.mode</b>\n　类型： String 默认值： 0777.八进制权限字符，用以定义所有在输出目录中所创建的目录的权限。\n\n---\n\n<h2>gulp.task(name[, deps], fn)</h2>\n\n　定义一个任务\n<b>name</b>\n　任务的名字，如果你需要在命令行中运行你的某些任务，那么，请不要在名字中使用空格。\n<b>deps</b>\n　类型： Array.一个包含任务列表的数组，这些任务会在你当前任务运行之前完成。\n<b>fn</b>\n　该函数定义任务所要执行的一些操作。通常来说，它会是这种形式：\n　gulp.src().pipe(someplugin())。\n\n---\n\n<h2>gulp.watch(glob[, opts], tasks)</h2>\n\n<b>glob</b>\n　类型： String or Array.一个 glob 字符串，或者一个包含多个 glob 字符串的数组，用来指定具体监控哪些文件的变动。\n<b>opts</b>\n　类型： Object.传给 gaze 的参数。\n<b>tasks</b>\n　类型： Array.需要在文件变动后执行的一个或者多个通过 gulp.task() 创建的 task 的名字，\n\n> <h1>实例</h1>\n\n　在编写gulp代码的时候，需要用到一些gulp插件，下面通过一个实现重命名的实例，来简单阐释一下插件的运用\n\n\tvar gulp = require('gulp');\n\tvar rename = require('gulp-rename');\n\tgulp.task('rename',function(){\n\t\tgulp.src('src/1.js')\n\t\t.pipe(rename('new.js'))\n\t\t.pipe(gulp.dest('js'));\n\t});\n　上述代码实现了将src文件夹中的1.js文件重新命名为new.js，并将新的文件放到了js文件夹中。","source":"_posts/About gulp.md","raw":"---\ntitle: About　Gulp\ntags: \"<h1>gulp</h1>\"\ndate: 2016-08-22\ncategories: 甫夸之谈———gulp\n---\n\n> <h1>关于</h1>\n\n　gulp是前端开发过程中一种基于流的代码构建工具，是自动化项目的构建利器。它是基于nodejs的自动任务运行器，能够自动化地完成js、css、html/image、less等文件的测试、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并可以监听文件在改动后重复指定的这些步骤。事实上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。\n\n> <h1>安装</h1>\n\n* 在安装nodejs环境后，以全局方式安装gulp\n    `npm install -g gulp`\n* 在全局安装gulp之后，还需要再每个要使用gulp的项目中单独安装一次。在项目文件夹中执行以下命令\n    `npm install gulp --save`\n<!---more--->\n\n> <h1>使用</h1>\n\n* 建立gulpfiles文件\n\tgulp需要一个叫做gulpfiles.js的文件作为主文件\n* 运行gulp任务\n\tgulp中的功能的实现方式是通过运行相关任务的形式。在主文件中执行以下命令可以进行简单测试。如果没有指定任务名称，默认执行default任务。\n\n\n\tvar gulp  = require('gulp');\n\tgulp.task('default',function(){\n\t\tconsole.log('hello world');\n\t});\n\n> <h1>工作方式</h1>\n\n\n　在gulp中，工作方式使用的是nodejs中的stream（流），然后通过stream的pipe()方法把流导入到想要的地方，比如gulp的插件中，经过插件处理后又可以继续导入到其他插件中，也可以把流写入到文件中。\n　gulp的使用流程一般是，首先通过gulp.src()方法获得想要处理的文件流，然后把文件流通过pipe()方法导入到gulp的插件中，最后把经过处理的流再通过pipe()导入到gulp.dest()中，gulp.dest()方法则把流中的内容写入到文件中\t\n\n---\n\n<H2>gulp.src(globs[, options])</H2>\n\n　输出（Emits）符合所提供的匹配模式（glob）或者匹配模式的数组（array of globs）的文件。 将返回一个 Vinyl files 的 stream 它可以被 piped 到别的插件中。　\n　<b>[glob](https://github.com/isaacs/node-glob) </b>请参考 node-glob 语法 或者，你也可以直接写文件的路径。\n\n\n<b>globs</b>\n　类型： String 或 Array.所要读取的 glob 或者包含 globs 的数组。\n<b>options</b>\n　类型： Object.通过 glob-stream 所传递给 node-glob 的参数。除了 node-glob 和 glob-stream 所支持的参数外，gulp 增加了一些额外的选项参数：\n<b>options.buffer</b>\n　类型： Boolean 默认值： true.如果该项被设置为 false，那么将会以 stream 方式返回 file.contents 而不是文件 buffer 的形式。这在处理一些大文件的时候将会很有用。**注意：**插件可能并不会实现对 stream 的支持。\n<b>options.read</b>\n　类型： Boolean 默认值： true.如果该项被设置为 false， 那么 file.contents 会返回空值（null），也就是并不会去读取文件。\n<b>options.base</b>\n　类型： String 默认值： 将会加在 glob 之前.\n\n---\n\n<h2>gulp.dest(path[, options])</h2>\n\n　能被 pipe 进来，并且将会写文件。并且重新输出（emits）所有数据，因此你可以将它 pipe 到多个文件夹。如果某文件夹不存在，将会自动创建它。\n<b>path</b>\n　类型： String or Function.文件将被写入的路径（输　出目录）。也可以传入一个函数，在函数中返回相应路径，这个函数也可以由 vinyl 文件实例 来提供。\n<b>options</b>\n　类型： Object\n<b>options.cwd</b>\n　类型： String 默认值： process.cwd().输出目录的 cwd 参数，只在所给的输出目录是相对路径时候有效。\n<b>options.mode</b>\n　类型： String 默认值： 0777.八进制权限字符，用以定义所有在输出目录中所创建的目录的权限。\n\n---\n\n<h2>gulp.task(name[, deps], fn)</h2>\n\n　定义一个任务\n<b>name</b>\n　任务的名字，如果你需要在命令行中运行你的某些任务，那么，请不要在名字中使用空格。\n<b>deps</b>\n　类型： Array.一个包含任务列表的数组，这些任务会在你当前任务运行之前完成。\n<b>fn</b>\n　该函数定义任务所要执行的一些操作。通常来说，它会是这种形式：\n　gulp.src().pipe(someplugin())。\n\n---\n\n<h2>gulp.watch(glob[, opts], tasks)</h2>\n\n<b>glob</b>\n　类型： String or Array.一个 glob 字符串，或者一个包含多个 glob 字符串的数组，用来指定具体监控哪些文件的变动。\n<b>opts</b>\n　类型： Object.传给 gaze 的参数。\n<b>tasks</b>\n　类型： Array.需要在文件变动后执行的一个或者多个通过 gulp.task() 创建的 task 的名字，\n\n> <h1>实例</h1>\n\n　在编写gulp代码的时候，需要用到一些gulp插件，下面通过一个实现重命名的实例，来简单阐释一下插件的运用\n\n\tvar gulp = require('gulp');\n\tvar rename = require('gulp-rename');\n\tgulp.task('rename',function(){\n\t\tgulp.src('src/1.js')\n\t\t.pipe(rename('new.js'))\n\t\t.pipe(gulp.dest('js'));\n\t});\n　上述代码实现了将src文件夹中的1.js文件重新命名为new.js，并将新的文件放到了js文件夹中。","slug":"About gulp","published":1,"updated":"2017-05-21T02:51:16.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p62000xa8vuyw7b3d2h","content":"<blockquote>\n<h1>关于</h1>\n\n</blockquote>\n<p>　gulp是前端开发过程中一种基于流的代码构建工具，是自动化项目的构建利器。它是基于nodejs的自动任务运行器，能够自动化地完成js、css、html/image、less等文件的测试、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并可以监听文件在改动后重复指定的这些步骤。事实上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。</p>\n<blockquote>\n<h1>安装</h1>\n\n</blockquote>\n<ul>\n<li>在安装nodejs环境后，以全局方式安装gulp<br>  <code>npm install -g gulp</code></li>\n<li>在全局安装gulp之后，还需要再每个要使用gulp的项目中单独安装一次。在项目文件夹中执行以下命令<br>  <code>npm install gulp --save</code><a id=\"more\"></a>\n</li>\n</ul>\n<blockquote>\n<h1>使用</h1>\n\n</blockquote>\n<ul>\n<li>建立gulpfiles文件<br>  gulp需要一个叫做gulpfiles.js的文件作为主文件</li>\n<li>运行gulp任务<br>  gulp中的功能的实现方式是通过运行相关任务的形式。在主文件中执行以下命令可以进行简单测试。如果没有指定任务名称，默认执行default任务。</li>\n</ul>\n<pre><code>var gulp  = require(&apos;gulp&apos;);\ngulp.task(&apos;default&apos;,function(){\n    console.log(&apos;hello world&apos;);\n});\n</code></pre><blockquote>\n<h1>工作方式</h1>\n\n\n</blockquote>\n<p>　在gulp中，工作方式使用的是nodejs中的stream（流），然后通过stream的pipe()方法把流导入到想要的地方，比如gulp的插件中，经过插件处理后又可以继续导入到其他插件中，也可以把流写入到文件中。<br>　gulp的使用流程一般是，首先通过gulp.src()方法获得想要处理的文件流，然后把文件流通过pipe()方法导入到gulp的插件中，最后把经过处理的流再通过pipe()导入到gulp.dest()中，gulp.dest()方法则把流中的内容写入到文件中    </p>\n<hr>\n<h2>gulp.src(globs[, options])</h2>\n\n<p>　输出（Emits）符合所提供的匹配模式（glob）或者匹配模式的数组（array of globs）的文件。 将返回一个 Vinyl files 的 stream 它可以被 piped 到别的插件中。　<br>　<b><a href=\"https://github.com/isaacs/node-glob\" target=\"_blank\" rel=\"external\">glob</a> </b>请参考 node-glob 语法 或者，你也可以直接写文件的路径。</p>\n<p><b>globs</b><br>　类型： String 或 Array.所要读取的 glob 或者包含 globs 的数组。<br><b>options</b><br>　类型： Object.通过 glob-stream 所传递给 node-glob 的参数。除了 node-glob 和 glob-stream 所支持的参数外，gulp 增加了一些额外的选项参数：<br><b>options.buffer</b><br>　类型： Boolean 默认值： true.如果该项被设置为 false，那么将会以 stream 方式返回 file.contents 而不是文件 buffer 的形式。这在处理一些大文件的时候将会很有用。<strong>注意：</strong>插件可能并不会实现对 stream 的支持。<br><b>options.read</b><br>　类型： Boolean 默认值： true.如果该项被设置为 false， 那么 file.contents 会返回空值（null），也就是并不会去读取文件。<br><b>options.base</b><br>　类型： String 默认值： 将会加在 glob 之前.</p>\n<hr>\n<h2>gulp.dest(path[, options])</h2>\n\n<p>　能被 pipe 进来，并且将会写文件。并且重新输出（emits）所有数据，因此你可以将它 pipe 到多个文件夹。如果某文件夹不存在，将会自动创建它。<br><b>path</b><br>　类型： String or Function.文件将被写入的路径（输　出目录）。也可以传入一个函数，在函数中返回相应路径，这个函数也可以由 vinyl 文件实例 来提供。<br><b>options</b><br>　类型： Object<br><b>options.cwd</b><br>　类型： String 默认值： process.cwd().输出目录的 cwd 参数，只在所给的输出目录是相对路径时候有效。<br><b>options.mode</b><br>　类型： String 默认值： 0777.八进制权限字符，用以定义所有在输出目录中所创建的目录的权限。</p>\n<hr>\n<h2>gulp.task(name[, deps], fn)</h2>\n\n<p>　定义一个任务<br><b>name</b><br>　任务的名字，如果你需要在命令行中运行你的某些任务，那么，请不要在名字中使用空格。<br><b>deps</b><br>　类型： Array.一个包含任务列表的数组，这些任务会在你当前任务运行之前完成。<br><b>fn</b><br>　该函数定义任务所要执行的一些操作。通常来说，它会是这种形式：<br>　gulp.src().pipe(someplugin())。</p>\n<hr>\n<h2>gulp.watch(glob[, opts], tasks)</h2>\n\n<p><b>glob</b><br>　类型： String or Array.一个 glob 字符串，或者一个包含多个 glob 字符串的数组，用来指定具体监控哪些文件的变动。<br><b>opts</b><br>　类型： Object.传给 gaze 的参数。<br><b>tasks</b><br>　类型： Array.需要在文件变动后执行的一个或者多个通过 gulp.task() 创建的 task 的名字，</p>\n<blockquote>\n<h1>实例</h1>\n\n</blockquote>\n<p>　在编写gulp代码的时候，需要用到一些gulp插件，下面通过一个实现重命名的实例，来简单阐释一下插件的运用</p>\n<pre><code>var gulp = require(&apos;gulp&apos;);\nvar rename = require(&apos;gulp-rename&apos;);\ngulp.task(&apos;rename&apos;,function(){\n    gulp.src(&apos;src/1.js&apos;)\n    .pipe(rename(&apos;new.js&apos;))\n    .pipe(gulp.dest(&apos;js&apos;));\n});\n</code></pre><p>　上述代码实现了将src文件夹中的1.js文件重新命名为new.js，并将新的文件放到了js文件夹中。</p>\n","excerpt":"<blockquote>\n<h1>关于</h1>\n\n</blockquote>\n<p>　gulp是前端开发过程中一种基于流的代码构建工具，是自动化项目的构建利器。它是基于nodejs的自动任务运行器，能够自动化地完成js、css、html/image、less等文件的测试、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并可以监听文件在改动后重复指定的这些步骤。事实上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。</p>\n<blockquote>\n<h1>安装</h1>\n\n</blockquote>\n<ul>\n<li>在安装nodejs环境后，以全局方式安装gulp<br>  <code>npm install -g gulp</code></li>\n<li>在全局安装gulp之后，还需要再每个要使用gulp的项目中单独安装一次。在项目文件夹中执行以下命令<br>  <code>npm install gulp --save</code>","more":"</li>\n</ul>\n<blockquote>\n<h1>使用</h1>\n\n</blockquote>\n<ul>\n<li>建立gulpfiles文件<br>  gulp需要一个叫做gulpfiles.js的文件作为主文件</li>\n<li>运行gulp任务<br>  gulp中的功能的实现方式是通过运行相关任务的形式。在主文件中执行以下命令可以进行简单测试。如果没有指定任务名称，默认执行default任务。</li>\n</ul>\n<pre><code>var gulp  = require(&apos;gulp&apos;);\ngulp.task(&apos;default&apos;,function(){\n    console.log(&apos;hello world&apos;);\n});\n</code></pre><blockquote>\n<h1>工作方式</h1>\n\n\n</blockquote>\n<p>　在gulp中，工作方式使用的是nodejs中的stream（流），然后通过stream的pipe()方法把流导入到想要的地方，比如gulp的插件中，经过插件处理后又可以继续导入到其他插件中，也可以把流写入到文件中。<br>　gulp的使用流程一般是，首先通过gulp.src()方法获得想要处理的文件流，然后把文件流通过pipe()方法导入到gulp的插件中，最后把经过处理的流再通过pipe()导入到gulp.dest()中，gulp.dest()方法则把流中的内容写入到文件中    </p>\n<hr>\n<H2>gulp.src(globs[, options])</H2>\n\n<p>　输出（Emits）符合所提供的匹配模式（glob）或者匹配模式的数组（array of globs）的文件。 将返回一个 Vinyl files 的 stream 它可以被 piped 到别的插件中。　<br>　<b><a href=\"https://github.com/isaacs/node-glob\">glob</a> </b>请参考 node-glob 语法 或者，你也可以直接写文件的路径。</p>\n<p><b>globs</b><br>　类型： String 或 Array.所要读取的 glob 或者包含 globs 的数组。<br><b>options</b><br>　类型： Object.通过 glob-stream 所传递给 node-glob 的参数。除了 node-glob 和 glob-stream 所支持的参数外，gulp 增加了一些额外的选项参数：<br><b>options.buffer</b><br>　类型： Boolean 默认值： true.如果该项被设置为 false，那么将会以 stream 方式返回 file.contents 而不是文件 buffer 的形式。这在处理一些大文件的时候将会很有用。<strong>注意：</strong>插件可能并不会实现对 stream 的支持。<br><b>options.read</b><br>　类型： Boolean 默认值： true.如果该项被设置为 false， 那么 file.contents 会返回空值（null），也就是并不会去读取文件。<br><b>options.base</b><br>　类型： String 默认值： 将会加在 glob 之前.</p>\n<hr>\n<h2>gulp.dest(path[, options])</h2>\n\n<p>　能被 pipe 进来，并且将会写文件。并且重新输出（emits）所有数据，因此你可以将它 pipe 到多个文件夹。如果某文件夹不存在，将会自动创建它。<br><b>path</b><br>　类型： String or Function.文件将被写入的路径（输　出目录）。也可以传入一个函数，在函数中返回相应路径，这个函数也可以由 vinyl 文件实例 来提供。<br><b>options</b><br>　类型： Object<br><b>options.cwd</b><br>　类型： String 默认值： process.cwd().输出目录的 cwd 参数，只在所给的输出目录是相对路径时候有效。<br><b>options.mode</b><br>　类型： String 默认值： 0777.八进制权限字符，用以定义所有在输出目录中所创建的目录的权限。</p>\n<hr>\n<h2>gulp.task(name[, deps], fn)</h2>\n\n<p>　定义一个任务<br><b>name</b><br>　任务的名字，如果你需要在命令行中运行你的某些任务，那么，请不要在名字中使用空格。<br><b>deps</b><br>　类型： Array.一个包含任务列表的数组，这些任务会在你当前任务运行之前完成。<br><b>fn</b><br>　该函数定义任务所要执行的一些操作。通常来说，它会是这种形式：<br>　gulp.src().pipe(someplugin())。</p>\n<hr>\n<h2>gulp.watch(glob[, opts], tasks)</h2>\n\n<p><b>glob</b><br>　类型： String or Array.一个 glob 字符串，或者一个包含多个 glob 字符串的数组，用来指定具体监控哪些文件的变动。<br><b>opts</b><br>　类型： Object.传给 gaze 的参数。<br><b>tasks</b><br>　类型： Array.需要在文件变动后执行的一个或者多个通过 gulp.task() 创建的 task 的名字，</p>\n<blockquote>\n<h1>实例</h1>\n\n</blockquote>\n<p>　在编写gulp代码的时候，需要用到一些gulp插件，下面通过一个实现重命名的实例，来简单阐释一下插件的运用</p>\n<pre><code>var gulp = require(&apos;gulp&apos;);\nvar rename = require(&apos;gulp-rename&apos;);\ngulp.task(&apos;rename&apos;,function(){\n    gulp.src(&apos;src/1.js&apos;)\n    .pipe(rename(&apos;new.js&apos;))\n    .pipe(gulp.dest(&apos;js&apos;));\n});\n</code></pre><p>　上述代码实现了将src文件夹中的1.js文件重新命名为new.js，并将新的文件放到了js文件夹中。</p>"},{"title":"About　input","date":"2017-04-28T16:00:00.000Z","_content":"\n>  主要\n\n　　input有多种类型，对应不同属性，具有不同功能。大多数类型value表示发送请求的值，具有disabled属性，禁用；required属性，必填；readonly，只读；操作事件为change、input；select()、focus多数可以选中；autocomplete属性，是否有自动完成功能，简单的值为on、off，有多种其它值；autofocus属性，是否自动聚焦；list属性，与datalist标签组合使用，实现列表选项；max、min、maxlegth、minlength属性，对不同类型适用不同，效果一致；name属性，请求的变量名；pattern属性，正则筛选；placeholder属性，默认提示；step属性，调整步长。\n\n*\t<b style=\"color:black;font-size:25px;\">button</b>　　可绑定事件，value为显示名称\n*\t<b style=\"color:black;font-size:25px;\">checkbox</b>　　checked属性为选中\n<!---more--->\n*\t<b style=\"color:black;font-size:25px;\">color</b>　　\n*\t<b style=\"color:black;font-size:25px;\">date</b>\n*\t<b style=\"color:black;font-size:25px;\">datetime-local</b>\n*\t<b style=\"color:black;font-size:25px;\">email</b>\n\tmultiple属性，是否允许多个值\n*\t<b style=\"color:black;font-size:25px;\">file</b>　　\n\taccept属性，筛选特定类型文件，值可为(.jpg/.png.doc..)、MIME类型、audio/*、video/*、image/*\n\tcaptur属性，调用相机、摄像、录音等功能，值可为camera、camcorder、microphone\n*\t<b style=\"color:black;font-size:25px;\">hidden</b>\n*\t<b style=\"color:black;font-size:25px;\">image</b>\n\tsrc属性，资源路径\n*\t<b style=\"color:black;font-size:25px;\">month</b>\n*\t<b style=\"color:black;font-size:25px;\">number</b>\n*\t<b style=\"color:black;font-size:25px;\">password</b>\n*\t<b style=\"color:black;font-size:25px;\">radio</b>\n*\t<b style=\"color:black;font-size:25px;\">range</b>\n*\t<b style=\"color:black;font-size:25px;\">reset</b>\n*\t<b style=\"color:black;font-size:25px;\">search</b>\n*\t<b style=\"color:black;font-size:25px;\">submit</b>\n\tformenctype属性，对发送数据进行编码，值可为application/x-www-form-urlencoded，对所有字符进行编码（默认，空格转为'+'，特殊字符转为HEX）；multipart/form-data，不进行编码；text/plain，将空格转换为'+'，不对特殊字符编码（get方式）\n\tmultiple属性，是否允许多个值\n*\t<b style=\"color:black;font-size:25px;\">tel</b>\n*\t<b style=\"color:black;font-size:25px;\">text</b>\n*\t<b style=\"color:black;font-size:25px;\">time</b>\n*\t<b style=\"color:black;font-size:25px;\">url</b>\n*\t<b style=\"color:black;font-size:25px;\">week</b>","source":"_posts/About input.md","raw":"---\ntitle: About　input\ncategories: 甫夸之谈———input\ndate: 2017-04-29\ntags: \"html\"\n---\n\n>  主要\n\n　　input有多种类型，对应不同属性，具有不同功能。大多数类型value表示发送请求的值，具有disabled属性，禁用；required属性，必填；readonly，只读；操作事件为change、input；select()、focus多数可以选中；autocomplete属性，是否有自动完成功能，简单的值为on、off，有多种其它值；autofocus属性，是否自动聚焦；list属性，与datalist标签组合使用，实现列表选项；max、min、maxlegth、minlength属性，对不同类型适用不同，效果一致；name属性，请求的变量名；pattern属性，正则筛选；placeholder属性，默认提示；step属性，调整步长。\n\n*\t<b style=\"color:black;font-size:25px;\">button</b>　　可绑定事件，value为显示名称\n*\t<b style=\"color:black;font-size:25px;\">checkbox</b>　　checked属性为选中\n<!---more--->\n*\t<b style=\"color:black;font-size:25px;\">color</b>　　\n*\t<b style=\"color:black;font-size:25px;\">date</b>\n*\t<b style=\"color:black;font-size:25px;\">datetime-local</b>\n*\t<b style=\"color:black;font-size:25px;\">email</b>\n\tmultiple属性，是否允许多个值\n*\t<b style=\"color:black;font-size:25px;\">file</b>　　\n\taccept属性，筛选特定类型文件，值可为(.jpg/.png.doc..)、MIME类型、audio/*、video/*、image/*\n\tcaptur属性，调用相机、摄像、录音等功能，值可为camera、camcorder、microphone\n*\t<b style=\"color:black;font-size:25px;\">hidden</b>\n*\t<b style=\"color:black;font-size:25px;\">image</b>\n\tsrc属性，资源路径\n*\t<b style=\"color:black;font-size:25px;\">month</b>\n*\t<b style=\"color:black;font-size:25px;\">number</b>\n*\t<b style=\"color:black;font-size:25px;\">password</b>\n*\t<b style=\"color:black;font-size:25px;\">radio</b>\n*\t<b style=\"color:black;font-size:25px;\">range</b>\n*\t<b style=\"color:black;font-size:25px;\">reset</b>\n*\t<b style=\"color:black;font-size:25px;\">search</b>\n*\t<b style=\"color:black;font-size:25px;\">submit</b>\n\tformenctype属性，对发送数据进行编码，值可为application/x-www-form-urlencoded，对所有字符进行编码（默认，空格转为'+'，特殊字符转为HEX）；multipart/form-data，不进行编码；text/plain，将空格转换为'+'，不对特殊字符编码（get方式）\n\tmultiple属性，是否允许多个值\n*\t<b style=\"color:black;font-size:25px;\">tel</b>\n*\t<b style=\"color:black;font-size:25px;\">text</b>\n*\t<b style=\"color:black;font-size:25px;\">time</b>\n*\t<b style=\"color:black;font-size:25px;\">url</b>\n*\t<b style=\"color:black;font-size:25px;\">week</b>","slug":"About input","published":1,"updated":"2017-09-13T14:57:24.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p640011a8vu6gudwi3j","content":"<blockquote>\n<p> 主要</p>\n</blockquote>\n<p>　　input有多种类型，对应不同属性，具有不同功能。大多数类型value表示发送请求的值，具有disabled属性，禁用；required属性，必填；readonly，只读；操作事件为change、input；select()、focus多数可以选中；autocomplete属性，是否有自动完成功能，简单的值为on、off，有多种其它值；autofocus属性，是否自动聚焦；list属性，与datalist标签组合使用，实现列表选项；max、min、maxlegth、minlength属性，对不同类型适用不同，效果一致；name属性，请求的变量名；pattern属性，正则筛选；placeholder属性，默认提示；step属性，调整步长。</p>\n<ul>\n<li><b style=\"color:black;font-size:25px;\">button</b>　　可绑定事件，value为显示名称</li>\n<li><b style=\"color:black;font-size:25px;\">checkbox</b>　　checked属性为选中<a id=\"more\"></a></li>\n<li><b style=\"color:black;font-size:25px;\">color</b>　　</li>\n<li><b style=\"color:black;font-size:25px;\">date</b></li>\n<li><b style=\"color:black;font-size:25px;\">datetime-local</b></li>\n<li><b style=\"color:black;font-size:25px;\">email</b><br>multiple属性，是否允许多个值</li>\n<li><b style=\"color:black;font-size:25px;\">file</b>　　<br>accept属性，筛选特定类型文件，值可为(.jpg/.png.doc..)、MIME类型、audio/<em>、video/</em>、image/*<br>captur属性，调用相机、摄像、录音等功能，值可为camera、camcorder、microphone</li>\n<li><b style=\"color:black;font-size:25px;\">hidden</b></li>\n<li><b style=\"color:black;font-size:25px;\">image</b><br>src属性，资源路径</li>\n<li><b style=\"color:black;font-size:25px;\">month</b></li>\n<li><b style=\"color:black;font-size:25px;\">number</b></li>\n<li><b style=\"color:black;font-size:25px;\">password</b></li>\n<li><b style=\"color:black;font-size:25px;\">radio</b></li>\n<li><b style=\"color:black;font-size:25px;\">range</b></li>\n<li><b style=\"color:black;font-size:25px;\">reset</b></li>\n<li><b style=\"color:black;font-size:25px;\">search</b></li>\n<li><b style=\"color:black;font-size:25px;\">submit</b><br>formenctype属性，对发送数据进行编码，值可为application/x-www-form-urlencoded，对所有字符进行编码（默认，空格转为’+’，特殊字符转为HEX）；multipart/form-data，不进行编码；text/plain，将空格转换为’+’，不对特殊字符编码（get方式）<br>multiple属性，是否允许多个值</li>\n<li><b style=\"color:black;font-size:25px;\">tel</b></li>\n<li><b style=\"color:black;font-size:25px;\">text</b></li>\n<li><b style=\"color:black;font-size:25px;\">time</b></li>\n<li><b style=\"color:black;font-size:25px;\">url</b></li>\n<li><b style=\"color:black;font-size:25px;\">week</b></li>\n</ul>\n","excerpt":"<blockquote>\n<p> 主要</p>\n</blockquote>\n<p>　　input有多种类型，对应不同属性，具有不同功能。大多数类型value表示发送请求的值，具有disabled属性，禁用；required属性，必填；readonly，只读；操作事件为change、input；select()、focus多数可以选中；autocomplete属性，是否有自动完成功能，简单的值为on、off，有多种其它值；autofocus属性，是否自动聚焦；list属性，与datalist标签组合使用，实现列表选项；max、min、maxlegth、minlength属性，对不同类型适用不同，效果一致；name属性，请求的变量名；pattern属性，正则筛选；placeholder属性，默认提示；step属性，调整步长。</p>\n<ul>\n<li><b style=\"color:black;font-size:25px;\">button</b>　　可绑定事件，value为显示名称</li>\n<li><b style=\"color:black;font-size:25px;\">checkbox</b>　　checked属性为选中","more":"</li>\n<li><b style=\"color:black;font-size:25px;\">color</b>　　</li>\n<li><b style=\"color:black;font-size:25px;\">date</b></li>\n<li><b style=\"color:black;font-size:25px;\">datetime-local</b></li>\n<li><b style=\"color:black;font-size:25px;\">email</b><br>multiple属性，是否允许多个值</li>\n<li><b style=\"color:black;font-size:25px;\">file</b>　　<br>accept属性，筛选特定类型文件，值可为(.jpg/.png.doc..)、MIME类型、audio/<em>、video/</em>、image/*<br>captur属性，调用相机、摄像、录音等功能，值可为camera、camcorder、microphone</li>\n<li><b style=\"color:black;font-size:25px;\">hidden</b></li>\n<li><b style=\"color:black;font-size:25px;\">image</b><br>src属性，资源路径</li>\n<li><b style=\"color:black;font-size:25px;\">month</b></li>\n<li><b style=\"color:black;font-size:25px;\">number</b></li>\n<li><b style=\"color:black;font-size:25px;\">password</b></li>\n<li><b style=\"color:black;font-size:25px;\">radio</b></li>\n<li><b style=\"color:black;font-size:25px;\">range</b></li>\n<li><b style=\"color:black;font-size:25px;\">reset</b></li>\n<li><b style=\"color:black;font-size:25px;\">search</b></li>\n<li><b style=\"color:black;font-size:25px;\">submit</b><br>formenctype属性，对发送数据进行编码，值可为application/x-www-form-urlencoded，对所有字符进行编码（默认，空格转为’+’，特殊字符转为HEX）；multipart/form-data，不进行编码；text/plain，将空格转换为’+’，不对特殊字符编码（get方式）<br>multiple属性，是否允许多个值</li>\n<li><b style=\"color:black;font-size:25px;\">tel</b></li>\n<li><b style=\"color:black;font-size:25px;\">text</b></li>\n<li><b style=\"color:black;font-size:25px;\">time</b></li>\n<li><b style=\"color:black;font-size:25px;\">url</b></li>\n<li><b style=\"color:black;font-size:25px;\">week</b></li>\n</ul>"},{"title":"About　mode&flage of fs","date":"2017-04-09T16:00:00.000Z","_content":"\n>mode of fs\n\n　　mode在fs操作中表示具有的权限。文件的基本权限有9个，分别是owner、group、others三种身份各有自己的read、write、execute权限。用不同的数字代表不同的权限。\n+\tr: 4\n+\tw: 2\n+\tx: 1\n\n>flage of fs\n\n　　flage在fs操作中用来设置文件的读写属性。\n<!---more--->\n　　<b style=\"color:black;font-size:25px;\">r</b>　读取文件。如果文件不存在时抛出异常\n　　<b style=\"color:black;font-size:25px;\">r+</b>　读取并写入。如果文件不存在时抛出异常\n　　<b style=\"color:black;font-size:25px;\">rs</b>　以同步方式读取文件并通知操作系统忽略本地文件系统缓存。如果文件不存在时抛出异常\n　　<b style=\"color:black;font-size:25px;\">w</b>　写入文件。如果文件不存在时则创建该文件。如果文件已存在则清空文件内容\n　　<b style=\"color:black;font-size:25px;\">w+</b>　读取并写入文件。如果文件不存在时则创建该文件。如果文件已存在则清空文件内容\n　　<b style=\"color:black;font-size:25px;\">wx</b>　作用与”w”类似。但是以排他方式打开文件\n　　<b style=\"color:black;font-size:25px;\">wx+</b>　作用与”w+”类似。但是以排他方式打开文件\n　　<b style=\"color:black;font-size:25px;\">a</b>　以追加方式写入文件。如果文件不存在时则创建该文件\n　　<b style=\"color:black;font-size:25px;\">a+</b>　读取并以追加方式写入文件。如果文件不存在时则创建该文件\n　　<b style=\"color:black;font-size:25px;\">ax</b>　作用与”a”类似。但是以排他方式打开文件\n　　<b style=\"color:black;font-size:25px;\">ax+</b>　作用与”a+”类似。但是以排他方式打开文件\t","source":"_posts/About mode&flage of fs.md","raw":"---\ntitle: About　mode&flage of fs\ncategories: 甫夸之谈———node\ndate: 2017-04-10\ntags: \"<span style='color: orange;'>fs</span>\"\n---\n\n>mode of fs\n\n　　mode在fs操作中表示具有的权限。文件的基本权限有9个，分别是owner、group、others三种身份各有自己的read、write、execute权限。用不同的数字代表不同的权限。\n+\tr: 4\n+\tw: 2\n+\tx: 1\n\n>flage of fs\n\n　　flage在fs操作中用来设置文件的读写属性。\n<!---more--->\n　　<b style=\"color:black;font-size:25px;\">r</b>　读取文件。如果文件不存在时抛出异常\n　　<b style=\"color:black;font-size:25px;\">r+</b>　读取并写入。如果文件不存在时抛出异常\n　　<b style=\"color:black;font-size:25px;\">rs</b>　以同步方式读取文件并通知操作系统忽略本地文件系统缓存。如果文件不存在时抛出异常\n　　<b style=\"color:black;font-size:25px;\">w</b>　写入文件。如果文件不存在时则创建该文件。如果文件已存在则清空文件内容\n　　<b style=\"color:black;font-size:25px;\">w+</b>　读取并写入文件。如果文件不存在时则创建该文件。如果文件已存在则清空文件内容\n　　<b style=\"color:black;font-size:25px;\">wx</b>　作用与”w”类似。但是以排他方式打开文件\n　　<b style=\"color:black;font-size:25px;\">wx+</b>　作用与”w+”类似。但是以排他方式打开文件\n　　<b style=\"color:black;font-size:25px;\">a</b>　以追加方式写入文件。如果文件不存在时则创建该文件\n　　<b style=\"color:black;font-size:25px;\">a+</b>　读取并以追加方式写入文件。如果文件不存在时则创建该文件\n　　<b style=\"color:black;font-size:25px;\">ax</b>　作用与”a”类似。但是以排他方式打开文件\n　　<b style=\"color:black;font-size:25px;\">ax+</b>　作用与”a+”类似。但是以排他方式打开文件\t","slug":"About mode&flage of fs","published":1,"updated":"2017-05-21T02:53:39.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p660013a8vuxq6oxkit","content":"<blockquote>\n<p>mode of fs</p>\n</blockquote>\n<p>　　mode在fs操作中表示具有的权限。文件的基本权限有9个，分别是owner、group、others三种身份各有自己的read、write、execute权限。用不同的数字代表不同的权限。</p>\n<ul>\n<li>r: 4</li>\n<li>w: 2</li>\n<li>x: 1</li>\n</ul>\n<blockquote>\n<p>flage of fs</p>\n</blockquote>\n<p>　　flage在fs操作中用来设置文件的读写属性。<br><a id=\"more\"></a><br>　　<b style=\"color:black;font-size:25px;\">r</b>　读取文件。如果文件不存在时抛出异常<br>　　<b style=\"color:black;font-size:25px;\">r+</b>　读取并写入。如果文件不存在时抛出异常<br>　　<b style=\"color:black;font-size:25px;\">rs</b>　以同步方式读取文件并通知操作系统忽略本地文件系统缓存。如果文件不存在时抛出异常<br>　　<b style=\"color:black;font-size:25px;\">w</b>　写入文件。如果文件不存在时则创建该文件。如果文件已存在则清空文件内容<br>　　<b style=\"color:black;font-size:25px;\">w+</b>　读取并写入文件。如果文件不存在时则创建该文件。如果文件已存在则清空文件内容<br>　　<b style=\"color:black;font-size:25px;\">wx</b>　作用与”w”类似。但是以排他方式打开文件<br>　　<b style=\"color:black;font-size:25px;\">wx+</b>　作用与”w+”类似。但是以排他方式打开文件<br>　　<b style=\"color:black;font-size:25px;\">a</b>　以追加方式写入文件。如果文件不存在时则创建该文件<br>　　<b style=\"color:black;font-size:25px;\">a+</b>　读取并以追加方式写入文件。如果文件不存在时则创建该文件<br>　　<b style=\"color:black;font-size:25px;\">ax</b>　作用与”a”类似。但是以排他方式打开文件<br>　　<b style=\"color:black;font-size:25px;\">ax+</b>　作用与”a+”类似。但是以排他方式打开文件    </p>\n","excerpt":"<blockquote>\n<p>mode of fs</p>\n</blockquote>\n<p>　　mode在fs操作中表示具有的权限。文件的基本权限有9个，分别是owner、group、others三种身份各有自己的read、write、execute权限。用不同的数字代表不同的权限。</p>\n<ul>\n<li>r: 4</li>\n<li>w: 2</li>\n<li>x: 1</li>\n</ul>\n<blockquote>\n<p>flage of fs</p>\n</blockquote>\n<p>　　flage在fs操作中用来设置文件的读写属性。<br>","more":"<br>　　<b style=\"color:black;font-size:25px;\">r</b>　读取文件。如果文件不存在时抛出异常<br>　　<b style=\"color:black;font-size:25px;\">r+</b>　读取并写入。如果文件不存在时抛出异常<br>　　<b style=\"color:black;font-size:25px;\">rs</b>　以同步方式读取文件并通知操作系统忽略本地文件系统缓存。如果文件不存在时抛出异常<br>　　<b style=\"color:black;font-size:25px;\">w</b>　写入文件。如果文件不存在时则创建该文件。如果文件已存在则清空文件内容<br>　　<b style=\"color:black;font-size:25px;\">w+</b>　读取并写入文件。如果文件不存在时则创建该文件。如果文件已存在则清空文件内容<br>　　<b style=\"color:black;font-size:25px;\">wx</b>　作用与”w”类似。但是以排他方式打开文件<br>　　<b style=\"color:black;font-size:25px;\">wx+</b>　作用与”w+”类似。但是以排他方式打开文件<br>　　<b style=\"color:black;font-size:25px;\">a</b>　以追加方式写入文件。如果文件不存在时则创建该文件<br>　　<b style=\"color:black;font-size:25px;\">a+</b>　读取并以追加方式写入文件。如果文件不存在时则创建该文件<br>　　<b style=\"color:black;font-size:25px;\">ax</b>　作用与”a”类似。但是以排他方式打开文件<br>　　<b style=\"color:black;font-size:25px;\">ax+</b>　作用与”a+”类似。但是以排他方式打开文件    </p>"},{"title":"About　sql","date":"2017-04-01T16:00:00.000Z","_content":"\n>DML　　数据操纵语言(select,delete,uqdate,insert)\n\n　　<b style=\"color:black;font-size:25px;\">select</b>　选择　　\n　　<b style=\"color:black;font-size:25px;\">insert</b>　插入　insert into table1(key1,key2) values(val1,val2)\n　　<b style=\"color:black;font-size:25px;\">delete</b>　删除\n　　<b style=\"color:black;font-size:25px;\">update</b>　更新　update table1 set key1 = val1\n<!---more--->\n　　<b style=\"color:black;font-size:25px;\">like</b>　select * from table1 where key1 like \"%val%\"\n　　<b style=\"color:black;font-size:25px;\">order by</b>　select * from order by key1\n　　<b style=\"color:black;font-size:25px;\">count</b>　select count as name_other from table1\n　　<b style=\"color:black;font-size:25px;\">sum</b>　select sum(key1) as name_other from table1\n　　<b style=\"color:black;font-size:25px;\">avg</b>　select avg(key1) as name_other from table1\n　　<b style=\"color:black;font-size:25px;\">max</b>　select max(key1) as name_other from table1\n　　<b style=\"color:black;font-size:25px;\">min</b>　select min(key1) as name_other from table1\n*****\n　　<b style=\"color:black;font-size:25px;\">union</b>　返回两个结果集的并集 select * from table1 union select * from table2\n　　<b style=\"color:black;font-size:25px;\">except</b>　返回两个结果集的差，查询符合左表不符合右表的 select * from table1 union select * from table2\n　　<b style=\"color:black;font-size:25px;\">intersect</b>　返回两个结果集的并集 select * from table1 intersect select * from table2\n*****\n　　<b style=\"color:black;font-size:25px;\">left join on</b>　返回连接表的匹配项，也返回左表的所有项 select * from table1 left join table2 on table1.key1 = table2.key2\n　　<b style=\"color:black;font-size:25px;\">right join on</b>　返回连接表的匹配项，也返回右表的所有项\n　　<b style=\"color:black;font-size:25px;\">full join on</b>　返回连接表所有项\n　　<b style=\"color:black;font-size:25px;\">inner join on</b>　返回连接表的共同项\n*****\n　　<b style=\"color:black;font-size:25px;\">between</b>　限制查询范围，同时包括边界值 select * from table1 where time between time1 and time2 \n　　<b style=\"color:black;font-size:25px;\">not between</b>　反之\n　　<b style=\"color:black;font-size:25px;\">in</b>　匹配条件中的任意值 select * from table1 where key1 in (val1,val2)\n　　<b style=\"color:black;font-size:25px;\">not in</b>　反之\n　　<b style=\"color:black;font-size:25px;\">group by</b>　根据某一项或多项对结果进行分组统计 select key1,sum(key2) name_other from table1 group by key1\n*****\n　　纯属基础，稍作总结，全属语义，全靠用熟。","source":"_posts/About sql.md","raw":"---\ntitle: About　sql\ncategories: 甫夸之谈———sql\ndate: 2017-04-02\ntags: \"sql\"\n---\n\n>DML　　数据操纵语言(select,delete,uqdate,insert)\n\n　　<b style=\"color:black;font-size:25px;\">select</b>　选择　　\n　　<b style=\"color:black;font-size:25px;\">insert</b>　插入　insert into table1(key1,key2) values(val1,val2)\n　　<b style=\"color:black;font-size:25px;\">delete</b>　删除\n　　<b style=\"color:black;font-size:25px;\">update</b>　更新　update table1 set key1 = val1\n<!---more--->\n　　<b style=\"color:black;font-size:25px;\">like</b>　select * from table1 where key1 like \"%val%\"\n　　<b style=\"color:black;font-size:25px;\">order by</b>　select * from order by key1\n　　<b style=\"color:black;font-size:25px;\">count</b>　select count as name_other from table1\n　　<b style=\"color:black;font-size:25px;\">sum</b>　select sum(key1) as name_other from table1\n　　<b style=\"color:black;font-size:25px;\">avg</b>　select avg(key1) as name_other from table1\n　　<b style=\"color:black;font-size:25px;\">max</b>　select max(key1) as name_other from table1\n　　<b style=\"color:black;font-size:25px;\">min</b>　select min(key1) as name_other from table1\n*****\n　　<b style=\"color:black;font-size:25px;\">union</b>　返回两个结果集的并集 select * from table1 union select * from table2\n　　<b style=\"color:black;font-size:25px;\">except</b>　返回两个结果集的差，查询符合左表不符合右表的 select * from table1 union select * from table2\n　　<b style=\"color:black;font-size:25px;\">intersect</b>　返回两个结果集的并集 select * from table1 intersect select * from table2\n*****\n　　<b style=\"color:black;font-size:25px;\">left join on</b>　返回连接表的匹配项，也返回左表的所有项 select * from table1 left join table2 on table1.key1 = table2.key2\n　　<b style=\"color:black;font-size:25px;\">right join on</b>　返回连接表的匹配项，也返回右表的所有项\n　　<b style=\"color:black;font-size:25px;\">full join on</b>　返回连接表所有项\n　　<b style=\"color:black;font-size:25px;\">inner join on</b>　返回连接表的共同项\n*****\n　　<b style=\"color:black;font-size:25px;\">between</b>　限制查询范围，同时包括边界值 select * from table1 where time between time1 and time2 \n　　<b style=\"color:black;font-size:25px;\">not between</b>　反之\n　　<b style=\"color:black;font-size:25px;\">in</b>　匹配条件中的任意值 select * from table1 where key1 in (val1,val2)\n　　<b style=\"color:black;font-size:25px;\">not in</b>　反之\n　　<b style=\"color:black;font-size:25px;\">group by</b>　根据某一项或多项对结果进行分组统计 select key1,sum(key2) name_other from table1 group by key1\n*****\n　　纯属基础，稍作总结，全属语义，全靠用熟。","slug":"About sql","published":1,"updated":"2017-05-21T02:46:47.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p6a0015a8vuix18m4v0","content":"<blockquote>\n<p>DML　　数据操纵语言(select,delete,uqdate,insert)</p>\n</blockquote>\n<p>　　<b style=\"color:black;font-size:25px;\">select</b>　选择　　<br>　　<b style=\"color:black;font-size:25px;\">insert</b>　插入　insert into table1(key1,key2) values(val1,val2)<br>　　<b style=\"color:black;font-size:25px;\">delete</b>　删除<br>　　<b style=\"color:black;font-size:25px;\">update</b>　更新　update table1 set key1 = val1<br><a id=\"more\"></a><br>　　<b style=\"color:black;font-size:25px;\">like</b>　select <em> from table1 where key1 like “%val%”<br>　　<b style=\"color:black;font-size:25px;\">order by</b>　select </em> from order by key1<br>　　<b style=\"color:black;font-size:25px;\">count</b>　select count as name_other from table1<br>　　<b style=\"color:black;font-size:25px;\">sum</b>　select sum(key1) as name_other from table1<br>　　<b style=\"color:black;font-size:25px;\">avg</b>　select avg(key1) as name_other from table1<br>　　<b style=\"color:black;font-size:25px;\">max</b>　select max(key1) as name_other from table1<br>　　<b style=\"color:black;font-size:25px;\">min</b>　select min(key1) as name_other from table1</p>\n<hr>\n<p>　　<b style=\"color:black;font-size:25px;\">union</b>　返回两个结果集的并集 select <em> from table1 union select </em> from table2<br>　　<b style=\"color:black;font-size:25px;\">except</b>　返回两个结果集的差，查询符合左表不符合右表的 select <em> from table1 union select </em> from table2<br>　　<b style=\"color:black;font-size:25px;\">intersect</b>　返回两个结果集的并集 select <em> from table1 intersect select </em> from table2</p>\n<hr>\n<p>　　<b style=\"color:black;font-size:25px;\">left join on</b>　返回连接表的匹配项，也返回左表的所有项 select * from table1 left join table2 on table1.key1 = table2.key2<br>　　<b style=\"color:black;font-size:25px;\">right join on</b>　返回连接表的匹配项，也返回右表的所有项<br>　　<b style=\"color:black;font-size:25px;\">full join on</b>　返回连接表所有项<br>　　<b style=\"color:black;font-size:25px;\">inner join on</b>　返回连接表的共同项</p>\n<hr>\n<p>　　<b style=\"color:black;font-size:25px;\">between</b>　限制查询范围，同时包括边界值 select <em> from table1 where time between time1 and time2<br>　　<b style=\"color:black;font-size:25px;\">not between</b>　反之<br>　　<b style=\"color:black;font-size:25px;\">in</b>　匹配条件中的任意值 select </em> from table1 where key1 in (val1,val2)<br>　　<b style=\"color:black;font-size:25px;\">not in</b>　反之<br>　　<b style=\"color:black;font-size:25px;\">group by</b>　根据某一项或多项对结果进行分组统计 select key1,sum(key2) name_other from table1 group by key1</p>\n<hr>\n<p>　　纯属基础，稍作总结，全属语义，全靠用熟。</p>\n","excerpt":"<blockquote>\n<p>DML　　数据操纵语言(select,delete,uqdate,insert)</p>\n</blockquote>\n<p>　　<b style=\"color:black;font-size:25px;\">select</b>　选择　　<br>　　<b style=\"color:black;font-size:25px;\">insert</b>　插入　insert into table1(key1,key2) values(val1,val2)<br>　　<b style=\"color:black;font-size:25px;\">delete</b>　删除<br>　　<b style=\"color:black;font-size:25px;\">update</b>　更新　update table1 set key1 = val1<br>","more":"<br>　　<b style=\"color:black;font-size:25px;\">like</b>　select <em> from table1 where key1 like “%val%”<br>　　<b style=\"color:black;font-size:25px;\">order by</b>　select </em> from order by key1<br>　　<b style=\"color:black;font-size:25px;\">count</b>　select count as name_other from table1<br>　　<b style=\"color:black;font-size:25px;\">sum</b>　select sum(key1) as name_other from table1<br>　　<b style=\"color:black;font-size:25px;\">avg</b>　select avg(key1) as name_other from table1<br>　　<b style=\"color:black;font-size:25px;\">max</b>　select max(key1) as name_other from table1<br>　　<b style=\"color:black;font-size:25px;\">min</b>　select min(key1) as name_other from table1</p>\n<hr>\n<p>　　<b style=\"color:black;font-size:25px;\">union</b>　返回两个结果集的并集 select <em> from table1 union select </em> from table2<br>　　<b style=\"color:black;font-size:25px;\">except</b>　返回两个结果集的差，查询符合左表不符合右表的 select <em> from table1 union select </em> from table2<br>　　<b style=\"color:black;font-size:25px;\">intersect</b>　返回两个结果集的并集 select <em> from table1 intersect select </em> from table2</p>\n<hr>\n<p>　　<b style=\"color:black;font-size:25px;\">left join on</b>　返回连接表的匹配项，也返回左表的所有项 select * from table1 left join table2 on table1.key1 = table2.key2<br>　　<b style=\"color:black;font-size:25px;\">right join on</b>　返回连接表的匹配项，也返回右表的所有项<br>　　<b style=\"color:black;font-size:25px;\">full join on</b>　返回连接表所有项<br>　　<b style=\"color:black;font-size:25px;\">inner join on</b>　返回连接表的共同项</p>\n<hr>\n<p>　　<b style=\"color:black;font-size:25px;\">between</b>　限制查询范围，同时包括边界值 select <em> from table1 where time between time1 and time2<br>　　<b style=\"color:black;font-size:25px;\">not between</b>　反之<br>　　<b style=\"color:black;font-size:25px;\">in</b>　匹配条件中的任意值 select </em> from table1 where key1 in (val1,val2)<br>　　<b style=\"color:black;font-size:25px;\">not in</b>　反之<br>　　<b style=\"color:black;font-size:25px;\">group by</b>　根据某一项或多项对结果进行分组统计 select key1,sum(key2) name_other from table1 group by key1</p>\n<hr>\n<p>　　纯属基础，稍作总结，全属语义，全靠用熟。</p>"},{"title":"About　Window.devicePixelRatio","date":"2016-10-31T16:00:00.000Z","_content":"\n>关于window.devicePixelRatio\n\n　　devicePixelRatio是设备的像素比，在移动端运用canvas时可以解决图像的模糊问题。\n\n>主要\n\n　　canvas.width,canvas.height是canvas的画布大小。canvas.style.width,canvas.style.height是浏览器渲染canvas的尺寸。可以同时运用控制缩放效果。\n　　在移动端运用时，画布的大小应等于浏览器渲染canvas的大小 * 浏览器的分辨率。\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/canvas_xiangshu.md","raw":"---\ntitle: About　Window.devicePixelRatio\ncategories: 甫夸之谈———移动端\ndate: 2016-11-01\ntags: \"Canvas\"\n---\n\n>关于window.devicePixelRatio\n\n　　devicePixelRatio是设备的像素比，在移动端运用canvas时可以解决图像的模糊问题。\n\n>主要\n\n　　canvas.width,canvas.height是canvas的画布大小。canvas.style.width,canvas.style.height是浏览器渲染canvas的尺寸。可以同时运用控制缩放效果。\n　　在移动端运用时，画布的大小应等于浏览器渲染canvas的大小 * 浏览器的分辨率。\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"canvas_xiangshu","published":1,"updated":"2017-05-21T02:48:19.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p6i0019a8vuz3jce04i","content":"<blockquote>\n<p>关于window.devicePixelRatio</p>\n</blockquote>\n<p>　　devicePixelRatio是设备的像素比，在移动端运用canvas时可以解决图像的模糊问题。</p>\n<blockquote>\n<p>主要</p>\n</blockquote>\n<p>　　canvas.width,canvas.height是canvas的画布大小。canvas.style.width,canvas.style.height是浏览器渲染canvas的尺寸。可以同时运用控制缩放效果。<br>　　在移动端运用时，画布的大小应等于浏览器渲染canvas的大小 * 浏览器的分辨率。</p>\n","excerpt":"","more":"<blockquote>\n<p>关于window.devicePixelRatio</p>\n</blockquote>\n<p>　　devicePixelRatio是设备的像素比，在移动端运用canvas时可以解决图像的模糊问题。</p>\n<blockquote>\n<p>主要</p>\n</blockquote>\n<p>　　canvas.width,canvas.height是canvas的画布大小。canvas.style.width,canvas.style.height是浏览器渲染canvas的尺寸。可以同时运用控制缩放效果。<br>　　在移动端运用时，画布的大小应等于浏览器渲染canvas的大小 * 浏览器的分辨率。</p>\n"},{"title":"About　get　ip","date":"2017-04-16T16:00:00.000Z","_content":"\n>主要\n　\n\n　php获取ip地址有多种方法，判断空值、相辅相成比较容易得到对应的值。\n\n```\n$_SERVER['REMOTE_ADDR']\t\t//获取最后一个代理服务器的IP，若无代理则是客户端IP\n\n```\n```\ngetenv('REMOTE_ADDR')\t\t//同上\n\n```\n```\ngetenv('HTTP_X_FORWARDED_FOR')\t\t//不同类型的代理显示的可能不同，真实IP或空\n\n```\n```\ngetenv('HTTP_CLIENT_IP')\t\t//获取客户端IP\n\n```\n```\ngethostbyname(fukua777.cn)\t\t//获取服务器端IP\n\n```\n\n>另\n\n　通过file_get_contents(xxx.xxx.xx)，通过调用不同的接口地址（BAT等），能获取相应的经纬、城市、运营商等信息\n","source":"_posts/About ip.md","raw":"---\ntitle: About　get　ip\ncategories: 甫夸之谈———php\ndate: 2017-04-17\ntags: \"<span style='color: cyan; font-size: 20px;'>php</span>\"\n---\n\n>主要\n　\n\n　php获取ip地址有多种方法，判断空值、相辅相成比较容易得到对应的值。\n\n```\n$_SERVER['REMOTE_ADDR']\t\t//获取最后一个代理服务器的IP，若无代理则是客户端IP\n\n```\n```\ngetenv('REMOTE_ADDR')\t\t//同上\n\n```\n```\ngetenv('HTTP_X_FORWARDED_FOR')\t\t//不同类型的代理显示的可能不同，真实IP或空\n\n```\n```\ngetenv('HTTP_CLIENT_IP')\t\t//获取客户端IP\n\n```\n```\ngethostbyname(fukua777.cn)\t\t//获取服务器端IP\n\n```\n\n>另\n\n　通过file_get_contents(xxx.xxx.xx)，通过调用不同的接口地址（BAT等），能获取相应的经纬、城市、运营商等信息\n","slug":"About ip","published":1,"updated":"2017-05-31T14:42:56.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ys5p6l001ba8vu9ud9wauk","content":"<blockquote>\n<p>主要\n　</p>\n</blockquote>\n<p>　php获取ip地址有多种方法，判断空值、相辅相成比较容易得到对应的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$_SERVER[&apos;REMOTE_ADDR&apos;]\t\t//获取最后一个代理服务器的IP，若无代理则是客户端IP</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getenv(&apos;REMOTE_ADDR&apos;)\t\t//同上</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getenv(&apos;HTTP_X_FORWARDED_FOR&apos;)\t\t//不同类型的代理显示的可能不同，真实IP或空</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getenv(&apos;HTTP_CLIENT_IP&apos;)\t\t//获取客户端IP</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gethostbyname(fukua777.cn)\t\t//获取服务器端IP</div></pre></td></tr></table></figure>\n<blockquote>\n<p>另</p>\n</blockquote>\n<p>　通过file_get_contents(xxx.xxx.xx)，通过调用不同的接口地址（BAT等），能获取相应的经纬、城市、运营商等信息</p>\n","excerpt":"","more":"<blockquote>\n<p>主要\n　</p>\n</blockquote>\n<p>　php获取ip地址有多种方法，判断空值、相辅相成比较容易得到对应的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$_SERVER[&apos;REMOTE_ADDR&apos;]\t\t//获取最后一个代理服务器的IP，若无代理则是客户端IP</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getenv(&apos;REMOTE_ADDR&apos;)\t\t//同上</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getenv(&apos;HTTP_X_FORWARDED_FOR&apos;)\t\t//不同类型的代理显示的可能不同，真实IP或空</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getenv(&apos;HTTP_CLIENT_IP&apos;)\t\t//获取客户端IP</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gethostbyname(fukua777.cn)\t\t//获取服务器端IP</div></pre></td></tr></table></figure>\n<blockquote>\n<p>另</p>\n</blockquote>\n<p>　通过file_get_contents(xxx.xxx.xx)，通过调用不同的接口地址（BAT等），能获取相应的经纬、城市、运营商等信息</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj7ys5p4b0001a8vu7zal6m2o","category_id":"cj7ys5p4t0006a8vuekk4rkby","_id":"cj7ys5p5a000ea8vu0kzz06nz"},{"post_id":"cj7ys5p4k0003a8vuki4hh2ao","category_id":"cj7ys5p55000ba8vu7ky0ttv3","_id":"cj7ys5p5m000la8vuq8dyqbue"},{"post_id":"cj7ys5p4v0007a8vues6r33vr","category_id":"cj7ys5p4t0006a8vuekk4rkby","_id":"cj7ys5p5u000ra8vusqhdozx4"},{"post_id":"cj7ys5p5p000oa8vu7n8vcvdn","category_id":"cj7ys5p4t0006a8vuekk4rkby","_id":"cj7ys5p62000wa8vueeh85ojk"},{"post_id":"cj7ys5p4x0008a8vu9rddi024","category_id":"cj7ys5p5n000ma8vugqds15pl","_id":"cj7ys5p63000ya8vub41oyu37"},{"post_id":"cj7ys5p54000aa8vu6e2vhn3w","category_id":"cj7ys5p5v000sa8vuqe5b1t00","_id":"cj7ys5p680014a8vux4uvsckz"},{"post_id":"cj7ys5p56000da8vum6fyrvmm","category_id":"cj7ys5p64000za8vuqu5x3l9o","_id":"cj7ys5p6k001aa8vu33ub90re"},{"post_id":"cj7ys5p6i0019a8vuz3jce04i","category_id":"cj7ys5p5v000sa8vuqe5b1t00","_id":"cj7ys5p6p001ga8vudvuyejhg"},{"post_id":"cj7ys5p5a000fa8vuki55u5md","category_id":"cj7ys5p6e0016a8vumpvaxgxu","_id":"cj7ys5p6r001ja8vu5ernxygy"},{"post_id":"cj7ys5p5g000ja8vulzfk6ims","category_id":"cj7ys5p6n001ca8vud4vhjfko","_id":"cj7ys5p6s001la8vugc1busv9"},{"post_id":"cj7ys5p5l000ka8vuwsbg57u6","category_id":"cj7ys5p6p001ha8vuhfj8nlcb","_id":"cj7ys5p6u001pa8vurqurf6eb"},{"post_id":"cj7ys5p5s000qa8vub9qmr1u6","category_id":"cj7ys5p6s001ma8vusxyyh0bt","_id":"cj7ys5p6v001ta8vulcxy79z3"},{"post_id":"cj7ys5p5v000ua8vufo778plr","category_id":"cj7ys5p6u001qa8vuc9v8syp4","_id":"cj7ys5p6x001xa8vuo6tcxav9"},{"post_id":"cj7ys5p62000xa8vuyw7b3d2h","category_id":"cj7ys5p6w001ua8vutqbxo3l1","_id":"cj7ys5p6z0021a8vu2hjm8x8b"},{"post_id":"cj7ys5p640011a8vu6gudwi3j","category_id":"cj7ys5p6y001ya8vur9mdiar4","_id":"cj7ys5p710025a8vus2mmsr4e"},{"post_id":"cj7ys5p660013a8vuxq6oxkit","category_id":"cj7ys5p6s001ma8vusxyyh0bt","_id":"cj7ys5p720029a8vu7wnjekh1"},{"post_id":"cj7ys5p6a0015a8vuix18m4v0","category_id":"cj7ys5p710026a8vuuyc6ij59","_id":"cj7ys5p75002da8vujcdn9sqm"},{"post_id":"cj7ys5p6l001ba8vu9ud9wauk","category_id":"cj7ys5p72002aa8vuj09exfh7","_id":"cj7ys5p77002ga8vuo3e5vucx"}],"PostTag":[{"post_id":"cj7ys5p4b0001a8vu7zal6m2o","tag_id":"cj7ys5p4p0005a8vupbrpx42q","_id":"cj7ys5p56000ca8vua2vuv2qx"},{"post_id":"cj7ys5p4k0003a8vuki4hh2ao","tag_id":"cj7ys5p530009a8vuxhvcfw7f","_id":"cj7ys5p5f000ia8vunfpqlgk3"},{"post_id":"cj7ys5p4v0007a8vues6r33vr","tag_id":"cj7ys5p5b000ga8vufw4nd17r","_id":"cj7ys5p5r000pa8vup6zejibo"},{"post_id":"cj7ys5p4x0008a8vu9rddi024","tag_id":"cj7ys5p5n000na8vut18of192","_id":"cj7ys5p62000va8vu08la1dkl"},{"post_id":"cj7ys5p54000aa8vu6e2vhn3w","tag_id":"cj7ys5p5v000ta8vuhh3kbf13","_id":"cj7ys5p660012a8vujgrsrknw"},{"post_id":"cj7ys5p56000da8vum6fyrvmm","tag_id":"cj7ys5p640010a8vuoexbfmev","_id":"cj7ys5p6h0018a8vues0jk8yc"},{"post_id":"cj7ys5p6i0019a8vuz3jce04i","tag_id":"cj7ys5p530009a8vuxhvcfw7f","_id":"cj7ys5p6o001ea8vutpvz8px0"},{"post_id":"cj7ys5p5a000fa8vuki55u5md","tag_id":"cj7ys5p6g0017a8vusgg00z50","_id":"cj7ys5p6p001fa8vu0vekml4h"},{"post_id":"cj7ys5p5g000ja8vulzfk6ims","tag_id":"cj7ys5p6o001da8vu2d34l44x","_id":"cj7ys5p6r001ka8vu7s858yqy"},{"post_id":"cj7ys5p5l000ka8vuwsbg57u6","tag_id":"cj7ys5p6p001ia8vucyy3zp58","_id":"cj7ys5p6t001oa8vu1raaph9i"},{"post_id":"cj7ys5p5p000oa8vu7n8vcvdn","tag_id":"cj7ys5p6t001na8vur7z6k8dt","_id":"cj7ys5p6v001sa8vufvo5f0hn"},{"post_id":"cj7ys5p5s000qa8vub9qmr1u6","tag_id":"cj7ys5p6v001ra8vu00b3bj4h","_id":"cj7ys5p6x001wa8vu7zt1snwx"},{"post_id":"cj7ys5p5v000ua8vufo778plr","tag_id":"cj7ys5p6w001va8vukbxm16o8","_id":"cj7ys5p6z0020a8vudb2n12tw"},{"post_id":"cj7ys5p62000xa8vuyw7b3d2h","tag_id":"cj7ys5p6y001za8vuf8vjkval","_id":"cj7ys5p700024a8vu1duvt83v"},{"post_id":"cj7ys5p640011a8vu6gudwi3j","tag_id":"cj7ys5p700023a8vuol264hnk","_id":"cj7ys5p720028a8vu7ujt93me"},{"post_id":"cj7ys5p660013a8vuxq6oxkit","tag_id":"cj7ys5p6v001ra8vu00b3bj4h","_id":"cj7ys5p74002ca8vuv0rdy2yz"},{"post_id":"cj7ys5p6a0015a8vuix18m4v0","tag_id":"cj7ys5p72002ba8vuli11u5xt","_id":"cj7ys5p76002fa8vu0g7zk57y"},{"post_id":"cj7ys5p6l001ba8vu9ud9wauk","tag_id":"cj7ys5p75002ea8vum8mfplfu","_id":"cj7ys5p77002ha8vutcta4bl9"}],"Tag":[{"name":"<div style='transform: rotate(10deg) scale(3); color: pink;'>$.when()</div>","_id":"cj7ys5p4p0005a8vupbrpx42q"},{"name":"Canvas","_id":"cj7ys5p530009a8vuxhvcfw7f"},{"name":"$.Deferred()","_id":"cj7ys5p5b000ga8vufw4nd17r"},{"name":"Messi","_id":"cj7ys5p5n000na8vut18of192"},{"name":"<b style='color:red;'>meta</b>","_id":"cj7ys5p5v000ta8vuhh3kbf13"},{"name":"mongodb","_id":"cj7ys5p640010a8vuoexbfmev"},{"name":"<b style='font-size:40px;'>RegExp</b>","_id":"cj7ys5p6g0017a8vusgg00z50"},{"name":"<h1>Websocket</h1>","_id":"cj7ys5p6o001da8vu2d34l44x"},{"name":"ng-if、ng-show","_id":"cj7ys5p6p001ia8vucyy3zp58"},{"name":"clipboard","_id":"cj7ys5p6t001na8vur7z6k8dt"},{"name":"<span style='color: orange;'>fs</span>","_id":"cj7ys5p6v001ra8vu00b3bj4h"},{"name":"Git","_id":"cj7ys5p6w001va8vukbxm16o8"},{"name":"<h1>gulp</h1>","_id":"cj7ys5p6y001za8vuf8vjkval"},{"name":"html","_id":"cj7ys5p700023a8vuol264hnk"},{"name":"sql","_id":"cj7ys5p72002ba8vuli11u5xt"},{"name":"<span style='color: cyan; font-size: 20px;'>php</span>","_id":"cj7ys5p75002ea8vum8mfplfu"}]}}